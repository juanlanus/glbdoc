=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2014.06.02 15:10:29 =~=~=~=~=~=~=~=~=~=~=~=
login as: icjlud
Using keyboard-interactive authentication.
Password: 
Last login: Mon Jun  2 13:03:16 2014 from 172.16.10.101
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
COBJVM=sun_142
JAVA_HOME=/usr/j2se
LD_LIBRARY_PATH=/usr/j2se/jre/lib/sparc:/usr/j2se/jre/lib/sparc/client:/usr/j2se/jre/lib/sparc/native_threads:/usr/j2se/jre/lib/sparc:/opt/mfocus/des/cobol/lib:/opt/IBM/db2/V9.7/lib:/export/home/db2inst1/sqllib/lib64:/export/home/db2inst1/sqllib/lib32
PATH=/usr/j2se/jre/sh:/usr/j2se/sh:/usr/j2se/bin:/usr/j2se/jre/bin:/opt/mfocus/des/cobol/lib:/opt/mfocus/des/cobol/bin:/usr/bin:/bin:/usr/bin:/d/iccol/desarrollo/macros:/d/iccol/desarrollo/utiles:/opt/bin:/usr/sbin:/usr/lib:/usr/ccs/bin:/opt/SUNWspro/bin:/usr/jdk/latest/bin:/usr/local/bin:/usr/j2se/bin:/usr/openwin/bin:.:/export/home/db2inst1/sqllib/bin:/export/home/db2inst1/sqllib/adm:/export/home/db2inst1/sqllib/misc
CLASSPATH=/opt/mfocus/des/cobol/lib/mfcobol.jar:.:/usr/j2se/jre/lib/rt.jar:/opt/mfocus/des/cobol/lib/mfimtk.jar:/opt/mfocus/des/cobol/lib/xerces.jar:/opt/mfocus/des/cobol/lib/castor-0_9_4_1-xml.jar:/opt/mfocus/des/cobol/lib/mfcobol.jar:/usr/j2se/jre/lib/dt.jar:/usr/j2se/jre/lib/rt.jar:/d/iccol/desarrollo/java/server:/export/home/db2inst1/sqllib/java/db2java.zip:/export/home/db2inst1/sqllib/java/db2jcc.jar:/export/home/db2inst1/sqllib/java/sqlj.zip:/export/home/db2inst1/sqllib/function:/export/home/db2inst1/sqllib/java/db2jcc_license_cu.jar:.
COBCPY=/opt/mfocus/des/cobol/cpylib:/opt/mfocus/des/cobol/cpylib:/d/iccol/desarrollo/copys/pais:/d/iccol/desarrollo/copys
Java version = 1.4.2_19
Java vendor = Sun Microsystems Inc.
Java OS name = SunOS
Java OS arch = sparc
Java OS version = 5.10

  ####    ####   #####   ######   ####
 #    #  #    #  #    #  #       #
 #       #    #  #    #  #####    ####
 #       #    #  #    #  #            #
 #    #  #    #  #    #  #       #    #
  ####    ####   #####   ######   ####

 #####
#     #   ####   #        ####   #    #  #####      #      ##
#        #    #  #       #    #  ##  ##  #    #     #     #  #
#        #    #  #       #    #  # ## #  #####      #    #    #
#        #    #  #       #    #  #    #  #    #     #    ######
#     #  #    #  #       #    #  #    #  #    #     #    #    #
 #####    ####   ######   ####   #    #  #####      #    #    #

 #####
#     #   ####   #    #  #####      #    #         ##     ####      #     ####
#        #    #  ##  ##  #    #     #    #        #  #   #    #     #    #    #
#        #    #  # ## #  #    #     #    #       #    #  #          #    #    #
#        #    #  #    #  #####      #    #       ######  #          #    #    #
#     #  #    #  #    #  #          #    #       #    #  #    #     #    #    #
 #####    ####   #    #  #          #    ######  #    #   ####      #     ####

 #####                                           #####  #         ###
#     #  #    #  #    #          #    #         #     # #    #   #   #
#        #    #  ##   #          #    #               # #    #  #     #
 #####   #    #  # #  #          #    #          #####  #    #  #     #
      #  #    #  #  # #          #    #   ###   #       ####### #     #
#     #  #    #  #   ##           #  #    ###   #            #   #   #
 #####    ####   #    # #######    ##     ###   #######      #    ###

icjlud@codes /d/iccol/desarrollo
$ . viset
viset running
/d/iccol/desarrollo>ma
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ma. visetvi visetcd      vi visetvi sh-PR-Ripleyma             vi sh-PR-Ripley
"sh-PR-Ripley" [New file] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"sh-PR-Ripley" [New file]:q/d/iccol/desarrollo/macros>vi $HISTFILE
"/d/iccol/desarrollo/.history.icjlud" 463 lines, 10460 characters (638 null) \201^Afind / -name extfh.cfg -print
find / -name extfh.cfg -print | grep -v cannot
man grep
find / -name extfh.cfg -print 2> /dev/null | grep -v cannot
/d/iccol/desarrollo>find / -name extfh.cfg -print 2> /dev/null | grep -v cann>
/icven/desarrollo/database/extfh.cfg
/icven/desarrollo/extfh.cfg
/icven/icdbant/extfh.cfg
/icven/produccion/extfh.cfg
/dicdb/extfh.cfg
/despeciales2/prueba-globant/extfh.cfg
/despeciales2/produccion/datos/glbnt/base0/extfh.cfg
/despeciales2/produccion/datos/glbnt/base1/extfh.cfg
\202^N/despeciales2/produccion/icdb/extfh.cfg
/despeciales2/produccion/extfh.cfg
/despeciales2/produccion/backup/extfh.cfg
/despeciales/BBVA/extfh.cfg
/despeciales/indeptes/extfh.cfg
/d/iccol/desarrollo/database/desnovedat/extfh.cfg
/d/iccol/desarrollo/database/prunovedat/extfh.cfg
/d/iccol/desarrollo/database/extfh.cfg
/d/iccol/desarrollo/extfh.cfg
view /d/iccol/desarrollo/extfh.cfg
find / -name extfh.cfg -print 2> /dev/null | grep -v cannot
view /despeciales2/prueba-globant/extfh.cfg
echo $EXTFH
\202^[echo $DATABASE
time
date
horaInicio=$(date)
$horaInicio
echo $horaInicio
cat qqqq
ma
cat qqqq
vi wwww
echo $(cat qqqq wwww)
echo $(cat qqqq wwww)  > zzzz
cat zzzz
man cat
vi z
vi zzzz
rm zzzz qqqq wwww
ls -la | grep icjlud
cat .parm
vi sh-PE-Ripley
sh-PE-Ripley
fg
sh-PE-Ripley\20"/d/iccol/desarrollo/.history.icjlud" 463 lines, 10460 characters (638 null)\20return 0fi
var=$1#The enviornment variable to be processed
    addrm_str=$2  #The new path to be used
    action=$3     #Action: a -> add, r -> remove
    if [ "X${action?}" != "Xa" -a "X${action?}" != "Xr" ]; then
return 0  # return without doing anything
    fi
awkval='$1 != "'${addrm_str?}'"{print $0}'
    newval=`eval /usr/bin/echo \\${$var:-""} | /usr/bin/awk '{for (i=1; i<= NF; ++i) \if( $i != VAR && length($i) > 0 ) print $i":"}' FS=":" VAR=${addrm_str?}`
    newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/\: /\:/g'`
    if [ "X${action?}" = "Xa" ]; then
newval=${newval?}"${addrm_str?}"
    else
newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/:$//'`
    fi
eval $var=\"${newval?}\"
    unset var addrm_str awkval newval
}
\202^A\230\201. viset
ma
vi sh-PR-Ripley
vi $HISTFILE
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~REPLACE 1 CHAREmreturn 0fi
var=$1#The enviornment variable to be processed
    addrm_str=$2  #The new path to be used
    action=$3     #Action: a -> add, r -> remove
    if [ "X${action?}" != "Xa" -a "X${action?}" != "Xr" ]; then
return 0  # return without doing anything
    fi
awkval='$1 != "'${addrm_str?}'"{print $0}'
    newval=`eval /usr/bin/echo \\${$var:-""} | /usr/bin/awk '{for (i=1; i<= NF; ++i) \if( $i != VAR && length($i) > 0 ) print $i":"}' FS=":" VAR=${addrm_str?}`
    newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/\: /\:/g'`
    if [ "X${action?}" = "Xa" ]; then
newval=${newval?}"${addrm_str?}"
    else
newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/:$//'`
    fi
eval $var=\"${newval?}\"
    unset var addrm_str awkval newval
}
\202^A\221\201. viset
vi viset
. viset
ma
vi sh-PR-Ripley
vi viset
cd
vi viset
if [ $# -ne 3 ]; then
return 0
    fi
var=$1#The enviornment variable to be processed
    addrm_str=$2  #The new path to be used
    action=$3     #Action: a -> add, r -> remove
    if [ "X${action?}" != "Xa" -a "X${action?}" != "Xr" ]; then
return 0  # return without doing anything
    fi
awkval='$1 != "'${addrm_str?}'"{print $0}'
    newval=`eval /usr/bin/echo \\${$var:-""} | /usr/bin/awk '{for (i=1; i<= NF; ++i) \if( $i != VAR && length($i) > 0 ) print $i":"}' FS=":" VAR=${addrm_str?}`
    newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/\: /\:/g'`
    if [ "X${action?}" = "Xa" ]; then
newval=${newval?}"${addrm_str?}"
    else
newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/:$//'`
    fi
eval $var=\"${newval?}\"
    unset var addrm_str awkval newval
}



    \202^A\230\201. viset
ma
vi sh-PE-Ripley
vi $HISTFILE
















~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
21 lines deleted~"/d/iccol/desarrollo/.history.icjlud" File exists - use "w! /d/iccol/desarrollo/.history.icjlud" to overwrite[Hit return to continue] return 0fi
var=$1#The enviornment variable to be processed
    addrm_str=$2  #The new path to be used
    action=$3     #Action: a -> add, r -> remove
    if [ "X${action?}" != "Xa" -a "X${action?}" != "Xr" ]; then
return 0  # return without doing anything
    fi
awkval='$1 != "'${addrm_str?}'"{print $0}'
    newval=`eval /usr/bin/echo \\${$var:-""} | /usr/bin/awk '{for (i=1; i<= NF; ++i) \if( $i != VAR && length($i) > 0 ) print $i":"}' FS=":" VAR=${addrm_str?}`
    newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/\: /\:/g'`
    if [ "X${action?}" = "Xa" ]; then
newval=${newval?}"${addrm_str?}"
    else
newval=`/usr/bin/echo ${newval?} | /usr/bin/sed 's/:$//'`
    fi
eval $var=\"${newval?}\"
    unset var addrm_str awkval newval
}
\202^A\221\201. viset
vi viset
. viset
ma
vi sh-PR-Ripley
vi viset
cd
vi viset
ma
vi sh-PE-Ripley
vi $HISTFILE
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/.history.icjlud" [Not edited] [Modified] line 439 of 441 --99%-- :q!/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi $HISTFILEvi sh-PR-Ripleyma             . visetma     vi sh-PR-Ripleyvi sh-PE
"sh-PE-Ripley" 729 lines, 25887 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................"sh-PE-Ripley" 729 lines, 25887 characters/scot    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0


    


"APPEND MODE     # 
    "     # 
    "     # 
    "     # 
    "     # 
    "     # 
    "     # 
    "     # 
    "     # 


    # APPEND MODEACIERTA A - VEHÍCULO E HIPOTECARIO APPEND MODEACIERTA A - COOPERATIVAS APPEND MODEACIERTA A - FINANCIERO
 APPEND MODEACIERTA A - TARJETA DE CRÉDITO APPEND MODEACIERTA A - TELECOMUNICACIONES

 APPEND MODEACIERTA A INSTALAMENTOS APPEND MODEQUANTO
 APPEND MODEACIERTA+

 APPEND MODECARACTERISTICAS
OPEN MODEecho " "   
OPEN MODE# parámetros para el programa: 
OPEN MODEecho " \n\n$raya\nSCOTTATCH:\n\n"TREPLACE 1 CHARB\n\




    echo "\n$raya\nSCOTBATCH:\n\n":\n\n"INSERT MODEICEPRERIP01"APPEND MODE>> >> $archivo_log" >> $archivo_log
EEe" >> $archivo_logif [ -z "$sanata" ]then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...

    





    


#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion


    echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log        INPUT MODE    echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log   $CHANGE MODEPESVNO
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log    echo "\n$raya\nPESVNO:\n\n" >> $archivo_logPESVN$CHANGE MODEEXTRACCIÓN# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
thenreadTIPO_ARCHIVO# 0 1-11, 1 1-11-45else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
thenif [ -z "$sanata" ]then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
thenreadTIPO_ARCHIVO# 0 1-11, 1 1-11-45else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2$NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subs
readID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
read continuar
if [ -z $continuar ]
then
parmsOK="1"
continuar="listo"
elseINSERT MODE


     #     # lee el set de parámetros hasta que sea OKparmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:lee el set de que $CHANGE MODEla satisfacción del ope:w"sh-PE-Ripley" 735 lines, 26366 characters then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg    # lee el set de parámetros hasta la satisfacción del opeparmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosIn
c " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"    
while [ $parmsOK == "0" ]

do


readBASE# I interna, C cliente



if [ $BASE == "E" ]




thenreadNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45else
OPEN MODEleerParametros
leerParametrossAPPEND MODE() {    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log        print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2$NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosIn
c " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
leerParametros
leerParametros() {
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo base



#*******************************************************************************
#*******************************************************************************OPEN MODE# Interacción con el operador para cargar/editar el set de parámetros


OPEN MODEoo
OPEN MODE
OPEN MODE
OPEN MODEleerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]thenthen
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
    


    

    




OPEN MODE}}:w"sh-PE-Ripley" 745 lines, 26638 characters 



#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
60 lines deleted
}

    fi


cancelado="1"echo $rayaecho "Las cantidades de registros no cuadran: proceso cancelado"echo $rayaleerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
    readBASE                     # I interna, C cliente
        if [ $BASE == "E" ]
        then
readNOM_ARCHIVO# nombre del archivo base
            readTIPO_ARCHIVO# 0 1-11, 1 1-11-45
        else
            readTIPO_EXTRACT# N NIT, C cod subs
            readID_EXTRACT# NIT o cos subs
        fi
readTIPO_PROC# A actual, H histórico
        if [ $TIPO_PROC == "H" ]
        then
            readFECHA_INICIO# fecha desde
else
            FECHA_INICIO=$FECHA_PROC
        fi

        paramsPrint # $$$$ DEBUG
        sleep 2
        # guarda en archivo .parm
        paramsPut
clear
echo $raya
        # banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
        while [ $continuar == "_" ]
        do
60 more lines"sh-PE-Ripley" [Modified] line 487 of 745 --65%-- :w"sh-PE-Ripley" 745 lines, 26638 characters while [ $continuar == "_" ]do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done
}




#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso    # la variable archivo es el nombre de la base, interna o del cliente,# y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"while [ $continuar == "_" ]do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done
}




#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso    #*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha



#*******************************************************************************
    leerParametros    :w"sh-PE-Ripley" 746 lines, 26720 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi sh-PE-Ripleyvi $HISTFILE   $HISTFILE   vi $HISTFILEvi sh-PR-Ripleysh-PR-Ripley   
ksh: sh-PR-Ripley:  not found
/d/iccol/desarrollo/macros>kk^[  /d/iccol/desarrollo/macros>kksh-PR-Ripleyssh-PR-Ripleyhsh-PR-Ripley sh-PR-Ripleysh-PR-Ripley sh-PR-Ripley h-PR-Ripley vsh-PR-Ripleyish-PR-Ripley sh-PR-Ripley
"sh-PR-Ripley" [New file] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"sh-PR-Ripley" [New file]:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi sh-PR-Ripleyvi sh-PE
"sh-PE-Ripley" 746 lines, 26720 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................"sh-PE-Ripley" 746 lines, 26720 characters:q/d/iccol/desarrollo/macros>jobs
[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>jobsvi sh-PE-Ripleysh-PE-Ripley   
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:1
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981

----------------------------------------------------------------------
EXTRACCIÓN:


Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs

----------------------------------------------------------------------
PESVNO:


Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]"sh-PE-Ripley" line 572 of 746 --76%-- INSERT MODE# 
# 
# 
# 
# 
# 
# 
# 
#         then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
9 lines deleted



:APPEND MODE  #APPEND MODE   
#   
#   
#   
#   
#   
#   
#   echo $DATABASEfi fi#*******************************************************************************:w"sh-PE-Ripley" 737 lines, 26413 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>man ksh
Reformatting page.  Please Wait... done

User Commands                                              ksh(1)

NAME
     ksh, rksh - KornShell,  a  standard/restricted  command  and
     programming language

SYNOPSIS
     /usr/bin/ksh [+ abCefhikmnoprstuvx] [+ o option]...
         [arg]...

     /usr/bin/ksh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

     /usr/xpg4/bin/sh [+ abCefhikmnoprstuvx]
         [+ o option]... [arg]...

     /usr/xpg4/bin/sh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

     /usr/bin/rksh [+ abCefhikmnoprstuvx] [+ o option]...
         [arg]...

     /usr/bin/rksh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

DESCRIPTION
     The /usr/xpg4/bin/sh utility is a standards compliant shell.
     This utility provides all the functionality of /usr/bin/ksh,
     except in cases where differences  in  behavior  exist.  See
     Arithmetic Expansions section for details.

     /usr/bin/ksh is a command and programming language that exe-
     cutes  commands  read  from  a terminal or a file. rksh is a
     restricted version of the command  interpreter  ksh;  it  is
     used  to set up login names and execution environments whose
     capabilities are more controlled than those of the  standard
     shell.  See  the Invocation section for the meaning of argu-
     ments to the shell.

  Definitions
     A metacharacter is one of the following characters:

SunOS 5.10          Last change: 29 Jun 2005                    1

--More--(1%)User Commands                                              ksh(1)

     ; & (   )   |   <   >      NEWLINE   SPACE   TAB

     A blank is a TAB or a SPACE. An identifier is a sequence  of
     letters,  digits,  or  underscores starting with a letter or
     underscore. Identifiers are used as names for functions  and
     variables.  A  word is a sequence of characters separated by
     one or more non-quoted metacharacters.

     A command is a sequence of characters in the syntax  of  the
     shell language. The shell reads each command and carries out
     the desired action either directly or by  invoking  separate
     utilities.  A  special-command  is a command that is carried
     out by the shell without creating a separate process. Except
     for  documented  side  effects, most special commands can be
     implemented as separate utilities.

  Commands
     A simple-command is  a  sequence  of  blank-separated  words
     which  can  be  preceded  by a variable assignment list. See
     Environment. The first word specifies the name of  the  com-
     mand  to  be  executed.  Except  as specified, the remaining
     words are passed as arguments to the  invoked  command.  The
     command  name  is  passed  as  argument 0 (see exec(2)). The
     value of a simple-command is its  exit  status  if  it  ter-
     minates normally. If it terminates abnormally due to receipt
     of a signal, the value is the signal number  plus  128.  See
     signal.h(3HEAD) for a list of signal values. Obviously, nor-
     mal exit status values 129 to 255  cannot  be  distinguished
     from  abnormal  exit caused by receiving signal numbers 1 to
     127.

     A pipeline is a sequence of one or more  commands  separated
     by  |.  The  standard output of each command but the last is
     connected by a pipe(2) to the standard  input  of  the  next
     command.  Each  command  is  run  as a separate process; the
     shell waits for the last  command  to  terminate.  The  exit
     status of a pipeline is the exit status of the last command.

     A list is a sequence of one or more pipelines  separated  by
     ;,  &,  &&, or ||, and optionally terminated by ;, &, or |&.
     Of these five symbols, ;, &, and |& have  equal  precedence,
     which is lower than that of && and ||. The symbols && and ||
     also have equal precedence. A semicolon (;)  causes  sequen-
     tial  execution  of the preceding pipeline; an ampersand (&)
     causes asynchronous  execution  of  the  preceding  pipeline
     (that  is, the shell does not wait for that pipeline to fin-
--More--(2%)     ish). The symbol |& causes  asynchronous  execution  of  the
     preceding   command   or   pipeline   with  a  two-way  pipe

SunOS 5.10          Last change: 29 Jun 2005                    2

User Commands                                              ksh(1)

     established to the parent shell.

     The standard input and output of the spawned command can  be
     written  to  and  read from by the parent shell using the -p
     option of the special commands read and print  described  in
     Special Commands. The symbol && (||) causes the list follow-
     ing it to be executed only if the preceding pipeline returns
     0  (or  a  non-zero) value. An arbitrary number of new-lines
     can appear in a list, instead of a semicolon, to  delimit  a
     command.

     A command is either a simple-command or one of  the  follow-
     ing.  Unless  otherwise stated, the value returned by a com-
     mand is that of the last simple-command executed in the com-
     mand.

     for identifier [ in word ... ] ; do list ; done

         Each time a for command is executed, identifier  is  set
         to the next word taken from the in word list. If in word
         ...  is omitted, then the for command  executes  the  do
         list once for each positional parameter that is set. See
         Parameter Substitution. Execution ends when there are no
         more words in the list.

     select identifier [ in word ... ] ; do list ; done

         A select command prints to standard error (file descrip-
         tor  2), the set of words, each preceded by a number. If
         in word ... is omitted, then the  positional  parameters
         are  used  instead.  See Parameter Substitution. The PS3
         prompt is printed and a line is read from  the  standard
         input. If this line consists of the number of one of the
         listed words, then the value of the variable  identifier
         is set to the word corresponding to this number. If this
         line is empty the selection list is printed again.  Oth-
         erwise  the  value  of the variable identifier is set to
         NULL. (See Blank Interpretation about NULL).   The  con-
         tents  of  the line read from standard input is saved in
         the shell variable REPLY. The list is executed for  each
         selection  until  a  break or EOF is encountered. If the
--More--(4%)         REPLY variable is set to NULL by the execution of  list,
         then the selection list is printed before displaying the
         PS3 prompt for the next selection.

     case word in [ pattern [ | pattern ] ) list ;; ] ... esac

         A case command executes the  list  associated  with  the

SunOS 5.10          Last change: 29 Jun 2005                    3

User Commands                                              ksh(1)

         first  pattern  that  matches word. The form of the pat-
         terns is the same as that used for file-name generation.
         See File Name Generation.

     if list ; then list ; [ elif list ; then list ; ...  ] [
     else list ; ] fi

         The list following if is executed and, if it returns  an
         exit  status  of 0, the list following the first then is
         executed. Otherwise, the list following elif is executed
         and, if its value is 0, the list following the next then
         is executed. Failing that, the else list is executed. If
         no  else list or then list is executed, then the if com-
         mand returns 0 exit status.

     while list ; do list ; done
     until list ; do list ; done

         A while command repeatedly executes the while list  and,
         if the exit status of the last command in the list is 0,
         executes the do list; otherwise the loop terminates.  If
         no  commands in the do list are executed, then the while
         command returns 0 exit status.  until  can  be  used  in
         place of while to negate the loop termination test.

     (list)

         Execute list in a separate environment. If two  adjacent
         open parentheses are needed for nesting, a space must be
         inserted to avoid arithmetic evaluation.

     {list}

         list is simply executed. Unlike the metacharacters ( and
         ),  {  and  }  are  reserved words and must occur at the
         beginning of a line or after a ; in order to  be  recog-
--More--(5%)         nized.

     [[expression]]

         Evaluates expression and  returns  0  exit  status  when
         expression  is  true.  See Conditional Expressions for a
         description of expression.

     function identifier { list ;}
     identifier( ) { list ;}

SunOS 5.10          Last change: 29 Jun 2005                    4

User Commands                                              ksh(1)

         Define a function which is referenced by identifier. The
         body  of  the function is the list of commands between {
         and }. See Functions.

     time pipeline

         The pipeline is executed and the elapsed time as well as
         the user and system time are printed to standard error.

     The following reserved words  are  only  recognized  as  the
     first word of a command and when not quoted:

       !          if       then     else    elif    fi      case
       esac       for      while    until   do      done    {   }
       function   select   time     [[  ]]

  Comments
     A word beginning with # causes that word and all the follow-
     ing characters up to a new-line to be ignored.

  Aliasing
     The first word of each command is replaced by the text of an
     alias  if  an alias for this word has been defined. An alias
     name consists of any number of  characters  excluding  meta-
     characters,  quoting  characters, file expansion characters,
     parameter and command substitution characters,  and  =.  The
     replacement  string  can  contain  any  valid  shell  script
     including the metacharacters listed above. The first word of
     each  command  in the replaced text, other than any that are
     in the process of being replaced, is tested for aliases.  If
     the  last  character  of the alias value is a blank then the
     word following the alias is also be checked for  alias  sub-
     stitution.  Aliases  can be used to redefine special builtin
--More--(6%)     commands but cannot be used to redefine the  reserved  words
     listed  above.  Aliases can be created, listed, and exported
     with the alias command and can be removed with  the  unalias
     command.  Exported  aliases  remain  in  effect  for scripts
     invoked by name, but  must  be  reinitialized  for  separate
     invocations  of the shell. See Invocation. To prevent infin-
     ite loops  in  recursive  aliasing,  if  the  shell  is  not
     currently  processing an alias of the same name, the word is
     replaced by the value of the alias; otherwise, it is not  be
     replaced.

     Aliasing is performed when scripts are read, not while  they
     are  executed.  Therefore,  for an alias to take effect, the

SunOS 5.10          Last change: 29 Jun 2005                    5

User Commands                                              ksh(1)

     alias definition command has to be executed before the  com-
     mand which references the alias is read.

     Aliases are frequently used as a short hand  for  full  path
     names.  An  option to the aliasing facility allows the value
     of the alias to be automatically set to the full pathname of
     the  corresponding command. These aliases are called tracked
     aliases. The value of a tracked alias is defined  the  first
     time  the  corresponding  command  is  looked up and becomes
     undefined each  time  the  PATH  variable  is  reset.  These
     aliases remain tracked so that the next subsequent reference
     redefines the value. Several tracked  aliases  are  compiled
     into  the shell. The -h option of the set command makes each
     referenced command name into a tracked alias.

     The  following  exported  aliases  are  compiled  into  (and
     built-in to) the shell but can be unset or redefined:

       autoload='typeset -fu'
       functions='typeset -f'
       history='fc -l'
       integer='typeset -i'
       nohup='nohup '
       r='fc -e -'

     An example concerning trailing blank characters and reserved
     words follows. If the user types:

       $ alias foo="/bin/ls "
       $ alias while="/"
--More--(8%)
     the effect of executing:

       $ while true
       > do
       > echo "Hello, World"
       > done

     is a never-ending sequence of Hello, World  strings  to  the
     screen. However, if the user types:

SunOS 5.10          Last change: 29 Jun 2005                    6

User Commands                                              ksh(1)

       $ foo while

     the result is an ls listing of /. Since the alias  substitu-
     tion  for  foo  ends  in a space character, the next word is
     checked for alias substitution. The next  word,  while,  has
     also been aliased, so it is substituted as well. Since it is
     not in the proper position as a  command  word,  it  is  not
     recognized as a reserved word.

     If the user types:

       $ foo; while

     while retains its normal reserved-word properties.

  Tilde Substitution
     After alias substitution is performed, each word is  checked
     to see if it begins with an unquoted ~. If it does, then the
     word up to a / is checked to see if it matches a user  name.
     If  a  match  is found, the ~ and the matched login name are
     replaced by the login directory of the matched user. This is
     called  a tilde substitution. If no match is found, the ori-
     ginal text is left unchanged. A ~ by itself, or in front  of
     a  /,  is  replaced  by  $HOME.  A ~ followed by a + or - is
     replaced by $PWD and $OLDPWD, respectively.

     In addition, tilde substitution is attempted when the  value
     of a variable assignment begins with a ~.

  Tilde Expansion
     A tilde-prefix consists of an unquoted  tilde  character  at
     the  beginning  of a word, followed by all of the characters
     preceding the first unquoted slash in the word, or  all  the
--More--(9%)     characters  in  the word if there is no slash. In an assign-
     ment, multiple tilde-prefixes can be used: at the  beginning
     of  the  word  (that  is,  following  the  equal sign of the
     assignment), following any unquoted colon or both. A  tilde-
     prefix  in an assignment is terminated by the first unquoted
     colon or slash. If none of  the  characters  in  the  tilde-
     prefix  are  quoted, the characters in the tilde-prefix fol-
     lowing the tilde are treated as a possible login  name  from
     the user database.

SunOS 5.10          Last change: 29 Jun 2005                    7

User Commands                                              ksh(1)

     A portable login name cannot contain characters outside  the
     set  given  in  the  description  of the LOGNAME environment
     variable. If the login name is null  (that  is,  the  tilde-
     prefix   contains  only  the  tilde),  the  tilde-prefix  is
     replaced by the value of the  variable  HOME.   If  HOME  is
     unset,  the  results  are unspecified. Otherwise, the tilde-
     prefix is replaced by a pathname of the home directory asso-
     ciated with the login name obtained using the getpwnam func-
     tion. If the system does not recognize the login  name,  the
     results are undefined.

     Tilde expansion generally occurs only at  the  beginning  of
     words,  but  an  exception  based on historical practice has
     been included:

       PATH=/posix/bin:~dgk/bin

     is eligible for tilde  expansion  because  tilde  follows  a
     colon  and  none  of the relevant characters is quoted. Con-
     sideration was given to prohibiting  this  behavior  because
     any of the following are reasonable substitutes:

       PATH=$(printf %s ~karels/bin : ~bostic/bin)
       for Dir in ~maart/bin ~srb/bin .
       do
           PATH=${PATH:+$PATH:}$Dir
       done

     With the first command, explicit colons are  used  for  each
     directory.  In all cases, the shell performs tilde expansion
     on each directory because all  are  separate  words  to  the
     shell.

     Expressions in operands such as:
--More--(10%)
       make -k mumble LIBDIR=~chet/lib

     do not qualify  as  shell  variable  assignments  and  tilde
     expansion  is  not  performed  (unless  the  command does so
     itself, which make does not).

     The special sequence  $~  has  been  designated  for  future
     implementations  to  evaluate  as  a  means of forcing tilde

SunOS 5.10          Last change: 29 Jun 2005                    8

User Commands                                              ksh(1)

     expansion in any word.

     Because of the requirement that the word not be quoted,  the
     following  are  not  equivalent;  only the last causes tilde
     expansion:

       \~hlj/   ~h\lj/   ~"hlj"/   ~hlj\/   ~hlj/

     The results of giving tilde with an unknown login  name  are
     undefined  because  the  KornShell ~+ and ~- constructs make
     use of this condition, but, in general it  is  an  error  to
     give an incorrect login name with tilde. The results of hav-
     ing HOME  unset  are  unspecified  because  some  historical
     shells treat this as an error.

  Command Substitution
     The standard output from a command enclosed  in  parenthesis
     preceded by a dollar sign (that is, $(command)) or a pair of
     grave accents (``) can be used as part or  all  of  a  word.
     Trailing  new-lines  are  removed.  In  the second (archaic)
     form, the string between the quotes is processed for special
     quoting characters before the command is executed. See Quot-
     ing. The command substitution $(cat file) can be replaced by
     the  equivalent but faster $(<file). Command substitution of
     most special  commands  that  do  not  perform  input/output
     redirection are carried out without creating a separate pro-
     cess.

     Command substitution allows the output of a  command  to  be
     substituted  in  place  of  the command name itself. Command
     substitution occurs when the command is enclosed as follows:

       $(command)

--More--(11%)     or (backquoted version):

       `command`

     The shell expands the command substitution by executing com-
     mand  in  a  subshell  environment and replacing the command
     substitution (the text of command plus the enclosing $()  or

SunOS 5.10          Last change: 29 Jun 2005                    9

User Commands                                              ksh(1)

     backquotes)  with the standard output of the command, remov-
     ing sequences of one or more newline characters at  the  end
     of  the substitution. Embedded newline characters before the
     end of the output is not be removed; however,  they  can  be
     treated  as  field  delimiters  and  eliminated during field
     splitting, depending on the value of IFS and quoting that is
     in effect.

     Within  the  backquoted  style  of   command   substitution,
     backslash shall retain its literal meaning, except when fol-
     lowed by:

       $     `     \

     (dollar-sign, backquote,  backslash).  The  search  for  the
     matching backquote is satisfied by the first backquote found
     without a preceding backslash.  During  this  search,  if  a
     non-escaped backquote is encountered within a shell comment,
     a here-document, an embedded  command  substitution  of  the
     $(command)  form,  or  a  quoted  string,  undefined results
     occur. A single- or double-quoted string  that  begins,  but
     does  not  end, within the `...` sequence produces undefined
     results.

     With the $(command) form, all characters following the  open
     parenthesis  to  the matching closing parenthesis constitute
     the command. Any valid shell script can be used for command,
     except:

         o    A script consisting solely of redirections produces
              unspecified results.

         o    See the restriction on single subshells.

     The results of command substitution are not field  splitting
     and  pathname  expansion  processed for further tilde expan-
--More--(12%)     sion, parameter expansion, command  substitution  or  arith-
     metic  expansion.  If  a  command substitution occurs inside
     double-quotes, it is not be performed on the results of  the
     substitution.

     Command substitution  can  be  nested.  To  specify  nesting
     within  the backquoted version, the application must precede
     the inner backquotes with backslashes; for example:

SunOS 5.10          Last change: 29 Jun 2005                   10

User Commands                                              ksh(1)

       `\`command\``

     The $() form of command substitution  solves  a  problem  of
     inconsistent behavior when using backquotes. For example:

     ____________________________________________________________
    |           Command                        Output           |
    |___________________________________________________________|
    | echo '\$x'                    \$x                         |
    | echo `echo '\$x'`             $x                          |
    | echo $(echo '\$x')            \$x                         |
    |___________________________________________________________|

     Additionally, the backquoted syntax has historical  restric-
     tions on the contents of the embedded command. While the new
     $() form can process any kind of valid embedded script,  the
     backquoted  form  cannot  handle  some  valid  scripts  that
     include  backquotes.  For  example,  these  otherwise  valid
     embedded scripts do not work in the left column, but do work
     on the right:

SunOS 5.10          Last change: 29 Jun 2005                   11

User Commands                                              ksh(1)

     ____________________________________________________________
    | echo `                        echo $(                     |
    | cat <<eeof                    cat <<eeof                  |
    | a here-doc with `             a here-doc with )           |
    | eof                           eof                         |
    | `                             )                           |
    | echo `                        echo $(                     |
    | echo abc # a comment with `   echo abc # a comment with ) |
    | `                             )                           |
    | echo `                        echo $(                     |
--More--(14%)    | echo '`'                      echo ')'                    |
    | `                             )                           |
    |___________________________________________________________|

     Because of  these  inconsistent  behaviors,  the  backquoted
     variety  of  command substitution is not recommended for new
     applications that nest command substitutions or  attempt  to
     embed complex scripts.

     If the command substitution consists of a  single  subshell,
     such as:

       $( (command) )

     a portable application must separate the $( and (  into  two
     tokens  (that  is,  separate them with white space). This is
     required to avoid any ambiguities with arithmetic expansion.

  Arithmetic Expansion
     An arithmetic expression enclosed in double parentheses pre-
     ceded  by  a  dollar  sign ( $((arithmetic-expression)) ) is
     replaced by the value of the  arithmetic  expression  within
     the  double  parenthesis.  Arithmetic  expansion  provides a
     mechanism for evaluating an arithmetic expression  and  sub-
     stituting  its value. The format for arithmetic expansion is
     as follows:

       $((expression))

     The expression is treated as if it  were  in  double-quotes,
     except  that  a  double-quote  inside  the expression is not
     treated specially. The  shell  expands  all  tokens  in  the
     expression for parameter expansion, command substitution and

SunOS 5.10          Last change: 29 Jun 2005                   12

User Commands                                              ksh(1)

     quote removal.

     Next, the shell treats this as an arithmetic expression  and
     substitute  the  value  of  the  expression.  The arithmetic
     expression is processed according to the rules of the ISO  C
     with the following exceptions:

         o    Only integer arithmetic is required.

         o    The sizeof() operator and the prefix and postfix ++
--More--(15%)              and -- operators are not required.

         o    Selection, iteration, and jump statements  are  not
              supported.

         o    /usr/bin/ksh  and  /usr/bin/rksh  treat  prefix   0
              through  9  as decimal constants. See the following
              examples:

                    Command         Result in /bin/ksh   Result in /usr/xpg4/bin
/sh
              echo $((010+10))      20                   18
              echo $((019+10))      29                   error
              [ 10 -le $((011)) ]   true                 false

     As an extension, the shell can recognize arithmetic  expres-
     sions beyond those listed. If the expression is invalid, the
     expansion fails and the shell writes a message  to  standard
     error indicating the failure.

     A simple example using arithmetic expansion:

       # repeat a command 100 times
       x=100
       while [ $x -gt 0 ]
       do
           command
           x=$(($x-1))
       done

  Process Substitution
     This feature is available in SunOS and only on  versions  of
     the UNIX operating system that support the /dev/fd directory
     for naming open files. Each command  argument  of  the  form
     <(list)  or  >(list)  runs  process list asynchronously con-
     nected to some file  in  /dev/fd.  The  name  of  this  file

SunOS 5.10          Last change: 29 Jun 2005                   13

User Commands                                              ksh(1)

     becomes  the  argument to the command. If the form with > is
     selected, then writing on this file provides input for list.
     If  <  is used, then the file passed as an argument contains
     the output of the list process. For example:

       paste <(cut -f1 file1) <(cut -f3 file2) | tee >(process1) >(process2)

--More--(16%)     cuts fields 1 and 3 from the files file1 and file2,  respec-
     tively,  pastes  the  results  together, and sends it to the
     processes process1 and process2, as well as putting it  onto
     the  standard  output. The file, which is passed as an argu-
     ment to the command, is a  UNIX  pipe(2)  so  programs  that
     expect to lseek(2) on the file does not work.

  Parameter Substitution
     A parameter is an identifier, one or more digits, or any  of
     the  characters  *,  @,  #,  ?,  -, $, and !.  A variable (a
     parameter denoted by an identifier) has a value and zero  or
     more attributes. variables can be assigned values and attri-
     butes by using the typeset special command.  The  attributes
     supported  by the shell are described later with the typeset
     special command. Exported variables pass values  and  attri-
     butes to the environment.

     The shell supports a one-dimensional array facility. An ele-
     ment  of  an  array variable is referenced by a subscript. A
     subscript is denoted by  a  [,  followed  by  an  arithmetic
     expression,  followed  by a ]. See Arithmetic Evaluation. To
     assign values to an array, use set -A name  value  ....  The
     value  of  all  subscripts must be in the range of 0 through
     4095. Arrays need not be declared. Any reference to a  vari-
     able with a valid subscript is legal and an array is created
     if necessary. Referencing an array without  a  subscript  is
     equivalent  to  referencing the element 0. If an array iden-
     tifier with subscript * or @ is used,  then  the  value  for
     each  of  the  elements is substituted (separated by a field
     separator character).

     The value of a variable can be assigned by writing:

       name=value [ name=value ] ...

     If the integer attribute, -i, is set for name, the value  is
     subject to arithmetic evaluation.

SunOS 5.10          Last change: 29 Jun 2005                   14

User Commands                                              ksh(1)

     Positional parameters, parameters denoted by a  number,  can
     be  assigned  values with the set special command. Parameter
     $0 is set from argument zero when the shell is  invoked.  If
     parameter  is  one  or  more  digits then it is a positional
     parameter. A positional parameter of  more  than  one  digit
     must be enclosed in braces.
--More--(18%)
  Parameter Expansion
     The format for parameter expansion is as follows:

       ${expression}

     where expression consists of all characters until the match-
     ing  }.  Any  }  escaped  by  a backslash or within a quoted
     string, and characters in  embedded  arithmetic  expansions,
     command substitutions and variable expansions, are not exam-
     ined in determining the matching }.

     The simplest form for parameter expansion is:

       ${parameter}

     The value, if any, of parameter is substituted.

     The parameter name or symbol  can  be  enclosed  in  braces,
     which  are  optional  except  for positional parameters with
     more than one digit or when parameter is followed by a char-
     acter  that  could  be  interpreted as part of the name. The
     matching closing brace are determined by counting brace lev-
     els,  skipping over enclosed quoted strings and command sub-
     stitutions.

     If the parameter name or symbol is not enclosed  in  braces,
     the expansion uses the longest valid name whether or not the
     symbol represented by that name exists. When  the  shell  is
     scanning its input to determine the boundaries of a name, it
     is not bound by its knowledge  of  what  names  are  already
     defined.  For example, if F is a defined shell variable, the
     command:

       echo $Fred

SunOS 5.10          Last change: 29 Jun 2005                   15

User Commands                                              ksh(1)

     does not echo the value of $F followed by  red;  it  selects
     the  longest  possible  valid name, Fred, which in this case
     might be unset.

     If a parameter expansion occurs inside double-quotes:

         o    Pathname expansion  is  not  be  performed  on  the
              results of the expansion.
--More--(19%)
         o    Field splitting is not performed on the results  of
              the expansion, with the exception of @.

     In addition, a parameter expansion can be modified by  using
     one  of  the following formats. In each case that a value of
     word is needed (based on the state of  parameter),  word  is
     subjected  to  tilde expansion, parameter expansion, command
     substitution  and  arithmetic  expansion.  If  word  is  not
     needed,  it  is  not expanded. The } character that delimits
     the following parameter expansion  modifications  is  deter-
     mined as described previously in this section and in dquote.
     (For example, ${foo-bar}xyz} would result in  the  expansion
     of  foo  followed by the string xyz} if foo is set, else the
     string barxyz}).

     ${parameter:-word}       Use Default Values. If parameter is
                              unset  or  null,  the  expansion of
                              word is substituted. Otherwise, the
                              value of parameter is substituted.

     ${parameter:=word}       Assign Default Values. If parameter
                              is  unset or null, the expansion of
                              word is assigned to  parameter.  In
                              all   cases,  the  final  value  of
                              parameter  is  substituted.    Only
                              variables,  not  positional parame-
                              ters or special parameters, can  be
                              assigned in this way.

     ${parameter:?[word]}     Indicate Error if Null or Unset. If
                              parameter  is  unset  or  null, the
                              expansion of  word  (or  a  message
                              indicating  it  is unset if word is
                              omitted)  is  written  to  standard
                              error  and  the  shell exits with a
                              non-zero  exit  status.  Otherwise,
                              the  value  of parameter is substi-
                              tuted. An  interactive  shell  need
                              not exit.

SunOS 5.10          Last change: 29 Jun 2005                   16

User Commands                                              ksh(1)

     ${parameter:+[word]}     Use Alternative Value. If parameter
                              is  unset  or null, null is substi-
                              tuted. Otherwise, the expansion  of
--More--(20%)                              word is substituted.

     In the parameter expansions shown  previously,  use  of  the
     colon  in  the format results in a test for a parameter that
     is unset or null. Omission of the colon results  in  a  test
     for a parameter that is only unset. The following two tables
     summarize the effect of the colon:

                        | parameter set and not null | parameter set and null
     ___________________|____________________________|_______________________
     ${parameter:-word} | substitute parameter       | substitute word
     ___________________|____________________________|_______________________
     ${parameter-word}  | substitute parameter       | substitute null
     ___________________|____________________________|_______________________
     ${parameter:=word} | substitute parameter       | assign word
     ___________________|____________________________|_______________________
     ${parameter=word}  | substitute parameter       | substitute parameter
     ___________________|____________________________|_______________________
     ${parameter:?word} | substitute parameter       | error, exit
     ___________________|____________________________|_______________________
     ${parameter?word}  | substitute parameter       | substitute null
     ___________________|____________________________|_______________________
     ${parameter:+word} | substitute word            | substitute null
     ___________________|____________________________|_______________________
     ${parameter+word}  | substitute word            | substitute word

                                         parameter unset
     __________________________________________________________
     ${parameter:-word}            substitute word
     __________________________________________________________
     ${parameter-word}             substitute word
     __________________________________________________________
     ${parameter:=word}            assign word
     __________________________________________________________
     ${parameter=word}             assign null
     __________________________________________________________
     ${parameter:?word}            error, exit
     __________________________________________________________
     ${parameter?word}             error,exit
     __________________________________________________________
     ${parameter:+word}            substitute null
     __________________________________________________________

SunOS 5.10          Last change: 29 Jun 2005                   17

User Commands                                              ksh(1)

     ${parameter+word}             substitute null
--More--(22%)                                 |
                                 |
                                 |
     In all cases shown  with  "s|ubstitute",  the  expression  is
     replaced  with  the  value  |shown.  In  all cases shown with
     "assign", parameter  is  ass|igned  that  value,  which  also
     replaces the expression.    |
                                 |
     ${#parameter}    String Leng|th. The length in characters  of
                      the  value |of parameter. If parameter is *
                      or @, then |all the  positional  parameters,
                      starting   |with    $1,   are   substituted
                      (separated |by a field separator character).
                                 |
                                 |
                                 |
     The following four varieties|of parameter expansion  provide
     for  substring  processing. |In  each case, pattern matching
     notation (see patmat), rathe|r than regular expression  nota-
     tion, is used to evaluate th|e patterns. If parameter is * or
     @, then all the positional p|arameters, starting with $1, are
     substituted  (separated  by |a  field  separator character).
     Enclosing the full parameter| expansion  string  in  double-
     quotes  does  not cause the |following four varieties of pat-
     tern characters to be  quote|d,  whereas  quoting  characters
     within the braces has this e|ffect.
                                 |
     ${parameter%word}     Remove|Smallest  Suffix  Pattern.  The
                           word i|s expanded to produce a pattern.
                           The pa|rameter expansion  then  results
                           in  pa|rameter,  with the smallest por-
                           tion o|f the suffix matched by the pat-
                           tern d|eleted.
                                 |
                                 |
     ${parameter%%word}    Remove  Largest  Suffix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in parameter, with the largest portion
                           of the suffix matched by  the  pattern
                           deleted.

     ${parameter#word}     Remove Smallest  Prefix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in  parameter,  with the smallest por-
                           tion of the prefix matched by the pat-
                           tern deleted.
--More--(24%)
SunOS 5.10          Last change: 29 Jun 2005                   18

User Commands                                              ksh(1)

     ${parameter##word}    Remove  Largest  Prefix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in parameter, with the largest portion
                           of the prefix matched by  the  pattern
                           deleted.

     Examples:

     ${parameter:-word}

     In this example, ls is executed only if x is null or  unset.
     (The  $(ls)  command  substitution  notation is explained in
     Command Substitution above.)

       ${x:-$(ls)}

     ${parameter:=word}

       unset X
       echo ${X:=abc}
       abc

     ${parameter:?word}

       unset posix
       echo ${posix:?}
       sh: posix: parameter null or not set

     ${parameter:+word}

       set a b c
       echo ${3:+posix}
       posix

     ${#parameter}

       HOME=/usr/posix
       echo ${#HOME}
       10

SunOS 5.10          Last change: 29 Jun 2005                   19

--More--(25%)User Commands                                              ksh(1)

     ${parameter%word}

       x=file.c
       echo ${x%.c}.o
       file.o

     ${parameter%%word}

       x=posix/src/std
       echo ${x%%/*}
       posix

     ${parameter#word}

       x=$HOME/src/cmd
       echo ${x#$HOME}
       /src/cmd

     ${parameter##word}

       x=/one/two/three
       echo ${x##*/}
       three

  Parameters Set by Shell
     The following parameters are automatically set by the shell:

     #          The number of positional parameters in decimal.

     -          Flags supplied to the shell on invocation  or  by
                the set command.

     ?          The decimal value returned by the  last  executed
                command.

     $          The process number of this shell.

     _          Initially, the value of _ is an absolute pathname
                of  the  shell or script being executed as passed
                in the environment. Subsequently it  is  assigned
                the  last  argument of the previous command. This

SunOS 5.10          Last change: 29 Jun 2005                   20

User Commands                                              ksh(1)

--More--(26%)                parameter is not set for commands which are asyn-
                chronous. This parameter is also used to hold the
                name of the matching MAIL file when checking  for
                mail.

     !          The process number of the last background command
                invoked.

     ERRNO      The value of errno as set by  the  most  recently
                failed  system  call. This value is system depen-
                dent and is intended for debugging purposes.

     LINENO     The line number of the current  line  within  the
                script or function being executed.

     OLDPWD     The previous working directory set by the cd com-
                mand.

     OPTARG     The value of the last option  argument  processed
                by the getopts special command.

     OPTIND     The index of the last option  argument  processed
                by the getopts special command.

     PPID       The process number of the parent of the shell.

     PWD        The present working directory set by the cd  com-
                mand.

     RANDOM     Each time this variable is referenced,  a  random
                integer,  uniformly  distributed  between  0  and
                32767,  is  generated.  The  sequence  of  random
                numbers can be initialized by assigning a numeric
                value to RANDOM.

     REPLY      This variable is set by the select statement  and
                by the read special command when no arguments are
                supplied.

     SECONDS    Each time this variable is referenced, the number
                of seconds since shell invocation is returned. If

SunOS 5.10          Last change: 29 Jun 2005                   21

User Commands                                              ksh(1)

                this variable is assigned a value, then the value
                returned  upon  reference  is  the value that was
--More--(27%)                assigned plus the number  of  seconds  since  the
                assignment.

  Variables Used by Shell
     The following variables are used by the shell:

     CDPATH         The search path for the cd command.

     COLUMNS        If this variable is set, the value is used to
                    define  the  width of the edit window for the
                    shell edit  modes  and  for  printing  select
                    lists.

     EDITOR         If the value of this variable ends in  emacs,
                    gmacs,  or  vi and the VISUAL variable is not
                    set, then the corresponding option is  turned
                    on. See the set special command.

     ENV            This variable, when and only when an interac-
                    tive shell is invoked, is subjected to param-
                    eter expansion by the shell and the resulting
                    value  is  used  as a pathname of a file con-
                    taining shell commands   to  execute  in  the
                    current  environment.  The  file  need not be
                    executable. If the expanded value of  ENV  is
                    not  an  absolute  pathname,  the results are
                    unspecified. ENV is  ignored  if  the  user's
                    real  and  effective  user  IDs  or  real and
                    effective group IDs are different.

                    This variable can be used to set aliases  and
                    other  items  local  to  the  invocation of a
                    shell. The file referred to  by  ENV  differs
                    from $HOME/.profile in that .profile is typi-
                    cally executed at  session  startup,  whereas
                    the  ENV file is executed at the beginning of
                    each  shell  invocation.  The  ENV  value  is
                    interpreted  in  a  manner  similar  to a dot
                    script, in that the commands are executed  in
                    the current environment and the file needs to
                    be readable,  but  not  executable.  However,
                    unlike dot scripts, no PATH searching is per-
                    formed. This is used as a guard against  Tro-
                    jan Horse security breaches.

SunOS 5.10          Last change: 29 Jun 2005                   22

User Commands                                              ksh(1)
--More--(28%)
     FCEDIT         The default editor name for the fc command.

     FPATH          The search path for function definitions.  By
                    default,  the  FPATH directories are searched
                    after the PATH  variable.  If  an  executable
                    file  is  found, then it is read and executed
                    in the current environment. FPATH is searched
                    before  PATH  when  a  function  with  the -u
                    attribute is  referenced.  The  preset  alias
                    autoload causes a function with the -u attri-
                    bute to be created.

     HISTFILE       If this variable is set  when  the  shell  is
                    invoked,  then  the  value is the pathname of
                    the file that is used to  store  the  command
                    history. See Command re-entry.

     HISTSIZE       If this variable is set  when  the  shell  is
                    invoked,   then   the  number  of  previously
                    entered commands that are accessible by  this
                    shell  is  greater  than  or  equal  to  this
                    number. The default is 128.

     HOME           The default argument (home directory) for the
                    cd command.

     IFS            Internal field  separators,  normally  space,
                    tab,  and  new-line that are used to separate
                    command words which result  from  command  or
                    parameter  substitution  and  for  separating
                    words with the  special  command  read.   The
                    first  character  of the IFS variable is used
                    to separate arguments for  the  $*  substitu-
                    tion. See Quoting.

     LANG           Provide a default value for the  internation-
                    alization  variables  that are unset or null.
                    If any of the internationalization  variables
                    contains  an  invalid  setting,  the  utility
                    behaves as if none of the variables had  been
                    defined.

     LC_ALL         This variable provides a  default  value  for
                    the LC_* variables.

SunOS 5.10          Last change: 29 Jun 2005                   23

--More--(30%)User Commands                                              ksh(1)

     LC_COLLATE     This  variable  determines  the  behavior  of
                    range  expressions,  equivalence  classes and
                    multi-byte   character   collating   elements
                    within pattern matching.

     LC_CTYPE       Determines how the shell handles  characters.
                    When  LC_CTYPE  is  set to a valid value, the
                    shell  can  display  and  handle   text   and
                    filenames  containing  valid  characters  for
                    that locale. If LC_CTYPE (see environ(5))  is
                    not  set  in the environment, the operational
                    behavior of the shell is  determined  by  the
                    value  of  the  LANG environment variable. If
                    LC_ALL is set, its contents are used to over-
                    ride  both  the LANG and the other LC_* vari-
                    ables.

     LC_MESSAGES    This  variable  determines  the  language  in
                    which messages should be written.

     LINENO         This variable  is  set  by  the  shell  to  a
                    decimal   number   representing  the  current
                    sequential  line  number  (numbered  starting
                    with 1) within a script or function before it
                    executes each command. If the user unsets  or
                    resets LINENO, the variable can lose its spe-
                    cial meaning for the life of  the  shell.  If
                    the shell is not currently executing a script
                    or function, the value of LINENO is  unspeci-
                    fied.

     LINES          If this variable is set, the value is used to
                    determine  the  column  length  for  printing
                    select lists. Select lists  print  vertically
                    until  about  two-thirds  of  LINES lines are
                    filled.

     MAIL           If this variable is set to the name of a mail
                    file  and  the  MAILPATH variable is not set,
                    then the shell informs the user of arrival of
                    mail in the specified file.

     MAILCHECK      This  variable  specifies   how   often   (in
                    seconds)  the shell checks for changes in the
                    modification time of any of the files  speci-
                    fied  by  the MAILPATH or MAIL variables. The
--More--(31%)
SunOS 5.10          Last change: 29 Jun 2005                   24

User Commands                                              ksh(1)

                    default value is 600 seconds. When  the  time
                    has  elapsed  the shell checks before issuing
                    the next prompt.

     MAILPATH       A colon (:) separated list of file names.  If
                    this  variable is set, then the shell informs
                    the user of any modifications to  the  speci-
                    fied files that have occurred within the last
                    MAILCHECK seconds. Each file name can be fol-
                    lowed  by  a ? and a message that is printed.
                    The message undergoes parameter  substitution
                    with  the  variable $_ defined as the name of
                    the file that has changed. The  default  mes-
                    sage is you have mail in $_.

     NLSPATH        Determine the location of message  catalogues
                    for the processing of LC_MESSAGES.

     PATH           The search path for commands. See  Execution.
                    The  user  cannot  change  PATH  if executing
                    under rksh (except in .profile).

     PPID           This variable is set  by  the  shell  to  the
                    decimal   process  ID  of  the  process  that
                    invoked the shell. In a subshell, PPID is set
                    to  the  same  value as that of the parent of
                    the current shell. For  example,  echo  $PPID
                    and  (echo  $PPID)  would  produce  the  same
                    value.

     PS1            The value of this variable  is  expanded  for
                    parameter  substitution to define the primary
                    prompt string which by default is ``$ ''. The
                    character  !  in the primary prompt string is
                    replaced by the command number.  See  Command
                    Re-entry.  Two  successive  occurrences  of !
                    produces a single ! when the prompt string is
                    printed.

     PS2            Secondary prompt string, by default ``> ''.

     PS3            Selection prompt string used within a  select
                    loop, by default ``#? ''.
--More--(32%)
SunOS 5.10          Last change: 29 Jun 2005                   25

User Commands                                              ksh(1)

     PS4            The value of this variable  is  expanded  for
                    parameter substitution and precedes each line
                    of an execution trace. If omitted, the execu-
                    tion trace prompt is ``+ ''.

     PWD            Set by the shell to be an  absolute  pathname
                    of  the current working directory, containing
                    no components of type symbolic link, no  com-
                    ponents  that are dot, and no components that
                    are dot-dot when the shell is initialized. If
                    an  application  sets  or unsets the value of
                    PWD, the behaviors of the cd and  pwd  utili-
                    ties are unspecified

     SHELL          The pathname of the  shell  is  kept  in  the
                    environment.  At  invocation, if the basename
                    of this variable is rsh, rksh, or krsh,  then
                    the shell becomes restricted.

     TMOUT          If set to a  value  greater  than  zero,  the
                    shell  terminates if a command is not entered
                    within the prescribed number of seconds after
                    issuing the PS1 prompt. The shell can be com-
                    piled with a maximum  bound  for  this  value
                    which cannot be exceeded.

     VISUAL         If the value of this variable ends in  emacs,
                    gmacs,  or  vi, then the corresponding option
                    is turned on. See Special Command set.

     The shell gives default values to PATH, PS1, PS2, PS3,  PS4,
     MAILCHECK,  FCEDIT,  TMOUT, and IFS, while HOME, SHELL, ENV,
     and MAIL are not set at all by the shell (although  HOME  is
     set  by  login(1)).  On some systems MAIL and SHELL are also
     set by login.

  Blank Interpretation
     After parameter and command  substitution,  the  results  of
     substitutions are scanned for the field separator characters
     (those found in IFS) and split into distinct arguments where
     such characters are found. Explicit null arguments ( "" ) or
     ('') are retained. Implicit null arguments (those  resulting
     from parameters that have no values) are removed.
--More--(34%)
  File Name Generation

SunOS 5.10          Last change: 29 Jun 2005                   26

User Commands                                              ksh(1)

     Following substitution, each command word is scanned for the
     characters *, ?, and [ unless the -f option has been set. If
     one of these characters appears, the word is regarded  as  a
     pattern.  The word is replaced with lexicographically sorted
     file names that match the pattern. If no file name is  found
     that matches the pattern, the word is left unchanged. When a
     pattern is used for  file  name  generation,  the  character
     period  (.)  at the start of a file name or immediately fol-
     lowing a /, as well as  the  character  /  itself,  must  be
     matched  explicitly.  A file name beginning with a period is
     not  matched  with  a  pattern  with   the   period   inside
     parentheses.  That  is,  ls .@(r*) would locate a file named
     .restore, but ls @(.r*) would not.  In  other  instances  of
     pattern matching, the / and . are not treated specially.

     *        Matches any string, including the null string.

     ?        Matches any single character.

     [...]    Matches any one of the enclosed characters. A  pair
              of  characters separated by - matches any character
              lexically between the pair, inclusive. If the first
              character following the opening "[" is a "! ", then
              any character not enclosed is matched. A -  can  be
              included  in the character set by putting it as the
              first or last character.

     A pattern-list is a list of one or more  patterns  separated
     from  each  other with a |. Composite patterns can be formed
     with one or more of the following:

     ?(pattern-list)    Optionally matches any one of  the  given
                        patterns.

     *(pattern-list)    Matches zero or more occurrences  of  the
                        given patterns.

     +(pattern-list)    Matches one or more  occurrences  of  the
                        given patterns.

     @(pattern-list)    Matches exactly one  of  the  given  pat-
--More--(35%)                        terns.

SunOS 5.10          Last change: 29 Jun 2005                   27

User Commands                                              ksh(1)

     !(pattern-list)    Matches anything, except one of the given
                        patterns.

  Quoting
     Each of the metacharacters listed  above  (see  Definitions)
     has a special meaning to the shell and causes termination of
     a word unless quoted. A character can be  quoted  (that  is,
     made to stand for itself) by preceding it with a \. The pair
     \NEWLINE is removed. All characters enclosed between a  pair
     of  single quote marks (' ') are quoted. A single quote can-
     not appear within single quotes. Inside double  quote  marks
     (""),  parameter and command substitution occur and \ quotes
     the characters \, `, ", and $. The meaning of $* and  $@  is
     identical  when  not  quoted  or  when  used  as a parameter
     assignment value or as a file name. However, when used as  a
     command argument, $* is equivalent to ``$1d$2d...'', where d
     is the first character of the IFS variable,  whereas  $@  is
     equivalent  to  $1  $2 .... Inside grave quote marks (``), \
     quotes the characters \, ', and $. If the grave quotes occur
     within double quotes, then \ also quotes the character ".

     The special meaning of reserved  words  or  aliases  can  be
     removed  by  quoting any character of the reserved word. The
     recognition of  function  names  or  special  command  names
     listed cannot be altered by quoting them.

  Arithmetic Evaluation
     An ability to perform integer arithmetic  is  provided  with
     the  special  command  let.  Evaluations are performed using
     long arithmetic. Constants are of the form [ base# ] n where
     base   is  a  decimal  number  between  two  and  thirty-six
     representing the arithmetic base and n is a number  in  that
     base. If base is omitted then base 10 is used.

     An arithmetic expression uses the same  syntax,  precedence,
     and  associativity  of expression as the C language. All the
     integral operators, other than ++, -;, ?:, and  ,  are  sup-
     ported. Variables can be referenced by name within an arith-
     metic expression without using  the  parameter  substitution
     syntax.   When  a  variable  is  referenced,  its  value  is
     evaluated as an arithmetic expression.

--More--(37%)     An internal integer representation  of  a  variable  can  be
     specified with the -i option of the typeset special command.
     Arithmetic evaluation is performed  on  the  value  of  each
     assignment  to  a variable with the -i attribute.  If you do
     not specify an arithmetic base, the first assignment to  the
     variable  determines  the arithmetic base. This base is used

SunOS 5.10          Last change: 29 Jun 2005                   28

User Commands                                              ksh(1)

     when parameter substitution occurs.

     Since many of the arithmetic operators require  quoting,  an
     alternative  form  of  the  let command is provided. For any
     command which begins with a ((, all the characters  until  a
     matching  ))  are  treated as a quoted expression. More pre-
     cisely, ((...)) is equivalent to let "...".

  Prompting
     When used interactively, the shell prompts with the  parame-
     ter  expanded  value  of PS1 before reading a command. If at
     any time a new-line is typed and further input is needed  to
     complete  a command, then the secondary prompt (that is, the
     value of PS2) is issued.

  Conditional Expressions
     A conditional expression is used with the [[  compound  com-
     mand  to  test  attributes  of files and to compare strings.
     Word splitting and file name generation are not performed on
     the  words  between  [[ and ]].  Each expression can be con-
     structed from one or more of the following unary  or  binary
     expressions:

     -a file              True, if file exists.

     -b file              True, if file exists  and  is  a  block
                          special file.

     -c file              True, if file exists and is a character
                          special file.

     -d file              True, if file exists and  is  a  direc-
                          tory.

     -e file              True, if file exists.

     -f file              True, if file exists and is an ordinary
--More--(38%)                          file.

     -g file              True, if file exists and has its setgid
                          bit set.

     -h file              True, if file exists and is a  symbolic
                          link.

SunOS 5.10          Last change: 29 Jun 2005                   29

User Commands                                              ksh(1)

     -k file              True, if file exists and has its sticky
                          bit set.

     -n string            True, if length of string is non-zero.

     -o option            True, if option named option is on.

     -p file              True, if file exists and is a fifo spe-
                          cial file or a pipe.

     -r file              True, if file exists and is readable by
                          current process.

     -s file              True,  if  file  exists  and  has  size
                          greater than zero.

     -t fildes            True, if file descriptor number  fildes
                          is  open and associated with a terminal
                          device.

     -u file              True, if file exists and has its setuid
                          bit set.

     -w file              True, if file exists and is writable by
                          current process.

     -x file              True, if file exists and is  executable
                          by  current process. If file exists and
                          is a directory, then the  current  pro-
                          cess  has  permission  to search in the
                          directory.

     -z string            True, if length of string is zero.

     -L file              True, if file exists and is a  symbolic
                          link.
--More--(39%)
     -O file              True, if file exists and  is  owned  by
                          the effective user id of this process.

SunOS 5.10          Last change: 29 Jun 2005                   30

User Commands                                              ksh(1)

     -G file              True, if  file  exists  and  its  group
                          matches  the effective group id of this
                          process.

     -S file              True, if file exists and is a socket.

     file1 -nt file2      True, if file1 exists and is newer than
                          file2.

     file1 -ot file2      True, if file1 exists and is older than
                          file2.

     file1 -ef file2      True, if  file1  and  file2  exist  and
                          refer to the same file.

     string               True if the string string  is  not  the
                          null string.

     string = pattern     True, if string matches pattern.

     string != pattern    True, if string does not match pattern.

     string1 < string2    True, if string1 comes  before  string2
                          based   on   strings   interpreted   as
                          appropriate to the locale  setting  for
                          category LC_COLLATE.

     string1 > string2    True, if string1  comes  after  string2
                          based   on   strings   interpreted   as
                          appropriate to the locale  setting  for
                          category LC_COLLATE.

     exp1 -eq exp2        True, if exp1 is equal to exp2.

     exp1 -ne exp2        True, if exp1 is not equal to exp2.

     exp1 -lt exp2        True, if exp1 is less than exp2.

SunOS 5.10          Last change: 29 Jun 2005                   31

--More--(40%)User Commands                                              ksh(1)

     exp1 -gt exp2        True, if exp1 is greater than exp2.

     exp1 -le exp2        True, if exp1 is less than or equal  to
                          exp2.

     exp1 -ge exp2        True, if exp1 is greater than or  equal
                          to exp2.

     In each of the above expressions, if file  is  of  the  form
     /dev/fd/n,  where  n is an integer, then the test is applied
     to the open file whose descriptor number is n.

     A compound expression can be constructed from  these  primi-
     tives  by  using  any of the following, listed in decreasing
     order of precedence.

     (expression)                  True, if expression  is  true.
                                   Used to group expressions.

     ! expression                  True if expression is false.

     expression1 && expression2    True,   if   expression1   and
                                   expression2 are both true.

     expression1 || expression2    True, if either expression1 or
                                   expression2 is true.

  Input/Output
     Before a command is executed, its input and  output  can  be
     redirected  using  a  special  notation  interpreted  by the
     shell. The following can appear anywhere in a simple-command
     or  can precede or follow a command and are not passed on to
     the invoked  command.  Command  and  parameter  substitution
     occur  before  word  or  digit is used except as noted. File
     name generation occurs only if the pattern matches a  single
     file, and blank interpretation is not performed.

     <word         Use file word as standard input (file descrip-
                   tor 0).

     >word         Use  file  word  as  standard   output   (file
                   descriptor 1). If the file does not exist then

SunOS 5.10          Last change: 29 Jun 2005                   32

User Commands                                              ksh(1)
--More--(42%)
                   it is created. If the  file  exists,  and  the
                   noclobber  option is on, this causes an error;
                   otherwise, it is truncated to zero length.

     >|word        Sames as  >,  except  that  it  overrides  the
                   noclobber option.

     >>word        Use file word as standard output. If the  file
                   exists,  output  is  appended  to it (by first
                   seeking to the EOF). Otherwise,  the  file  is
                   created.

     <>word        Open file word  for  reading  and  writing  as
                   standard input.

     << [-]word    The shell input is read up to a line  that  is
                   the  same  as word, or to an EOF. No parameter
                   substitution, command  substitution,  or  file
                   name  generation  is  performed  on  word. The
                   resulting document,  called  a  here-document,
                   becomes  the  standard input. If any character
                   of word is quoted, no interpretation is placed
                   upon  the  characters  of the document. Other-
                   wise,  parameter  and   command   substitution
                   occur, \NEWLINE is ignored, and \ must be used
                   to quote the characters \, $, `, and the first
                   character  of  word.  If  - is appended to <<,
                   then all leading tabs are stripped  from  word
                   and from the document.

     <&digit       The standard input  is  duplicated  from  file
                   descriptor  digit  (see dup(2)). Similarly for
                   the standard output using >&digit.

     <&-           The standard input is  closed.  Similarly  for
                   the standard output using >&-.

     <&p           The input from  the  co-process  is  moved  to
                   standard input.

     >&p           The output to the co-process is moved to stan-
                   dard output.

SunOS 5.10          Last change: 29 Jun 2005                   33

User Commands                                              ksh(1)

--More--(43%)     If one of the above is preceded by a digit,  then  the  file
     descriptor number referred to is that specified by the digit
     (instead of the default 0 or 1). For example:

       ... 2>&1

     means file descriptor 2 is to be opened  for  writing  as  a
     duplicate of file descriptor 1.

     The order in which redirections are  specified  is  signifi-
     cant.  The  shell evaluates each redirection in terms of the
     (file descriptor, file) association at the time  of  evalua-
     tion. For example:

       ... 1>fname 2>&1

     first associates file descriptor 1 with file fname. It  then
     associates  file  descriptor 2 with the file associated with
     file descriptor 1 (that is, fname). If the order of redirec-
     tions  were  reversed, file descriptor 2 would be associated
     with the terminal (assuming file descriptor 1 had been)  and
     then file descriptor 1 would be associated with file fname.

     If a command is followed by & and job control is not active,
     then the default standard input for the command is the empty
     file /dev/null. Otherwise, the environment for the execution
     of  a  command contains the file descriptors of the invoking
     shell as modified by input/output specifications.

  Environment
     The environment (see environ(5)) is  a  list  of  name-value
     pairs  that is passed to an executed program in the same way
     as a normal argument list. The names must be identifiers and
     the  values  are character strings. The shell interacts with
     the environment in several ways. On  invocation,  the  shell
     scans  the  environment and creates a variable for each name
     found, giving it the  corresponding  value  and  marking  it
     export.  Executed  commands  inherit the environment. If the
     user modifies the values of these variables or  creates  new
     ones,  using  the export or typeset -x commands, they become
     part of the environment. The environment seen  by  any  exe-
     cuted  command is thus composed of any name-value pairs ori-
     ginally inherited by the shell, whose values can be modified
     by the current shell, plus any additions which must be noted

SunOS 5.10          Last change: 29 Jun 2005                   34

User Commands                                              ksh(1)
--More--(45%)
     in export or typeset -x commands.

     The environment for any simple-command or  function  can  be
     augmented  by prefixing it with one or more variable assign-
     ments. A variable assignment argument is a word of the  form
     identifier=value. Thus:

       TERM=450 cmd args

     and

       (export TERM; TERM=450; cmd args)

     are equivalent (as far as the above execution of cmd is con-
     cerned, except for special commands listed that are preceded
     with an asterisk).

     If the -k flag is set, all variable assignment arguments are
     placed in the environment, even if they occur after the com-
     mand name. The following first prints a=b c and then c:

       echo a=b c
       set -k echo
       a=b c

     This feature is intended for use with  scripts  written  for
     early  versions  of  the shell and its use in new scripts is
     strongly discouraged. It is likely to disappear someday.

  Functions
     The function reserved word, described in the  Commands  sec-
     tion  above,  is used to define shell functions. Shell func-
     tions are read in and stored  internally.  Alias  names  are
     resolved  when  the function is read. Functions are executed
     like commands with the arguments passed as positional param-
     eters. See Execution.

     Functions execute in the same  process  as  the  caller  and
     share  all  files  and  present  working  directory with the
     caller. Traps caught  by  the  caller  are  reset  to  their

SunOS 5.10          Last change: 29 Jun 2005                   35

User Commands                                              ksh(1)

     default action inside the function. A trap condition that is
     not caught or ignored by the function causes the function to
--More--(46%)/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    if [ $BASE == "E" ]then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_1/200212/icdb
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_2/200505/extfh.cfg
#    EXTFH=/san_ata_2/200504/extfh.cfg
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../\[.*]



"sh-PE-Ripley" line 46 of 737 --6%-- 



:v//d[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACTif [ $TIPO_PROC == "H" ]
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    while [ $parmsOK == "0" ]
if [ $BASE == "E" ]
if [ $TIPO_PROC == "H" ]
while [ $continuar == "_" ]if [ -z $continuar ]
if [ $continuar == "1" ]
    if [ $BASE == "E" ]
    if [ $TIPO_PROC == "H" ]
if [ -z "$sanata" ]
    if [ $BASE = "I" ]
    [ -s $archivo.log ] && rm $archivo.log
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    [ $cancelado == "1" ] && exit
    if [ ! -s $archivo_val ]
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
664 fewer lines    while [ $loopEnd == "0" ]if [ -z $BASEnew ][ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [ $BASEnew == "E" ] || [ $BASEnew == "I" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $NOM_ARCHIVOnew ]
elif [ -d $NOM_ARCHIVOnew ][ $doCuu == "1" ] &&  tput cuu 8
elif [ ! -f $NOM_ARCHIVOnew ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_ARCHIVOnew ]
elif [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_EXTRACTnew ][ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ][ $doCuu == "1" ] &&  tput cuu 8
    if [ $TIPO_EXTRACT == "N" ]
    while [ $loopEnd == "0" ]
if [ -z $ID_EXTRACTnew ] # acepta el valor actual
elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números[ $doCuu == "1" ] &&  tput cuu 8
elif [ ${#ID_EXTRACTnew} -ne inputLen ] # control de longitud (11 o 6)[ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_PROCnew ][ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $FECHA_INICIOnew ]
elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números[ $doCuu == "1" ] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"[ $doCuu == "1" ] &&  tput cuu 8if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ][ $doCuu == "1" ] &&  tput cuu 8
    [ ! -f $0.parm ] && touch $0.parm
    if [ $BASE == "E" ]
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT"sh-PE-Ripley" [Modified] line 1 of 73 --1%-- "

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [ -z $BASEnew ]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]then
BASE=$BASEnew
664 more lines# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../



:s/[][]/**[ 



:s/[][]/**/g**[]



:v//d[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACTif [ $TIPO_PROC == "H" ]
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    while [ $parmsOK == "0" ]
if [ $BASE == "E" ]
if [ $TIPO_PROC == "H" ]
while [ $continuar == "_" ]if [ -z $continuar ]
if [ $continuar == "1" ]
    if [ $BASE == "E" ]
    if [ $TIPO_PROC == "H" ]
if [ -z "$sanata" ]
    if [ $BASE = "I" ]
    [ -s $archivo.log ] && rm $archivo.log
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    [ $cancelado == "1" ] && exit
    if [ ! -s $archivo_val ]
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
664 fewer lines    while [ $loopEnd == "0" ]if [ -z $BASEnew ][ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [ $BASEnew == "E" ] || [ $BASEnew == "I" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $NOM_ARCHIVOnew ]
elif [ -d $NOM_ARCHIVOnew ][ $doCuu == "1" ] &&  tput cuu 8
elif [ ! -f $NOM_ARCHIVOnew ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_ARCHIVOnew ]
elif [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_EXTRACTnew ][ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ][ $doCuu == "1" ] &&  tput cuu 8
    if [ $TIPO_EXTRACT == "N" ]
    while [ $loopEnd == "0" ]
if [ -z $ID_EXTRACTnew ] # acepta el valor actual
elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números[ $doCuu == "1" ] &&  tput cuu 8
elif [ ${#ID_EXTRACTnew} -ne inputLen ] # control de longitud (11 o 6)[ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $TIPO_PROCnew ][ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ][ $doCuu == "1" ] &&  tput cuu 8
    while [ $loopEnd == "0" ]
if [ -z $FECHA_INICIOnew ]
elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números[ $doCuu == "1" ] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"[ $doCuu == "1" ] &&  tput cuu 8if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ][ $doCuu == "1" ] &&  tput cuu 8
    [ ! -f $0.parm ] && touch $0.parm
    if [ $BASE == "E" ]
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACTif [ $TIPO_PROC == "H" ]
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    while [ $parmsOK == "0" ]
if [ $BASE == "E" ]
if [ $TIPO_PROC == "H" ]
while [ $continuar == "_" ]if [ -z $continuar ]
if [ $continuar == "1" ]
    if [ $BASE == "E" ]
    if [ $TIPO_PROC == "H" ]
if [ -z "$sanata" ]
    if [ $BASE = "I" ]
    [ -s $archivo.log ] && rm $archivo.log
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    [ $cancelado == "1" ] && exit
    if [ ! -s $archivo_val ]
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [ -z $BASEnew ]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]then
BASE=$BASEnew
664 more lines/ \[ [^\]]*]# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../



/echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [ -z $BASEnew ]
/then
# aceptó el valor actual
loopEnd="1"
else
# convierte a mayúsculas
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"
if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
/    echo $rayaexit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~?    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"?????    if [ $BASE = "I" ]?    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_1/200212/icdb
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_2/200505/extfh.cfg
#    EXTFH=/san_ata_2/200504/extfh.cfg
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi??NOM_ARCHIVO=$archivoarchivo="PERipley"$FECHA_PROC# $$$$ se puede controlar si ya existe un archivo de hoy ...# $$$$ se puede agregar un $$ al file name ...# $$$$ no será posible ejecutar dos procesos en el mismo día# un nombre armado con "PERipley" y la fecha del día    elsearchivo=$NOM_ARCHIVO# el nombre del archivo provisto, existente    then    if [ $BASE == "E" ]?# guarda en archivo .parmparamsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done
}




#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"???sleep 2paramsPrint # $$$$ DEBUGfiFECHA_INICIO=$FECHA_PROCelsereadFECHA_INICIO# fecha desdethenif [ $TIPO_PROC == "H" ]?readTIPO_PROC# A actual, H históricofireadID_EXTRACT# NIT o cos subsreadTIPO_EXTRACT# N NIT, C cod subselsereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45readNOM_ARCHIVO# nombre del archivo basethenif [ $BASE == "E" ]?readBASE# I interna, C cliente    do    while [ $parmsOK == "0" ]?#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosIn
c " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else???ejecutar_validacion() {}    TIPO_ARCHIVO="1"  # es un archivo 1-11    echo "Registros extraídos: "$cantRegsExtraidos    cantRegsExtraidos=$(wc -l < $archivo_prn)    # cuenta los registros extraídos    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn    [ -s $archivo_prn ] && rm $archivo_prn   ?    # echo "regex:"$grepRegex    grepRegex="^A......[14].*"$ID_EXTRACT".P$"    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY    # $$$$ NIT para pruebas: 00900047981    # extrae tipo y número de id por NIT del suscriptor, elimina repeticiones    fiICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'# echo "Máquina de producción:" $P_MAQUINA    elseICMCRECOPY='/despeciales/ICMCRECOPY.DAT'echo "Máquina de desarrollo:" $P_MAQUINA    then    if [ $P_MAQUINA == $P_SERVER_DEV ]/??    P_MAQUINA=$(hostname)    # el directorio del archivo cambia según el ambiente#***********************************************************************# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn#***********************************************************************ejecutar_extraccion() {}    fiecho "${s}actual"    elseecho "${s}histórico, desde: "$FECHA_INICIO    then    if [ $TIPO_PROC == "H" ]?    print -n "${i}Tipo de proceso: "$TIPO_PROC    fi[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT?[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT?print -n "${i}Criterio de extracción: "$TIPO_EXTRACTecho "${s}extraída de datos internos"    else[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"?[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"?print -n "${i}Estructura: "$TIPO_ARCHIVOecho "${s}provista por el cliente"    then    if [ $BASE == "E" ]?if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}??FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)# debe ser anterior al mes actualelse[ $doCuu == "1" ] &&  tput cuu 8tput belecho "la fecha es inválida, anterior a 2000 o posterior a 2029"then# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]][ $doCuu == "1" ] && tput cuu 8?tput belecho "la fecha solamente puede contener dígitos"thenelif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo númerosloopEnd="1"# aceptó el valor actualthenif [ -z $FECHA_INICIOnew ]?read FECHA_INICIOnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$FECHA_INICIOrotulo="FECHA INICIO de PROCESO AAAAMMDD:"echo " "echo "enter="$FECHA_INICIOecho "Ingrese fecha inicial de proceso,"echo $rayaecho "FECHA INICIAL DE PROCESO HISTÓRICO"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?    loopEnd="0"#*******************************************************************************# Fecha de proceso, cuando tipo de extracción es "H"#*******************************************************************************readFECHA_INICIO() {    }    donefifi[ $doCuu == "1" ] &&  tput cuu 8tput belelseloopEnd="1"TIPO_PROC=$TIPO_PROCnewthenif [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]??[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"# traduce minúsculaselseloopEnd="1"# aceptó el valor por defectothenif [ -z $TIPO_PROCnew ]?read TIPO_PROCnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$TIPO_PROCrotulo="TIPO de PROCESO:"echo " "echo "enter="$TIPO_PROCecho "H) Proceso histórico"echo "A) Proceso actual"echo $rayaecho "TIPO DE PROCESO"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?    loopEnd="0"#*******************************************************************************# Tipo de proceso, "A" por Actual, "H" por Histórico#*******************************************************************************readTIPO_PROC() {}    donefiloopEnd="1"ID_EXTRACT=$ID_EXTRACTnewelse # todo OK[ $doCuu == "1" ] &&  tput cuu 8tput belecho 'longitud incorrecta (debe ser '$inputlen' dígitos)'thenelif [ ${#ID_EXTRACTnew} -ne inputLen ] # control de longitud (11 o 6)?[ $doCuu == "1" ] &&  tput cuu 8/??tput belecho "el dato ingresado debe ser numérico"thenelif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo númerosloopEnd="1"thenif [ -z $ID_EXTRACTnew ] # acepta el valor actual?tput el # borra mensaje de errorread ID_EXTRACTnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$ID_EXTRACTrotulo="$criterioExtraccion:"tput el # borra caracteres sobrantesecho " "echo "enter="$ID_EXTRACTecho "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"echo $rayaecho "$criterioExtraccion PARA LA EXTRACCIÓN"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?    loopEnd="0"    fiinputLen=6criterioExtraccion="COD SUSCRIPTOR"    elseinputLen=11criterioExtraccion="NIT"    then    if [ $TIPO_EXTRACT == "N" ]?#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR#*******************************************************************************# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor#*******************************************************************************readID_EXTRACT() {}    donefifi[ $doCuu == "1" ] &&  tput cuu 8tput belelseloopEnd="1"TIPO_EXTRACT=$TIPO_EXTRACTnewthenif [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]??[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"elseloopEnd="1"thenif [ -z $TIPO_EXTRACTnew ]?read TIPO_EXTRACTnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$TIPO_EXTRACTrotulo="TIPO de EXTRACCIÓN:"echo " "echo "enter="$TIPO_EXTRACTecho "C) Por codigo de suscriptor"echo "N) Por NIT"echo $rayaecho "TIPO DE EXTRACCIÓN"#......................................................................echo " "    do    while [ $loopEnd == "0" ]/??    loopEnd="0"#*******************************************************************************# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor#*******************************************************************************readTIPO_EXTRACT() {}    donefi[ $doCuu == "1" ] &&  tput cuu 8?tput belelseloopEnd="1"TIPO_ARCHIVO=$TIPO_ARCHIVOnewthenelif [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]??loopEnd="1"# aceptó el valor actualthenif [ -z $TIPO_ARCHIVOnew ]?read TIPO_ARCHIVOnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$TIPO_ARCHIVOrotulo="ESTRUCTURA:"echo " "echo "enter="$TIPO_ARCHIVOecho "2) 1-11-45"echo "1) 1-11"echo $rayaecho "ESTRUCTURA DEL ARCHIVO BASE"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?    loopEnd="0"#*******************************************************************************# Lee el tipo de archivo "1"=1-11  "2"=1-11-45#*******************************************************************************readTIPO_ARCHIVO() {}    donefiloopEnd="1"NOM_ARCHIVO=$NOM_ARCHIVOnewelse[ $doCuu == "1" ] &&  tput cuu 8tput belecho "El archivo "$NOM_ARCHIVOnew" no se encuentra"thenelif [ ! -f $NOM_ARCHIVOnew ]?[ $doCuu == "1" ] &&  tput cuu 8?tput belecho $NOM_ARCHIVOnew" es un nombre de directorio"thenelif [ -d $NOM_ARCHIVOnew ]?loopEnd="1"# aceptó el valor ofecidothenif [ -z $NOM_ARCHIVOnew ]?tput elread NOM_ARCHIVOnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$NOM_ARCHIVOrotulo="ARCHIVO:"tput elecho " "echo "enter="$NOM_ARCHIVOecho "Ingrese el nombre del archivo base,"echo $rayaecho "NOMBRE DEL ARCHIVO BASE"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?    loopEnd="0"#*******************************************************************************# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES#*******************************************************************************readNOM_ARCHIVO() {}    donefifi[ $doCuu == "1" ] &&  tput cuu 8tput belelseloopEnd="1"BASE=$BASEnewthenif [ $BASEnew == "E" ] || [ $BASEnew == "I" ]??[ $BASEnew == "i" ] && BASEnew="I"[ $BASEnew == "e" ] && BASEnew="E"# convierte a mayúsculaselseloopEnd="1"# aceptó el valor actualthenif [ -z $BASEnew ]?read BASEnewecho "$rotulo\c"tput cuu 1 # vuelve a la línea anteriorecho "$rotulo"$BASErotulo="BASE:"echo " "echo "enter="$BASEecho "E) Externa, provista por el Cliente"echo "I) Interna"echo $rayaecho "ORIGEN DE LA BASE"#......................................................................echo " "    do    while [ $loopEnd == "0" ]?Address search hit TOP without matching pattern:g//s/[/[[/gMissing ] :g//s/\[/[[/gNo previous regular expression/ \[ [^\]]*]:g/ \[ [^\]]*]/s/\[/[[/g    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ] && rm $archivo_val
    [[ -s $archivo_inc ] && rm $archivo_inc
    [[ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99":g/ \[ [^\]]*]/s/\]/]]/g    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ] && rm $archivo_val
    [[ -s $archivo_inc ] && rm $archivo_inc
    [[ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"
:G/g/ \[ [^\]]*]/\[\[ .*[^\]]\][^\]]Address search hit BOTTOM without matching pattern# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../    while [[ $loopEnd == "0" ]do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [[ -z $BASEnew ]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [[ $BASEnew == "E" ] || [[ $BASEnew == "I" ]then
BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "/tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]
then
# aceptó el valor ofecido
loopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"
tput bel
[[ $doCuu == "1" ] &&  tput cuu 8
/#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew == "1" ] || [[ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "//rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [[ $TIPO_EXTRACTnew == "N" ] || [[ $TIPO_EXTRACTnew == "C" ]
/inputLen=11else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
echo "enter="$ID_EXTRACT
echo " "
tput el # borra caracteres sobrantes
rotulo="$criterioExtraccion:"
echo "$rotulo"$ID_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read ID_EXTRACTnew
tput el # borra mensaje de error
if [[ -z $ID_EXTRACTnew ] # acepta el valor actual
then
loopEnd="1"
elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números
then
echo "el dato ingresado debe ser numérico"tput bel
[[ $doCuu == "1" ] &&  tput cuu 8
elif [[ ${#ID_EXTRACTnew} -ne inputLen ] # control de longitud (11 o 6)
then
echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else # todo OK
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]APPEND MODE]/:g/\[\[ .*[^\]]\][^\]]/s/\]/]]/g#*******************************************************************************cd $TEMPORALES
    if [[ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../\]$]APPEND MODE]
        do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [[ -z $BASEnew ]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew == "e" ] && BASEnew="E"[ $BASEnew == "i" ] && BASEnew="I"if [[ $BASEnew == "E" ]] || [[ $BASEnew == "I" ]]then
BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el/]]//]]/ \]$rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]
?Address search hit TOP without matching pattern ]
APPEND MODE]

thenthen
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu == "1" ]] &&  tput cuu 8
elif [[ ! -f $NOM_ARCHIVOnew ]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew == "1" ]] || [[ $TIPO_ARCHIVOnew == "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else/ ]]/ ]]/ ]]
[APPEND MODE[]APPEND MODE]/ ]APPEND MODE]"sh-PE-Ripley" [Modified] line 143 of 737 --19%-- 
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew == "1" ]] || [[ $TIPO_ARCHIVOnew == "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu == "1" ]] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "
rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"if [[ $TIPO_EXTRACTnew == "N" ]] || [[ $TIPO_EXTRACTnew == "C" ]]then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8fi
fi/ ]]/ ]]/done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
if [[ $TIPO_EXTRACT == "N" ] ]]
/then
criterioExtraccion="NIT"
inputLen=11
else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
fi
loopEnd="0"
while [[ $loopEnd == "0" ] ]]
/loopEnd="1"elif [[ "$ID_EXTRACTnew" !=  +([0-9]]) ]]]] # debe ser solo números
then
echo "el dato ingresado debe ser numérico"tput bel
[[ $doCuu == "1" ]] &&  tput cuu 8
elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (11 o 6)
then
echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else # todo OK
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter="$TIPO_PROC
echo " "
rotulo="TIPO de PROCESO:"
echo "$rotulo"$TIPO_PROC
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_PROCnew
if [[ -z $TIPO_PROCnew ]
then
# aceptó el valor por defectoloopEnd="1"
else
# traduce minúsculas[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"if [[ $TIPO_PROCnew == "H" ]] || [[ $TIPO_PROCnew == "A" ]]then
TIPO_PROC=$TIPO_PROCnew ]]/ ]]/loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
fi
done
}

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
loopEnd="0"
while [[ $loopEnd == "0" ] ]]
/do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter="$FECHA_INICIO
echo " "
rotulo="FECHA INICIO de PROCESO AAAAMMDD:"
echo "$rotulo"$FECHA_INICIO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read FECHA_INICIOnew
if [[ -z $FECHA_INICIOnew ] ]]
/read FECHA_INICIOnewif [[ -z $FECHA_INICIOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ "$FECHA_INICIOnew" != +([0-9]]) ]]]] # debe ser solo números
then
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu == "1" ]] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]
]
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" == +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]] && echo "
ok"
     then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# debe ser anterior al mes actualFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm) ]]/    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [[ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[[ $TIPO_ARCHIVO == "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO == "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT == "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT == "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente ]]/ ]]/P_MAQUINA=$(hostname)
if [[ $P_MAQUINA == $P_SERVER_DEV ] ]]
/#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosIn
c " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [[ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else ]]/ ]]/ ]]




/readTIPO_EXTRACT# N NIT, C cod subs
readID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [[ $TIPO_PROC == "H" ] ]]
/readID_EXTRACT# NIT o cos subsfi
readTIPO_PROC# A actual, H histórico
if [[ $TIPO_PROC == "H" ]]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [[ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [[ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [[ $continuar == "1" ]then
:
fi
fi
done
    done
}




#*******************************************************************************
#******************************************************************************* ]]/ ]]/ ]]/#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_1/200212/icdb
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_2/200505/extfh.cfg
#    EXTFH=/san_ata_2/200504/extfh.cfg ]]/#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
if [[ $TIPO_PROC == "H" ] ]]
/then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ] ]]
/    if [[ $TIPO_PROC == "H" ]]then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]
    then ]]/ ]]

/Address search hit BOTTOM without matching pattern

[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>cp sh-PR E-Ripley sh-PE-Ripley-BUP
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    if [[ $TIPO_PROC == "H" ]]then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then

:w"sh-PE-Ripley" 737 lines, 26555 characters 

[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgcp sh-PE-Ripley sh-PE-Ripley-BUP/d/iccol/desarrollo/macros>fg                              /d/iccol/desarrollo/macros>man kshfg     sh-PE-Ripley
sh-PE-Ripley[196]: syntax error at line 230 : `]]]]' unexpected
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    if [[ $TIPO_PROC == "H" ]]then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    theninputLen=6fi
loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
echo "enter="$ID_EXTRACT
echo " "
tput el # borra caracteres sobrantes
rotulo="$criterioExtraccion:"
echo "$rotulo"$ID_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read ID_EXTRACTnew
tput el # borra mensaje de error
if [[ -z $ID_EXTRACTnew ]] # acepta el valor actual
then
loopEnd="1"
elif [[ "$ID_EXTRACTnew" !=  +([0-9]]) ]]]] # debe ser solo números
then
echo "el dato ingresado debe ser numérico"tput bel
[[ $doCuu == "1" ]] &&  tput cuu 8
elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (11 o 6)
then
echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else # todo OK
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#......................................................................]) /]]]readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter="$FECHA_INICIO
echo " "
rotulo="FECHA INICIO de PROCESO AAAAMMDD:"
echo "$rotulo"$FECHA_INICIO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read FECHA_INICIOnew
if [[ -z $FECHA_INICIOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ "$FECHA_INICIOnew" != +([0-9]]) ]]]] # debe ser solo números
then
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu == "1" ]] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]
]
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" == +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]] && echo "
ok"
     then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# debe ser anterior al mes actualFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnew]) elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo númerosthen
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu == "1" ]] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]]
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" == +(20[012]][0-9]](0[0-9]]|1[12]])([012]][0-9]]|3[01]])) ]]]] && echo "ok"
then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# debe ser anterior al mes actualFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    



OPEN MODE  APPEND MODEelif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)

 APPEND MODE# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"/Address search hit BOTTOM without matching pattern/\]]]Address search hit BOTTOM without matching pattern?Address search hit TOP without matching pattern:w"sh-PE-Ripley" 737 lines, 26531 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981

----------------------------------------------------------------------
EXTRACCIÓN:


Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs

----------------------------------------------------------------------
PESVNO:


Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo númerosthen
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu == "1" ]] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# debe ser anterior al mes actualFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#....................................................................../extracción/echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew == "1" ]] || [[ $TIPO_ARCHIVOnew == "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu == "1" ]] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "
rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"if [[ $TIPO_EXTRACTnew == "N" ]] || [[ $TIPO_EXTRACTnew == "C" ]]then///TIPO_EXTRACT=$TIPO_EXTRACTnew
loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
fi
done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
/#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
if [[ $TIPO_EXTRACT == "N" ]]
then
criterioExtraccion="NIT"
inputLen=11
else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
fi
loopEnd="0"
while [[ $loopEnd == "0" ]]
do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
/echo $raya

echo "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
/read TIPO_PROCnewif [[ -z $TIPO_PROCnew ]]
then
# aceptó el valor por defectoloopEnd="1"
else
# traduce minúsculas[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"if [[ $TIPO_PROCnew == "H" ]] || [[ $TIPO_PROCnew == "A" ]]then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8fi
fi
    done
}

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter="$FECHA_INICIO
echo " "
rotulo="FECHA INICIO de PROCESO AAAAMMDD:"
echo "$rotulo"$FECHA_INICIO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read FECHA_INICIOnew
if [[ -z $FECHA_INICIOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números
then
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu == "1" ]] && tput cuu 8/# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [[ $BASE == "E" ]]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[[ $TIPO_ARCHIVO == "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO == "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT == "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT == "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC == "H" ]]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'/#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#....................................................................../ejecutar_extraccion    echo "${i}Archivo: "$NOM_ARCHIVOprint -n "${i}Base: "$BASE
    if [[ $BASE == "E" ]]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[[ $TIPO_ARCHIVO == "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO == "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT == "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT == "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC == "H" ]]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [[ -s $archivo_prn ]] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [[ -s $archivo_prn ]] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
@#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso    echo "${i}Archivo: "$NOM_ARCHIVOprint -n "${i}Base: "$BASE
    if [[ $BASE == "E" ]]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[[ $TIPO_ARCHIVO == "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO == "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT == "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT == "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC == "H" ]]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [[ -s $archivo_prn ]] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [[ -s $archivo_prn ]] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
@



    



    


    










# echo "regex:"$grepRegex    #    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
echo "\n$raya\nEXTRACCIÓN:\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    


    

echo " $TIPO_EXTRACT " " $ID_EXTRACT
RACCIÓN: $TIPO_EXTRACT " " $ID_EXTRACT T":w"sh-PE-Ripley" 737 lines, 26553 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981

----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981


Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs

----------------------------------------------------------------------
PESVNO:


Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>vi PERipley20140602                $TEMPORALES/PERipley20140602.log
"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters !!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5==> 000742
Registros Tipo 6==> 000000
Registros Tipo 7==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS:0000765
REGISTROS CORRECTOS:0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS:0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140602
HORA  : 1426
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT- 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT- 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/06/02 14:26:31
Fin de Programa:     2014/06/02 14:26:31

~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters:q/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
INSERT MODE# :w"sh-PE-Ripley" 737 lines, 26555 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgvi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:

 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs

----------------------------------------------------------------------
PESVNO:


Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC == "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias



    

INSERT MODE|:w"sh-PE-Ripley" 737 lines, 26556 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<

I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
sh-PE-Ripley[646]: syntax error at line 646 : `|' unexpected
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    echo "\n$raya\nPESVNO:\n\n" >>| $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias $archivo_log    INSERT MODE#     # echo "\n$raya\nPESVNO:\n\n" >> $archivo_logejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_logejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripleyfg          sh-PE-Ripleyfg          vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>vi TEMPORALES/PERipley20140602.log /d/iccol/desarrollo/macros>vi /PERipley20140602.log          /d/iccol/desarrollo/macros>vi PERipley20140602.log 
"PERipley20140602.log" [New file] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"PERipley20140602.log" [New file]:q/d/iccol/desarrollo/macros>pwd
/d/iccol/desarrollo/macros
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_logejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#....................................................................../archivo_logecho "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanataif [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi//#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
echo $raya
echo "SCOTBATCH: cálculo de scores"
echo " "
echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log    
INSERT MODE# 

/
/# parámetros para el programa:
formato="VAL"
SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
SCO45="045"     # ACIERTA A - COOPERATIVAS
SCO47="047"     # ACIERTA A - FINANCIERO
SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
SCO62="062"     # QUANTO
SCO67="067"     # ACIERTA+
SCO95="095"     # ACIERTA A INSTALAMENTOS
SCO99="099"     # CARACTERISTICAS
scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"

echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
$NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
# DEBUG: show output >> $archivo.log 2>>$archivo.log    G: shot >


#*******************************************************************************


# Ejecución del programa iceprerip01



# Los parámetros son:




#    archivo de entrada de validados#    archivo de entrada de inconsistencias#    estructura del archivo ????#    tipo de proceso ????>#    fecha del periodo#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log>
    #APPEND MODE $$$$/

#*******************************************************************************


# Nombres de los archivos



#*******************************************************************************




# muestra los nombres de los archivos del procesoecho $rayaecho "ARCHIVOS:"echo " "










     
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~/    INSERT MODE# //Address search hit BOTTOM without matching pattern[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgpwdvi PERipley20140602.logfg                     sh-PE-Ripleyfg          sh-PE-Ripleyfg          vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602.log  /d/iccol/desarrollo/macros>l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls  $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls - $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l
/d/iccol/desarrollo/temporales/PERipley20140602.log: No such file or directory
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602.log     /d/iccol/desarrollo/macros>e $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ec $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ech $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo  $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo " $TEMPORALES/PERipley20140602.logq $TEMPORALES/PERipley20140602.logq $TEMPORALES/PERipley20140602.logq $TEMPORALES/PERipley20140602.log" $TEMPORALES/PERipley20140602.log  $TEMPORALES/PERipley20140602.log> $TEMPORALES/PERipley20140602.log> $TEMPORALES/PERipley20140602.log
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo "qqq" >> $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log        /d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr       4 Jun  2 14:39 /d/iccol/desarrollo/temporales/PERipley20140602.log
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo "qqq" >> $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log        /d/iccol/desarrollo/macros>fg                                    /d/iccol/desarrollo/macros>pwdfg ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo "qqq" >> $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log        /d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602.log     /d/iccol/desarrollo/macros>v $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>vi
"/d/iccol/desarrollo/temporales/PERipley20140602.log" 1 line, 4 characters qqq
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.log" 1 line, 4 characters:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602.log  /d/iccol/desarrollo/macros>r $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>rm
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/temporales/PERipley20140602.log: No such file or directory
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_logls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~
~
~
~
~
~
~
~    echo " "    echo "ARCHIVOS:"    echo $raya    # muestra los nombres de los archivos del proceso#*******************************************************************************# Nombres de los archivos#*******************************************************************************    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log     $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC#*******************************************************************************#    fecha del periodo#    tipo de proceso ????#    estructura del archivo ????#    archivo de entrada de inconsistencias#    archivo de entrada de validados# Los parámetros son:# Ejecución del programa iceprerip01#*******************************************************************************    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val:w"sh-PE-Ripley" 738 lines, 26596 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602.log   /d/iccol/desarrollo/macros>vi $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>echo "qqq" >> $TEMPORALES/PERipley20140602.log/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602.log        /d/iccol/desarrollo/macros>fg                                    /d/iccol/desarrollo/macros>pwdvi PERipley20140602.logfg                     sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val# $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento/no hay un archivo deAddress search hit BOTTOM without matching pattern?echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>ls -l PERipley20140602*
PERipley20140602*: No such file or directory
/d/iccol/desarrollo/macros>-s -l $TEMPORALES/PERipley20140602*
ksh: -s:  not found
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>-s -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADCOO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADFGE
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADHVT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADINT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADTRO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ACIEAA
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 10:59 /d/iccol/desarrollo/temporales/PERipley20140602.CARACT
-rw-rw-r--   1 icjlud   icdatacr  553532 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.DATINF
-rw-rw-r--   1 icjlud   icdatacr    1995 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ESTADI
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.PREDHD
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr   58618 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.QUANTO
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>clearls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADCOO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADFGE
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADHVT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADINT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADTRO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ACIEAA
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 10:59 /d/iccol/desarrollo/temporales/PERipley20140602.CARACT
-rw-rw-r--   1 icjlud   icdatacr  553532 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.DATINF
-rw-rw-r--   1 icjlud   icdatacr    1995 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ESTADI
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.PREDHD
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr   58618 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.QUANTO
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.AADCOO
"/d/iccol/desarrollo/temporales/PERipley20140602.AADCOO" 742 lines, 100170 characters 1;00000004831;BULLA ORJUELA HERNANDO;00818;99;00;00;00;19530327;BOGOTA D.C.    ;CUNDINAMAR;00;M;082;66+  ;
1;00000454737;RODRIGUEZ CUBILLOS JOSE ANTONIO;00828;99;00;00;00;19601004;VIOTA;CUNDINAMAR
    ;00;M;075;66+  ;
1;00002411141;CIFUENTES RAMIREZ JAIME;00855;99;00;00;00;19551226;CALI;VALLE
    ;00;M;080;66+  ;
1;00002925464;ANGARITA DULCEY PEDRO ARTURO;00905;99;00;00;00;19600801;BOGOTA D.C.    ;CUNDINAMAR
    ;00;M;075;66+  ;
1;00002940566;LEON RUIZ HUMBERTO ANTONIO;00897;99;00;00;00;19610220;BOGOTA D.C.    ;CUNDINAMAR
    ;00;M;074;66+  ;
1;00002994664;TOVAR CALVO LUIS ALEJANDRO;00812;99;00;00;00;19790713;CHIA;CUNDINAMAR
    ;00;M;053;46-55;
1;00003020988;RUIZ ROMERO MANUEL RICARDO;00871;99;00;00;00;19760117;FONTIBON;CUNDINAMAR
    ;00;M;056;56-65;
1;00003158483;RUEDA GONZALEZ FERNANDO;00818;99;00;00;00;19830930;SAN FRANCISCO  ;CUNDINAMAR
    ;00;M;049;46-55;
1;00003181761;MUNEVAR TELLEZ RAUL GUILLERMO;00826;99;00;00;00;19760728;SUBA;CUNDINAMAR
    ;00;M;056;56-65;
1;00003213808;BELTRAN CHITIVA PEDRO LUIS;00875;99;00;00;00;19791209;UBALA;CUNDINAMAR
    ;00;M;053;46-55;
1;00003226636;MANRIQUE SANTAMARIA CAMILO;00847;99;00;00;00;19741105;USAQUEN;CUNDINAMAR
    ;00;M;061;56-65;
1;00003329263;ECHEVERRI MONTOYA ULPIANO;00906;99;00;00;00;19600617;MEDELLIN;ANTIOQUIA
    ;00;M;075;66+  ;
1;00004266024;PARRA PARRA LUIS ADAN;00873;99;00;00;00;19770228;SUSACON;BOYACA
    ;00;M;055;46-55;
1;00004537842;MORALES TORRES GILDARDO DE JESUS;00763;99;00;00;00;19750411;QUINCHIA;RISARALDA
    ;00;M;057;56-65;
1;00004716536;MURILLO DAVILA MARCO TULIO;00725;99;00;00;00;19871214;MIRANDA;CAUCA
    ;00;M;045;36-45;
1;00004895549;MARTINEZ GARCIA HECTOR;00827;99;00;00;00;19820908;TESALIA;HUILA
    ;00;M;050;46-55;
1;00005563591;FLETCHER SUAREZ JAIRO;00907;99;00;00;00;19670719;BUCARAMANGA    ;SANTANDER
    ;00;M;068;66+  ;
1;00005563621;GAVASSA VILLAMIZAR RAFAEL;00896;99;00;00;00;19670719;BUCARAMANGA    ;SANTANDER
    ;00;M;068;66+  ;
1;00005590565;NIÑO RINCON LUIS ALFONSO;00812;99;00;00;00;19671205;BARRANCABERMEJA;SANTANDER
    ;00;M;068;66+  ;
1;00005759232;CALVETE PARDO CARLOS ALBERTO;00791;99;00;00;00;19960730;SIMACOTA;SANTANDER
    ;00;M;036;36-45;
1;00005872766;DUARTE TOVAR JOSE DAVID;00796;99;00;00;00;19770825;CUNDAY;TOLIMA
    ;00;M;055;46-55;
1;00005889100;OVIEDO PRADA JOHN EDUARD;00785;99;00;00;00;19871207;CHAPARRAL;TOLIMA
    ;00;M;045;36-45;
1;00005992247;RAMIREZ QUIMBAYO CARLOS JULIO;00776;99;00;00;00;19861113;ROVIRA;TOLIMA
    ;00;M;046;46-55;
1;00006001114;DIAZ SALAZAR ROMULO;00866;99;00;00;00;19790813;SAN ANTONIO    ;TOLIMA
    ;00;M;053;46-55;
@"/d/iccol/desarrollo/temporales/PERipley20140602.AADCOO" 742 lines, 100170 characters:q/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.ESTADI
"/d/iccol/desarrollo/temporales/PERipley20140602.ESTADI" 34 lines, 1995 characters Clientes con informacion
Clientes sin informacion7427366
Inconsistencias23


18 a 21 años;;;;;
22 a 28 años;;;;;
29 a 35 años;;;;;
36 a 45 años;;;;;
46 a 55 años;;;;;
56 a 65 años;;;;;
más de 66 años;;;;;


Al día;;;;;
Mora 30;;;;;
Mora 60;;;;;
Mora 90;;;;;
Mora 120;;;;;
Cartera castigada;;;;;
Dudoso recaudo;;;;;
Endeudamiento;;;;;
Cuenta corriente Embargada    ;;;;;
Sin cuentas activas;;;;;


Al día;;;;;
Mora 30 - 120;;;;;
Cart.Castig -  Dud.Recaud     ;;;;;


Sector Financiero;;;;;
Sector Real;;;;;
Sector Cooperativo;;;;;
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.ESTADI" 34 lines, 1995 characters:q/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.log
"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters !!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5==> 000742
Registros Tipo 6==> 000000
Registros Tipo 7==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS:0000765
REGISTROS CORRECTOS:0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS:0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140602
HORA  : 1448
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT- 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT- 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/06/02 14:48:29
Fin de Programa:     2014/06/02 14:48:29

~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>rales/PERipley20140602.log                        <gk vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADCOO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADFGE
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADHVT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADINT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADTRO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ACIEAA
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 10:59 /d/iccol/desarrollo/temporales/PERipley20140602.CARACT
-rw-rw-r--   1 icjlud   icdatacr  553532 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.DATINF
-rw-rw-r--   1 icjlud   icdatacr    1995 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ESTADI
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.PREDHD
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr   58618 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.QUANTO
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>vi ^[[B  /d/iccol/desarrollo/macros>vi     /d/iccol/desarrollo/temporales/PERipley20140602.D/d/iccol/desarrollo/macros>orales/PERipley20140602.DA                        <TINF
ksh: /d/iccol/desarrollo/temporales/PERipley20140602.DATINF: cannot execute
/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.DATINF
"/d/iccol/desarrollo/temporales/PERipley20140602.DATINF" 742 lines, 553532 characters 1;0000004831B;LLA ORJUELA HERNANDO19;     ; ;MAR     00M0826;30327;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0000454737R;DRIGUEZ CUBILLOS JOSE ANTONIO19;     ; ;MAR     00M0756;01004;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0002411141C;FUENTES RAMIREZ JAIME19;     ; ;00M0806;51226;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0002925464A;GARITA DULCEY PEDRO ARTURO19;     ; ;MAR     00M0756;00801;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0002940566L;ON RUIZ HUMBERTO ANTONIO19;     ; ;MAR     00M0746;10220;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0002994664T;VAR CALVO LUIS ALEJANDRO19;     ; ;MAR     00M0534;90713;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0003020988R;IZ ROMERO MANUEL RICARDO19;     ; ;MAR     00M0565;60117;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0003158483R;EDA GONZALEZ FERNANDO19;     ; ;MAR     00M0494;30930;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
1;0003181761M;NEVAR TELLEZ RAUL GUILLERMO19;     ; ;MAR     00M0565;60728;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000000
0;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000
0000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;00
00;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;
000;000;000;000;000;000;5
@
@
@
@"/d/iccol/desarrollo/temporales/PERipley20140602.DATINF" 742 lines, 553532 characters1;0000004831B;LLA ORJUELA HERNANDO19;     ; ;MAR     00M0826;30327;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0000454737R;DRIGUEZ CUBILLOS JOSE ANTONIO19;     ; ;MAR     00M0756;01004;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0002411141C;FUENTES RAMIREZ JAIME19;     ; ;00M0806;51226;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0002925464A;GARITA DULCEY PEDRO ARTURO19;     ; ;MAR     00M0756;00801;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0002940566L;ON RUIZ HUMBERTO ANTONIO19;     ; ;MAR     00M0746;10220;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0002994664T;VAR CALVO LUIS ALEJANDRO19;     ; ;MAR     00M0534;90713;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003020988R;IZ ROMERO MANUEL RICARDO19;     ; ;MAR     00M0565;60117;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003158483R;EDA GONZALEZ FERNANDO19;     ; ;MAR     00M0494;30930;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003181761M;NEVAR TELLEZ RAUL GUILLERMO19;     ; ;MAR     00M0565;60728;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003213808B;LTRAN CHITIVA PEDRO LUIS19;     ; ;MAR     00M0534;91209;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003226636M;NRIQUE SANTAMARIA CAMILO19;     ; ;MAR     00M0615;41105;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0003329263E;HEVERRI MONTOYA ULPIANO19;     ; ;IA00M0756;00617;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0004266024P;RRA PARRA LUIS ADAN19;     ; ;00M0554;70228;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5
1;0004537842M;RALES TORRES GILDARDO DE JESUS19;     ; ;DA00M0575;50411;0000;0000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;000000000
00;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;0
00;000;000;000;000;000;000;;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;0
0000000000;00000000000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000; ; ;000;000;000;000;000;000;5:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros> /d/iccol/desarrollo/temporales/PERipley20140602.D/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADCOO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADFGE
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADHVT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADINT
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.AADTRO
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ACIEAA
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 10:59 /d/iccol/desarrollo/temporales/PERipley20140602.CARACT
-rw-rw-r--   1 icjlud   icdatacr  553532 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.DATINF
-rw-rw-r--   1 icjlud   icdatacr    1995 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ESTADI
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr  100170 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.PREDHD
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr   58618 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.QUANTO
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  2 11:00 /d/iccol/desarrollo/temporales/PERipley20140602.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 14:48 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>rm  ^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602*     /d/iccol/desarrollo/macros>r $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_valecho " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "OPEN MODEsleep 5    sleep 5sleep 5        sleep 5echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')






         sleep 5horaFin=$(date '+%H:%M:%S')
#*******************************************************************************:w"sh-PE-Ripley" 742 lines, 26632 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd == "0" ]]
    do
  echo " "
#....................................................................../archivo_logif [[ -z "$sanata" ]]then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    sleep 5
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    sleep 5
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi//
#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
sleep 5
echo $raya
echo "SCOTBATCH: cálculo de scores"
echo " "
# echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
/    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val# $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
    sleep 5
$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento/Address search hit BOTTOM without matching pattern    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_logls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~
~
~
~
~
~
~
~:w"sh-PE-Ripley" 742 lines, 26632 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgrm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros> /d/iccol/desarrollo/temporales/PERipley20140602.D/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*   /d/iccol/desarrollo/macros>fg                              /d/iccol/desarrollo/macros>  h-PE-RipleyI sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<

I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyfg          rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.log
"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters !!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5==> 000742
Registros Tipo 6==> 000000
Registros Tipo 7==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS:0000765
REGISTROS CORRECTOS:0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS:0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140602
HORA  : 1506
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT- 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT- 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/06/02 15:06:46
Fin de Programa:     2014/06/02 15:06:46

~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.log" 36 lines, 1283 characters:q/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.prn
"/d/iccol/desarrollo/temporales/PERipley20140602.prn" 765 lines, 9945 characters 100000000533
100000001974
100000004831
100000006060
100000008238
100000200935
100000200980
100000454737
100002411141
100002925464
100002940566
100002994664
100003020988
100003158483
100003181761
100003213808
100003226636
100003329263
100004266024
100004472294
100004537842
100004716536
100004895549
100005563591
100005563621
100005590565
100005759232
100005872766
100005889100
100005992247
100006001114
100006092267
100006106694
100006228037
100006264281
100006288186
100006463789
100006626340
100006889725
100007176152
100007217641
100007217943
100007334810
100007716738
100007724577
100007730659
100008105329
100008125042
100008125263"/d/iccol/desarrollo/temporales/PERipley20140602.prn" 765 lines, 9945 characters line 1 of 765 --0%-- 10000000053:q/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.vre
"/d/iccol/desarrollo/temporales/PERipley20140602.vre" 0 lines, 0 characters 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140602.vre" 0 lines, 0 characters:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 15:06 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>fg  ^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602*     /d/iccol/desarrollo/macros>r $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_logls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~
~
~
~
~
~
~
~
#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    sleep 5
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
    sleep 5
$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls $TEMPORALES/$archivo*    echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    sleep 5
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    sleep 5
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************

    

OPEN MODEexir # $$$$ DEBUG:w"sh-PE-Ripley" 743 lines, 26650 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgrm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<

I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
sh-PE-Ripley[641]: exir:  not found
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyfg          rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    sleep 5
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

exir # $$$$ DEBUG
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    sleep 5
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fiexiREPLACE 1 CHARt:w"sh-PE-Ripley" 743 lines, 26650 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgrm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                    /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<

I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyfg          rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                    /d/iccol/desarrollo/macros>fg          rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:16 /d/iccol/desarrollo/temporales/PERipley20140602.prn
/d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602.prn
"/d/iccol/desarrollo/temporales/PERipley20140602.prn" 765 lines, 9945 characters 100000000533
100000001974
100000004831
100000006060
100000008238
100000200935
100000200980
100000454737
100002411141
100002925464
100002940566
100002994664
100003020988
100003158483
100003181761
100003213808
100003226636
100003329263
100004266024
100004472294
100004537842
100004716536
100004895549
100005563591
100005563621
100005590565
100005759232
100005872766
100005889100
100005992247
100006001114
100006092267
100006106694
100006228037
100006264281
100006288186
100006463789
100006626340
100006889725
100007176152
100007217641
100007217943
100007334810
100007716738
100007724577
100007730659
100008105329
100008125042
100008125263"/d/iccol/desarrollo/temporales/PERipley20140602.prn" 765 lines, 9945 characters:q/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    sleep 5
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[[ -s $archivo.log ]] && rm $archivo.log

exit # $$$$ DEBUG
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    sleep 5
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi


OPEN MODE# produce el archivo prn# PP#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    sleep 5
    echo $raya
    echo "PESVNO: validación de IDs"
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    ejecutar_validacion
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado == "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    sleep 5
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    SCO41="041"     # ACIERTA A - VEHÍCULO E HIPOTECARIO
    SCO45="045"     # ACIERTA A - COOPERATIVAS
    SCO47="047"     # ACIERTA A - FINANCIERO
    SCO48="048"     # ACIERTA A - TARJETA DE CRÉDITO
    SCO49="049"     # ACIERTA A - TELECOMUNICACIONES
    SCO62="062"     # QUANTO
    SCO67="067"     # ACIERTA+
    SCO95="095"     # ACIERTA A INSTALAMENTOS
    SCO99="099"     # CARACTERISTICAS
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # $$$$ DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************exit # $$$$ DEBUG#*******************************************************************************
exit # $$$$ DEBUG?ejecutar_validacion/Address search hit BOTTOM without matching pattern?    # el directorio del archivo cambia según el ambienteP_MAQUINA=$(hostname)
    if [[ $P_MAQUINA == $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [[ -s $archivo_prn ]] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosI
nc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]]
    thenecho " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
paramsGet
# lee el set de parámetros hasta la satisfacción del ope$    CHANGE MODEecho:w"sh-PE-Ripley" 744 lines, 26672 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgvi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:16 /d/iccol/desarrollo/temporales/PERipley20140602.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602*     /d/iccol/desarrollo/macros>r $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>rm
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>fg                                 /d/iccol/desarrollo/macros>vi /d/iccol/desarrollo/temporales/PERipley20140602>/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*                /d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<


I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyrm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 15:21 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:21 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 15:21 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>ls PERip*
PERip*: No such file or directory
/d/iccol/desarrollo/macros>ls ~/PERip*
/d/iccol/desarrollo/PERip*: No such file or directory
/d/iccol/desarrollo/macros>ls $TEMPORALES/PERip*
/d/iccol/desarrollo/temporales/PERipley20140602.log
/d/iccol/desarrollo/temporales/PERipley20140602.prn
/d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>cat /d/iccol/desarrollo/temporales/PERipley20140602.log
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS                :0000765
REGISTROS CORRECTOS             :0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS         :0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140602
HORA  : 1521
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT                  - 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT                  - 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/06/02 15:21:41
Fin de Programa:     2014/06/02 15:21:41

/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    [[ -s $archivo_prn ]] && rm $archivo_prngrep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

echo PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosI
nc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope

INSERT MODE"# :w"sh-PE-Ripley" 744 lines, 26674 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgcat /d/iccol/desarrollo/temporales/PERipley2014060>/d/iccol/desarrollo/macros>ls $TEMPORALES/PERip*                              /d/iccol/desarrollo/macros>ls ~/PERip*          ls PERip*  ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>fg                              /d/iccol/desarrollo/macros>cat /d/iccol/desarrollo/temporales/PERipley2014060>/d/iccol/desarrollo/macros>ls $TEMPORALES/PERip*                              /d/iccol/desarrollo/macros>ls ~/PERip*          ls PERip*  ls -l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>rm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>sh-PE-Ripley                    /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140602
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=N
 
            TIPO de EXTRACCIÓN:N
            TIPO de EXTRACCIÓN:
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el NIT para extracción (11 dígitos),
      enter=00900047981
 
                    NIT:00900047981
                    NIT:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140602<
I;1;1;N;00900047981;A;20140602
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140602
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N 00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140602.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140602.prn
PESVNO archivo_prn_VALI PERipley20140602.val PERipley20140602.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
No hay un archivo de registros validados - PROCESO CANCELADO
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyrm $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros> $TEMPORALES/PERipley20140602*  /d/iccol/desarrollo/macros>l $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls  $TEMPORALES/PERipley20140602*
/d/iccol/desarrollo/temporales/PERipley20140602.log
/d/iccol/desarrollo/temporales/PERipley20140602.prn
/d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls  $TEMPORALES/PERipley20140602*/d/iccol/desarrollo/macros>ls  -$TEMPORALES/PERipley20140602*l$TEMPORALES/PERipley20140602* $TEMPORALES/PERipley20140602*
-rw-rw-r--   1 icjlud   icdatacr    1283 Jun  2 15:29 /d/iccol/desarrollo/temporales/PERipley20140602.log
-rw-rw-r--   1 icjlud   icdatacr    9945 Jun  2 15:29 /d/iccol/desarrollo/temporales/PERipley20140602.prn
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  2 15:29 /d/iccol/desarrollo/temporales/PERipley20140602.vre
/d/iccol/desarrollo/macros>vi archivo_prn_VALI
"archivo_prn_VALI" [New file] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"archivo_prn_VALI" [New file]:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi archivo _prn _VALIvi $archivo _prn _VALITarchivo _prn _VALIEarchivo _prn _VALIMarchivo _prn _VALIParchivo _prn _VALIOarchivo _prn _VALIRarchivo _prn _VALIAarchivo _prn _VALILarchivo _prn _VALIEarchivo _prn _VALISarchivo _prn _VALI/archivo _prn _VALI
"/d/iccol/desarrollo/temporales/archivo_prn_VALI" 766 lines, 9969 characters VALIDAR=NO^M
100000000533
100000001974
100000004831
100000006060
100000008238
100000200935
100000200980
100000454737
100002411141
100002925464
100002940566
100002994664
100003020988
100003158483
100003181761
100003213808
100003226636
100003329263
100004266024
100004472294
100004537842
100004716536
100004895549
100005563591
100005563621
100005590565
100005759232
100005872766
100005889100
100005992247
100006001114
100006092267
100006106694
100006228037
100006264281
100006288186
100006463789
100006626340
100006889725
100007176152
100007217641
100007217943
100007334810
100007716738
100007724577
100007730659
100008105329
100008125042"/d/iccol/desarrollo/temporales/archivo_prn_VALI" 766 lines, 9969 characters100098573783
100098583028
100098659615
100098704359
101015999256
101017130671
101018427088
101019025297
101020415770
101020726795
101022347479
101032368210
101039446873
101072646761
101098611502
101128278908
101130611331
101130630448
400000119044
400000239360
400000275897
400000317146
400000349621
400000397507
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi $TEMPORALES/archivo _prn _VALI/d/iccol/desarrollo/macros> $TEMPORALES/archivo _prn _VALI  /d/iccol/desarrollo/macros>r $TEMPORALES/archivo _prn _VALI/d/iccol/desarrollo/macros>rm $TEMPORALES/archivo _prn _VALI
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    [[ -s $archivo_prn ]] && rm $archivo_prngrep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [[ $TIPO_ARCHIVO == "1" ]]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

echo PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    # [[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosI
nc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope[[ -s archivo_prn_VALI ]] && rm archivo_prn_VALI    
]]
    
    parmsOK="0"
PESVNO_INPUT="archivo_prn_VALI"parmsOK="0"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALIPESVNO_INPUT

INSERT MODE$$PESVNO_INPUTT"INSERT MODE$$archivo_prn_VALIINSERT MODE":w"sh-PE-Ripley" 744 lines, 26633 characters /d/iccol/desarrollo/macros>^D
