=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2014.05.31 15:42:24 =~=~=~=~=~=~=~=~=~=~=~=
login as: icjlud
Using keyboard-interactive authentication.
Password: 
Last login: Sat May 31 08:23:36 2014 from 172.16.10.94
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
COBJVM=sun_142
JAVA_HOME=/usr/j2se
LD_LIBRARY_PATH=/usr/j2se/jre/lib/sparc:/usr/j2se/jre/lib/sparc/client:/usr/j2se/jre/lib/sparc/native_threads:/usr/j2se/jre/lib/sparc:/opt/mfocus/des/cobol/lib:/opt/IBM/db2/V9.7/lib:/export/home/db2inst1/sqllib/lib64:/export/home/db2inst1/sqllib/lib32
PATH=/usr/j2se/jre/sh:/usr/j2se/sh:/usr/j2se/bin:/usr/j2se/jre/bin:/opt/mfocus/des/cobol/lib:/opt/mfocus/des/cobol/bin:/usr/bin:/bin:/usr/bin:/d/iccol/desarrollo/macros:/d/iccol/desarrollo/utiles:/opt/bin:/usr/sbin:/usr/lib:/usr/ccs/bin:/opt/SUNWspro/bin:/usr/jdk/latest/bin:/usr/local/bin:/usr/j2se/bin:/usr/openwin/bin:.:/export/home/db2inst1/sqllib/bin:/export/home/db2inst1/sqllib/adm:/export/home/db2inst1/sqllib/misc
CLASSPATH=/opt/mfocus/des/cobol/lib/mfcobol.jar:.:/usr/j2se/jre/lib/rt.jar:/opt/mfocus/des/cobol/lib/mfimtk.jar:/opt/mfocus/des/cobol/lib/xerces.jar:/opt/mfocus/des/cobol/lib/castor-0_9_4_1-xml.jar:/opt/mfocus/des/cobol/lib/mfcobol.jar:/usr/j2se/jre/lib/dt.jar:/usr/j2se/jre/lib/rt.jar:/d/iccol/desarrollo/java/server:/export/home/db2inst1/sqllib/java/db2java.zip:/export/home/db2inst1/sqllib/java/db2jcc.jar:/export/home/db2inst1/sqllib/java/sqlj.zip:/export/home/db2inst1/sqllib/function:/export/home/db2inst1/sqllib/java/db2jcc_license_cu.jar:.
COBCPY=/opt/mfocus/des/cobol/cpylib:/opt/mfocus/des/cobol/cpylib:/d/iccol/desarrollo/copys/pais:/d/iccol/desarrollo/copys
Java version = 1.4.2_19
Java vendor = Sun Microsystems Inc.
Java OS name = SunOS
Java OS arch = sparc
Java OS version = 5.10

  ####    ####   #####   ######   ####
 #    #  #    #  #    #  #       #
 #       #    #  #    #  #####    ####
 #       #    #  #    #  #            #
 #    #  #    #  #    #  #       #    #
  ####    ####   #####   ######   ####

 #####
#     #   ####   #        ####   #    #  #####      #      ##
#        #    #  #       #    #  ##  ##  #    #     #     #  #
#        #    #  #       #    #  # ## #  #####      #    #    #
#        #    #  #       #    #  #    #  #    #     #    ######
#     #  #    #  #       #    #  #    #  #    #     #    #    #
 #####    ####   ######   ####   #    #  #####      #    #    #

 #####
#     #   ####   #    #  #####      #    #         ##     ####      #     ####
#        #    #  ##  ##  #    #     #    #        #  #   #    #     #    #    #
#        #    #  # ## #  #    #     #    #       #    #  #          #    #    #
#        #    #  #    #  #####      #    #       ######  #          #    #    #
#     #  #    #  #    #  #          #    #       #    #  #    #     #    #    #
 #####    ####   #    #  #          #    ######  #    #   ####      #     ####

 #####                                           #####  #         ###
#     #  #    #  #    #          #    #         #     # #    #   #   #
#        #    #  ##   #          #    #               # #    #  #     #
 #####   #    #  # #  #          #    #          #####  #    #  #     #
      #  #    #  #  # #          #    #   ###   #       ####### #     #
#     #  #    #  #   ##           #  #    ###   #            #   #   #
 #####    ####   #    # #######    ##     ###   #######      #    ###

icjlud@codes /d/iccol/desarrollo
$ . viset
viset running
/d/iccol/desarrollo>ma
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ma. visetfg     sh-PE-Ripleyvsh-PE-Ripleyish-PE-Ripley sh-PE-Ripley
"sh-PE-Ripley" 696 lines, 24907 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,""sh-PE-Ripley" 696 lines, 24907 characters/scotbatchecho $rayaecho "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion# control: si no hay un archivo .val se cancela el proceso
    [ ! -s $archivo_val ] && echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " ":set allnoautoindentnomodelinesshowmodeautoprintnonumbernoslowopennoautowritenonovicetabstop=4nobeautifynooptimizetaglength=0directory=/var/tmpparagraphs=IPLPPPQPP LIpplpipnppplpipbptags=tags /usr/lib/tagsnoedcompatibleprompttagstacknoerrorbellsnoreadonlyterm=vt220noexrcredrawnoterseflashremaptimeouthardtabs=8report=5ttytype=vt220ignorecasescroll=24warnnolispsections=NHSHH HUuhsh+cwindow=49nolistshell=/bin/kshnowrapscanmagicshiftwidth=4wrapmargin=0mesgnoshowmatchnowriteany[Hit return to continue] echo $rayaecho "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion# control: si no hay un archivo .val se cancela el proceso
    [ ! -s $archivo_val ] && echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "  echo "HASTA ACÁ LLEGAMOS POR AHORA"  exit"sh-PE-Ripley" line 635 of 696 --91%-- [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi sh-PE-Ripleysh-PE-Ripley   
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn

real    0m0.45s
user    0m0.06s
sys     0m0.09s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

    [ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion# control: si no hay un archivo .val se cancela el proceso
    [ ! -s $archivo_val ] && echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit/ejecutar_validacionAddress search hit BOTTOM without matching pattern??    # el directorio del archivo cambia según el ambienteP_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>fu
/d/iccol/desarrollo/fuentes>ls PESVNO*
PESVNO-1.CBL                 PESVNOCSVPLUSv06.CBL
PESVNO-20090602.CBL          PESVNOCSVSEGE-V02.CBL
PESVNO-AVV.CBL               PESVNOCSVSEGE-V03.CBL
PESVNO-CV.CBL                PESVNOCSVSEGE-V04.CBL
PESVNO-DIGITO.CBL            PESVNOCSVSEGE.CBL
PESVNO-ECU.CBL               PESVNOCSVSEGE.CBL-bckup
PESVNO-NOCSV.CBL             PESVNOCSVSEGE.CBL-V01
PESVNO-V02.CBL               PESVNOCSVSEGE.int
PESVNO-V03.CBL               PESVNOCSVSEGElag.CBL
PESVNO.CBL                   PESVNOCSVTMX.CBL
PESVNO.CBL-20101014          PESVNOCSVv06.CBL
PESVNO.CBL-lag               PESVNOGJ.CBL
PESVNO0504.CBL               PESVNONEWNOM.CBL
PESVNO64.CBL                 PESVNONW1.CBL
PESVNOCE.CBL                 PESVNOPE.CBL
PESVNOCITI.CBL               PESVNOPEO.CBL
PESVNOconICBTCO.CBL          PESVNOPEO.int
PESVNOCSV_cg.CBL             PESVNOPLUS.CBL
PESVNOCSV-V05.CBL            PESVNOpv.CBL
PESVNOCSV.CBL                PESVNORMB.CBL
PESVNOCSV.CBL-lag            PESVNORMB.CBL-bckup
PESVNOCSV.CBL-ORI            PESVNORMBNW-EHA.CBL
PESVNOCSVBCS_CAL.CBL         PESVNORMBNW.CBL
PESVNOCSVBCS_p.CBL           PESVNORMBNW.CBL-20100813
PESVNOCSVBCS.CBL             PESVNORMBNW.CBL-bckup
PESVNOCSVBCS.int             PESVNORMBNW.CBL-bckupM
PESVNOCSVBCSv06.CBL          PESVNORMBNW.CBL-bk-20100812
PESVNOCSVc.CBL               PESVNOSEGE2.CBL
PESVNOCSVFNG.CBL             PESVNOSGESTDO.CBL
PESVNOCSVFNG.CBL-lag         PESVNOSGESTDO.CBL-lag2
PESVNOCSVPLUS.CBL            PESVNOTEST.CBL
PESVNOCSVPLUS.CBL-lag        PESVNOv09.CBL
PESVNOCSVPLUSc.CBL           PESVNOv10.CBL
/d/iccol/desarrollo/fuentes>ls ^[  /d/iccol/desarrollo/fuentes>ls  PESVNO*ls -PESVNO*lPESVNO* PESVNO*
-rw-rw-r--   1 1368     icdatacr   47036 Sep 19  2007 PESVNO-1.CBL
-rw-rw-r--   1 icjdld   icdatacr   57581 Mar 11  2010 PESVNO-20090602.CBL
-rw-rw-r--   1 1395     icdatacr   47865 Sep 10  2012 PESVNO-AVV.CBL
-rw-rw-r--   1 iccavd   icdatacr   44911 Jul 11  2012 PESVNO-CV.CBL
-rw-rw-r--   1 iccavd   icdatacr   45386 Jul 10  2012 PESVNO-DIGITO.CBL
-rw-rw-r--   1 icfacd   icdatacr   43588 Mar  7  2005 PESVNO-ECU.CBL
-rw-rw-r--   1 icjdld   icdatacr   57587 Mar 11  2010 PESVNO-NOCSV.CBL
-rw-rw-r--   1 icjdld   icdatacr   41114 Mar 11  2010 PESVNO-V02.CBL
-rw-rw-r--   1 icjdld   icdatacr   41902 Mar 11  2010 PESVNO-V03.CBL
-rw-rw-r--   1 1395     icdatacr   54157 Apr  4  2013 PESVNO.CBL
-rw-rw-r--   1 1381     icdatacr   43331 Oct 14  2010 PESVNO.CBL-20101014
-rw-rw-r--   1 icjdld   icdatacr   41902 Mar 11  2010 PESVNO.CBL-lag
-rw-rw-r--   1 icehad   icdatacr   42689 May  5  2010 PESVNO0504.CBL
-rw-rw-r--   1 1395     icdatacr   45379 Jul 12  2012 PESVNO64.CBL
-rw-rw-r--   1 1366     icdatacr   35713 Oct  7  2009 PESVNOCE.CBL
-rw-rw-r--   1 1395     icdatacr   59253 Sep 10  2012 PESVNOCITI.CBL
-rw-rw-r--   1 icjdld   icdatacr   53372 Mar 11  2010 PESVNOconICBTCO.CBL
-rw-rw-r--   1 1395     icdatacr   43503 Jul  9  2012 PESVNOCSV_cg.CBL
-rw-rw-r--   1 iccigd   icdatacr   43051 May  3  2011 PESVNOCSV-V05.CBL
-rw-rw-r--   1 1395     icdatacr   54743 Jun 25  2013 PESVNOCSV.CBL
-rw-rw-r--   1 icjdld   icdatacr   40962 Mar 11  2010 PESVNOCSV.CBL-lag
-rw-rw-r--   1 1366     icdatacr   39435 Jun  9  2008 PESVNOCSV.CBL-ORI
-rw-rw-r--   1 1395     icdatacr  135767 Dec 15  2011 PESVNOCSVBCS_CAL.CBL
-rw-rw-r--   1 1395     icdatacr  145451 Jan 17  2012 PESVNOCSVBCS_p.CBL
-rw-rw-r--   1 1395     icdatacr  207161 May 28  2013 PESVNOCSVBCS.CBL
-rw-rw-r--   1 1395     icdatacr  141824 May 28  2013 PESVNOCSVBCS.int
-rw-rw-r--   1 1395     icdatacr  146988 Mar  4  2013 PESVNOCSVBCSv06.CBL
-rw-rw-r--   1 1395     icdatacr   49725 Jun 25  2013 PESVNOCSVc.CBL
-rw-rw-r--   1 1395     icdatacr   43920 Jul  9  2012 PESVNOCSVFNG.CBL
-rw-rw-r--   1 icjdld   icdatacr   42921 Mar 11  2010 PESVNOCSVFNG.CBL-lag
-rw-rw-r--   1 1395     icdatacr   54855 Sep 24  2013 PESVNOCSVPLUS.CBL
-rw-rw-r--   1 icjdld   icdatacr   40771 Mar 11  2010 PESVNOCSVPLUS.CBL-lag
-rw-rw-r--   1 1395     icdatacr   48311 Jun 25  2013 PESVNOCSVPLUSc.CBL
-rw-rw-r--   1 1395     icdatacr   42753 Jun 11  2013 PESVNOCSVPLUSv06.CBL
-rw-rw-r--   1 1381     icdatacr  287300 Jan 24  2011 PESVNOCSVSEGE-V02.CBL
-rw-rw-r--   1 1381     icdatacr  329808 Feb 24  2011 PESVNOCSVSEGE-V03.CBL
-rw-rw-r--   1 1381     icdatacr  340872 Mar 14  2011 PESVNOCSVSEGE-V04.CBL
-rw-rw-r--   1 1395     icdatacr  361326 Sep 10  2012 PESVNOCSVSEGE.CBL
-rw-rw-r--   1 1381     icdatacr  344103 Mar 16  2011 PESVNOCSVSEGE.CBL-bckup
-rw-rw-r--   1 1381     icdatacr  282678 Nov 19  2010 PESVNOCSVSEGE.CBL-V01
-rw-rw-r--   1 1381     icdatacr  149760 Mar 23  2011 PESVNOCSVSEGE.int
-rw-rw-r--   1 1395     icdatacr  345546 Oct 21  2011 PESVNOCSVSEGElag.CBL
-rw-rw-r--   1 1381     icdatacr  161516 Jun 24  2011 PESVNOCSVTMX.CBL
-rw-rw-r--   1 1395     icdatacr   44191 Jun 11  2013 PESVNOCSVv06.CBL
-rw-rw-r--   1 icjdld   icdatacr   41290 Mar 11  2010 PESVNOGJ.CBL
-rw-rw-r--   1 icjdld   icdatacr   53516 Mar 11  2010 PESVNONEWNOM.CBL
-rw-rw-r--   1 icrmbd   icdatacr  183121 Aug  9  2010 PESVNONW1.CBL
-rw-rw-r--   1 1366     icdatacr   45867 Apr 16  2007 PESVNOPE.CBL
-rw-rw-r--   1 icrmbd   icdatacr   47985 Aug 15  2012 PESVNOPEO.CBL
-rw-rw-r--   1 icrmbd   icdatacr   84480 Aug  6  2012 PESVNOPEO.int
-rw-rw-r--   1 icjdld   icdatacr   57587 Mar 11  2010 PESVNOPLUS.CBL
-rw-rw-r--   1 1395     icdatacr   45379 Aug 14  2012 PESVNOpv.CBL
-rw-rw-r--   1 1381     icdatacr  182955 Aug  8  2010 PESVNORMB.CBL
-rw-rw-r--   1 1381     icdatacr  182116 Aug  8  2010 PESVNORMB.CBL-bckup
-rw-rw-r--   1 icehad   icdatacr  184036 Aug 12  2010 PESVNORMBNW-EHA.CBL
-rw-rw-r--   1 1381     icdatacr  188406 Sep  9  2010 PESVNORMBNW.CBL
-rw-rw-r--   1 1381     icdatacr  187463 Aug 13  2010 PESVNORMBNW.CBL-20100813
-rw-rw-r--   1 1381     icdatacr  184036 Aug 12  2010 PESVNORMBNW.CBL-bckup
-rw-rw-r--   1 1381     icdatacr  184307 Aug 13  2010 PESVNORMBNW.CBL-bckupM
-rw-rw-r--   1 icehad   icdatacr  184036 Aug 12  2010 PESVNORMBNW.CBL-bk-20100812
-rw-rw-r--   1 1381     icdatacr  277169 Oct 27  2010 PESVNOSEGE2.CBL
-rw-rw-r--   1 icjdld   icdatacr   63180 Mar 11  2010 PESVNOSGESTDO.CBL
-rw-rw-r--   1 1381     icdatacr   60693 May  7  2009 PESVNOSGESTDO.CBL-lag2
-rw-rw-r--   1 icrmbd   icdatacr  139052 Aug  7  2010 PESVNOTEST.CBL
-rw-rw-r--   1 1395     icdatacr   47985 Sep  4  2012 PESVNOv09.CBL
-rw-rw-r--   1 1395     icdatacr   49201 Apr  2  2013 PESVNOv10.CBL
/d/iccol/desarrollo/fuentes>clear
/d/iccol/desarrollo/fuentes>cat PESVNO.CBL
      * PESVNOCSV.V.01.0011
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PESVNO.
       AUTHOR. DATACREDITO.
       DATE-WRITTEN. MAYO/2001.
       DATE-COMPILED.
      ******************************************************************
      * PROGRAMA PARA VALIDACION DE CEDULAS, NITS Y CEDULAS DE         *
      * EXTRANJERIA.
      *
      * Programa: PESVNOCSV.CBL   BASE ==> $DATABASE/BDACSV
      *
      * Cliente : Datacredito
      *
      * Version : 09/06/2008 09:08:25 a.m.
      ******************************************************************
      *  Validacion especial tomando el archivo de
      *  Cuentas Sin Validar para poder reportalos en el informe final
      *
      ******************************************************************
REMARK* LAG0002      * PAM372 - SEPARADORES ";" EN INCONSISTENCIAS       
REMARK* L.GOMEZ      * PARA IGUALARLO AL PESVNO                       
REMARK* SEPT. 30/2009* 
REMARK*******************************************************************
REMARK* GJC0003      * CSVCEX - AJUSTE A LA VALIDACION PARA CUENTAS SIN*
REMARK* 2009/12/21   * VALIDAR CON CEDULA DE EXTRANJERIA.              *
REMARK* GRACIELA JIM.*                                                 *
REMARK******************************************************************
REMARK* LAG0004      * REQ550 - AJUSTE A LA VALIDACION PARA CUENTAS SIN*
REMARK* 2010/03/12   * VALIDAR INCLUYENDO VALIDACION DE RANGOS.        *
REMARK* G.DESARROLLO *                                                 *
REMARK******************************************************************
      ******************************************************************
      * GDT0005    | CTAST8 - CAMBIO DEL ICMCHK (MAESTRO DE CUENTAS) A *
      * FEB.09-2010|    FORMATO TIPO 8.                                *
      * GER.DESARR.|                                                   *
      ******************************************************************
      * EHA0006    | MODCED - MODIFICACION PARA EVITAR ERRORES EN LA   *
      * MAY.05-2010|    ESCRITURA DE REGISTROS                         *
      * GER.DESARR.|                                                   *
      ******************************************************************
      * LAG0007    | REQ596 - CORRECCION PARA MANEJO DE RELLENO EN     *
      * OCT.07-2010|    EN TIPOS ID DIFERENTE A 1                      *
      * GER.DESARR.|                                                   *
      ******************************************************************
      * LAG0008    | REQ609 - CORRECCION PARA VALIDACION DE NOMBRE     *
      * OCT.14-2010|    CUANDO TRAE DE BASE ALTERNA                    *
      * GER.DESARR.|                                                   *
      ******************************************************************
      * RMB0009    | R7094A - OPCION DE NO VALIDAR NOMBRE VALIDAR=NO   *
      * AGO-06-2012| R7094B - DESPLEGAR CONTADOR DE FALLECIDOS         *
      * GER.DESARR.| R7094C - SI BLOQUES = 1 NO SACAR SOLO EL APELLIDO *
      *            | R7094D - QUITAR DIGITO DE CHEQUEO SOLO A NITS     *
      ******************************************************************
      * PJV0010    | CQ6271 - LOG DE REGISTROS PROCESADOS.             *
      * SEP-01-2012|                                                   *
      * GER.DESARR.|                                                   *
      ******************************************************************
      * PJV011     | CQ11407 - HACE CONTROL DE IDENTIFICACIONES        *
      * ABR-02-2013| REPETIDAS VALIDAS.                                *
      * GER.DESARR.|                                                   *
      ******************************************************************
      *
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. MICROFOCUS.
       OBJECT-COMPUTER. MICROFOCUS.
       INPUT-OUTPUT SECTION.
           COPY BDIIDIAN.FS.
           COPY BDIIREGI.FS.
           COPY BDIIDAS.FS.
           COPY ICBTCO.FS.
           COPY ICBCLA0001.FS.
           COPY ICBCIU.FS.
CTAST8*    COPY  ICBCHK.FS.                                             GDT0005
CTAST8     COPY  ICBCHK0001.FS.                                         GDT0005
           COPY ICBCRE.FS.
           COPY ICBSUS.FS.
           COPY BDLCLI.FS.
           COPY ICBDIR.FS.
           COPY ICMUNI.FS.
           COPY BDIIALE.FS.
           COPY BDLSTDCIU.FS.
           COPY BDLNEWDIRBOG.FS.
           COPY DIREST.FS.
           COPY NOAMNISTIA21.FS.
           COPY BDACSV.FS.

           SELECT ENTRADA  ASSIGN TO DISK W-ENTRADA
                  ORGANIZATION IS LINE SEQUENTIAL
                  ACCESS MODE  IS SEQUENTIAL.

           SELECT VALIDAS  ASSIGN TO DISK W-VALIDAS
                  ORGANIZATION IS LINE SEQUENTIAL
                  ACCESS MODE  IS SEQUENTIAL.

PJV011     SELECT VALIDAS-REP  ASSIGN TO DISK W-VALIDAS-REP             CQ11407
PJV011            ORGANIZATION IS LINE SEQUENTIAL                       CQ11407
PJV011            ACCESS MODE  IS SEQUENTIAL.                           CQ11407

           SELECT INCONS   ASSIGN TO DISK W-INVALIDAS
                  ORGANIZATION IS LINE SEQUENTIAL
                  ACCESS MODE  IS SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       COPY ICBCHK.FD.
       COPY ICBSUS.FD.
       COPY BDACSV.FD.
       COPY ICBDIR0001.FD.
       COPY BDLSTDCIU.FD.
       COPY DIREST.FD.
       COPY BDLNEWDIRBOG.FD.
       COPY NOAMNISTIA21.FD.
       COPY BDIIDIAN.FD.
       COPY BDIIREGI.FD.
       COPY BDIIDAS.FD.
       COPY ICBTCO001.FD.
       COPY ICBCLA.FD.
       COPY ICBCIU.FD.
       COPY ICBCRE.FD.
       COPY BDLCLI.FD.
       COPY ICMUNI.FD.
       COPY BDIIALE.FD.

       FD  ENTRADA.
       01  REG-ENTRADA.
           03 TIPOID-E                      PIC   9(01).
           03 TIPOID-X-E REDEFINES TIPOID-E PIC   X(01).
           03 NUMID-E                       PIC   9(11).
           03 NUMID-X-E REDEFINES NUMID-E   PIC   X(11).
           03 NOMBRE-E                      PIC   X(45).
           03 FILLER-2-E                    PIC   X(60).

       FD  VALIDAS.
       01  REG-VALIDAS.
           03 TIP-VAL                   PIC 9.
           03 CED-VAL                   PIC 9(11).
           03 NOM-VAL                   PIC X(45).
           03 FEC-EXP-VAL               PIC 9(08).
           03 MUN-EXP-VAL               PIC X(15).
           03 DEP-EXP-VAL               PIC X(15).
           03 VIG-VAL                   PIC X(02).
           03 GENERO-VAL                PIC X(01).
           03 EDAD-VAL                  PIC X(03).
           03 EDAD-RANGO                PIC X(05).
PAM460*    03 ORIGEN-VAL                PIC X.
PAM460     03 FILLER-2-VAL              PIC X(51).

PJV011 FD  VALIDAS-REP.                                                 CQ11407
PJV011 01  REG-VALIDAS-REP.                                             CQ11407
PJV011     03 TIP-VALREP                PIC 9.                          CQ11407
PJV011     03 CED-VALREP                PIC 9(11).                      CQ11407
PJV011     03 NOM-VALREP                PIC X(45).                      CQ11407
PJV011     03 FEC-EXP-VALREP            PIC 9(08).                      CQ11407
PJV011     03 MUN-EXP-VALREP            PIC X(15).                      CQ11407
PJV011     03 DEP-EXP-VALREP            PIC X(15).                      CQ11407
PJV011     03 VIG-VALREP                PIC X(02).                      CQ11407
PJV011     03 GENERO-VALREP             PIC X(01).                      CQ11407
PJV011     03 EDAD-VALREP               PIC X(03).                      CQ11407
PJV011     03 EDAD-RANGO-VALREP         PIC X(05).                      CQ11407
PJV011     03 FILLER-2-VALREP           PIC X(51).                      CQ11407

       FD  INCONS.
       01  REG-INCONS.
           03 TIP-INC                   PIC 9.
PAM372     03 FILLER1                   PIC X VALUE ";".
           03 CED-INC                   PIC 9(11).
PAM372     03 FILLER2                   PIC X VALUE ";".
           03 NOM1-INC                  PIC X(45).
PAM372     03 FILLER3                   PIC X VALUE ";".
           03 NOM2-INC                  PIC X(45).
PAM372     03 FILLER4                   PIC X VALUE ";".
           03 FEC-EXP-INC               PIC 9(08).
PAM372     03 FILLER5                   PIC X VALUE ";".
           03 MUN-EXP-INC               PIC X(15).
PAM372     03 FILLER6                   PIC X VALUE ";".
           03 DEP-EXP-INC               PIC X(15).
PAM372     03 FILLER7                   PIC X VALUE ";".
           03 VIG-INC                   PIC X(02).
PAM372     03 FILLER8                   PIC X VALUE ";".
           03 CODERR-INC                PIC 9(02).
PAM372     03 FILLER9                   PIC X VALUE ";".
           03 FILLER-2-INC              PIC X(60).

      ****************************************************
       WORKING-STORAGE SECTION.
      ***************************************************
CQ6271 COPY LOGPESVNO.WS.                                               PJV0010
       01 W-COMANDO-LINEAS.
          03 FILLER                     PIC X(06) VALUE "wc -l ".
          03 ENTRADA-LINEAS.
             05 FILLER                  PIC X(12) VALUE "$TEMPORALES/".
             05 W-LINEAS-NOM-ENT        PIC X(30) VALUE SPACES.
             05 FILLER                  PIC X(30)
             VALUE " | awk '{ print ($1) }'".
          03 FILLER                     PIC X(01) VALUE LOW-VALUE.
       01 W-COMANDO-SORT.
          03 FILLER                     PIC X(13) VALUE "sort -u ".
          03 ENTRADA-SORT.
             05 FILLER                  PIC X(12) VALUE "$TEMPORALES/".
             05 W-SORT-NOM-ENT          PIC X(30) VALUE SPACES.
          03 FILLER                     PIC X(13) VALUE " -o ".
          03 SALIDA-SORT.
             05 FILLER                  PIC X(12) VALUE "$TEMPORALES/".
             05 W-SORT-NOM-SAL          PIC X(30) VALUE SPACES.
          03 FILLER                     PIC X(01) VALUE LOW-VALUE.
      *--------------------------------------------------------------*
       01  W-ENTRADA.
           03 W-ENT-DIRECTORIO      PIC X(12) VALUE "$TEMPORALES/".
           03 W-ENT-NOMBRE          PIC X(30) VALUE SPACES.
       01  W-VALIDAS.
           03 W-VAL-DIRECTORIO      PIC X(12) VALUE "$TEMPORALES/".
           03 W-VAL-NOMBRE          PIC X(30) VALUE SPACES.
       01  W-INVALIDAS.
           03 W-INVAL-DIRECTORIO    PIC X(12) VALUE "$TEMPORALES/".
           03 W-INVAL-NOMBRE        PIC X(30) VALUE SPACES.
PJV011 01  W-VALIDAS-REP.                                               CQ11407
PJV011     03 W-VAL-DIRECTORIO      PIC X(12) VALUE "$TEMPORALES/".     CQ11407
PJV011     03 W-VAL-NOMBRE-REP      PIC X(30) VALUE SPACES.             CQ11407
           
PJV011 01  W-KEYVAL-GRA.                                                CQ11407
PJV011     03 TIP-KEYVAL            PIC 9(01) VALUE ZEROS.              CQ11407
PJV011     03 NUM-KEYVAL            PIC 9(11) VALUE ZEROS.              CQ11407
PJV011     03 SN-VALREP             PIC X(01) VALUE SPACES.             CQ11407
           
       01  W-PARAMETROS             PIC X(94) VALUE SPACES.
       01  W-TARIFA                 PIC 9(04) VALUE ZEROS.
       01  W-BLOQUES                PIC 9(01) VALUE ZEROS.
       01  SW-BDIIALE               PIC 9(01) VALUE ZEROS.
       01  W-DERECHOS               PIC 9     VALUE ZEROS.
       01  OPEN-DIR                 PIC 9     VALUE ZEROS.
       01  FIN-ENTRADA              PIC 9     VALUE 0.
       01  FINS                     PIC 9     VALUE 0.
       01  LLAVE7                   PIC 9(8)  VALUE ZEROS.
       01  LLAVE7-R  REDEFINES LLAVE7.
           03 LLAVE7-1D             PIC 9.
           03 LLAVE7-FILLER         PIC 9(7).
       01  TOPE-INI-LLAVE7          PIC 9(8)  VALUE 20000000.
       01  FECHA-PROC.
           03 ANO-HOY.
              05 SIG-PROC           PIC X(2).
              05 ANO-PROC           PIC X(2).
           03 MES-PROC              PIC X(2).
           03 DIA-PROC              PIC X(2).
       01  FECHA-PROC-R  REDEFINES FECHA-PROC
                                    PIC X(8).
       01  FECHA-AUX.
           03 DIA-AUX                   PIC 9(2).
           03 MES-AUX                   PIC 9(2).
           03 ANO-AUX                   PIC 9(2).
       01  FECHA-AUX-R  REDEFINES FECHA-AUX
                                        PIC 9(6).
       01  TIEMPO-SIS.
           03 HORA-SIS                  PIC 9(02).
           03 MIN-SIS                   PIC 9(02).
           03 FILLER                    PIC 9(04).
       01  TIEMPO-SIS-R  REDEFINES TIEMPO-SIS
                                        PIC 9(08).
       01  TIEMPO-W                     PIC 9(8).
       01  W-CONTADORES.
           03  W-CONT-TIPO-5            PIC 9(06) VALUE ZEROS.
           03  W-CONT-TIPO-6            PIC 9(06) VALUE ZEROS.
           03  W-CONT-TIPO-7            PIC 9(06) VALUE ZEROS.
CQ6271     03  W-CONT-TIPO-5-PJ         PIC 9(06) VALUE ZEROS.          PJV0010
PJV011     03  W-CONT-TIPO-5-REP        PIC 9(06) VALUE ZEROS.          CQ11407
      *
       01  SUSCRIPTOR-AUX               PIC 9(06).
       01  REG-LEIDOS                   PIC 9(07) VALUE ZEROS.
R7094B 01  CONT-FALLECIDOS              PIC 9(07) VALUE ZEROS.          RMB0009
       01  REG-CORRECTOS                PIC 9(07) VALUE ZEROS.
PJV011 01  REG-CORRECTOS-R              PIC 9(07) VALUE ZEROS.          CQ11407
       01  NO-COINCIDE-DIAN             PIC 9(07) VALUE ZEROS.
       01  NO-COINCIDE-REGIS            PIC 9(07) VALUE ZEROS.
       01  NO-EXISTE-DIAN               PIC 9(07) VALUE ZEROS.
       01  NO-EXISTE-REGIS              PIC 9(07) VALUE ZEROS.
       01  SI-EXISTE-CSV                PIC 9(07) VALUE ZEROS.
       01  TIPO-ID-INVALIDO             PIC 9(07) VALUE ZEROS.
       01  NIT-BUENO                    PIC 9.
       01  NUM-ID-W                     PIC 9(11).
      *------------------------------------------------------------------*
       COPY  ICFILE.WS.
       COPY  BDIIALE.WS.
       COPY  DEPTOS.WS.
       COPY  BDIIVIDE.WS.
       COPY  BDLDIR.WS.
       COPY  LEEMAESTROS.WS.
      *------------------------------------------------------------------*
       01  CODIGO-ERROR                 PIC 9(02) VALUE ZERO.
       01  PRIMER-APELLIDO              PIC X(16) VALUE SPACES.
       01  SEGUNDO-APELLIDO             PIC X(16) VALUE SPACES.
       01  PRIMER-NOMBRE                PIC X(16) VALUE SPACES.
       01  SEGUNDO-NOMBRE               PIC X(16) VALUE SPACES.
       01  NOMBRE-DANE.
           03 PR-APELLIDO-ABD05         PIC X(15).
           03 NOMBRES-ABD05             PIC X(30).
       01  NOMBRE-DANE-AUX              PIC X(45).
       01  NOM-VAL-AUX.
           03 PR-APELLIDO-AUX           PIC X(15).
           03 SG-APELLIDO-AUX           PIC X(15).
           03 NOMBRE-AUX                PIC X(15).
       01  CONTADORES.
           03 JL                        PIC 9(02) VALUE ZERO.
           03 I                         PIC 9(02) VALUE ZERO.
           03 SW-ERROR                  PIC 9     VALUE ZERO.
           03 J                         PIC 9(02) VALUE ZERO.
           03 BLOC-IGUAL                PIC 9(02) VALUE ZERO.
           03 BLOQUES                   PIC 9(02) VALUE ZERO.
           03 ENCONTRADO                PIC 9     VALUE ZERO.
           03 SUP                       PIC 9(02) VALUE ZERO.
           03 INF                       PIC 9(02) VALUE ZERO.
           03 JJ                        PIC 9(02) VALUE ZERO.
      *------------------------------------------------------------------*
       01  W-VARIABLES.
           03 W-ANO-ACTUAL                PIC 9(04) VALUE ZEROS.
           03 W-EDAD-CEDULA               PIC 9(03) VALUE ZEROS.
           03 W-FEC-EXPE                  PIC 9(08) VALUE ZEROS.
           03 W-FEC-EXPE-R REDEFINES W-FEC-EXPE.
              05 W-ANO-EXPE               PIC 9(04).
              05 W-MES-EXPE               PIC 9(02).
              05 W-DIA-EXPE               PIC 9(02).
           03 WS-EDAD                     PIC 9(03).
      *------------------------------------------------------------------*
       01  VEC-MAESTRO.
           03 LETRA-MAESTRO             PIC X  OCCURS 65 TIMES.
       01  VEC-DANE.
           03 LETRA-DANE                PIC X  OCCURS 65 TIMES.
       01  VEC-BLOQUES.
           03 LIM-INF                   PIC 9(02)  OCCURS 44 TIMES.
           03 LIM-SUP                   PIC 9(02)  OCCURS 44 TIMES.
       01  CONTADORES-COMP-NOMBRE.
           03 K                         PIC 9(04) VALUE ZERO.
           03 NOMBRE-BIEN               PIC 9     VALUE ZERO.
       01  VEC-MAESTRO-UNO.
           03 LETRA-MAESTRO-UNO         PIC X  OCCURS 45 TIMES.
       01  VEC-DANE-UNO.
           03 LETRA-DANE-UNO            PIC X  OCCURS 45 TIMES.
       01  VEC-BLOQUES-UNO.
           03 LIM-INF-UNO               PIC 99  OCCURS 44 TIMES.
           03 LIM-SUP-UNO               PIC 99  OCCURS 44 TIMES.
       01  TITULO-1.
           03 FILLER                   PIC X(55) VALUE SPACES.
           03 FILLER                   PIC X(21) VALUE
             "D A T A C R E D I T O".
           03 FILLER                   PIC X(33) VALUE SPACES.
           03 DIA-T1                   PIC X(02).
           03 FILLER                   PIC X     VALUE "/".
           03 MES-T1                   PIC X(02).
           03 FILLER                   PIC X     VALUE "/".
           03 SIG-T1                   PIC X(02).
           03 ANO-T1                   PIC X(02).
           03 FILLER                   PIC X(13) VALUE SPACES.
       01  TITULO-2.
           03 FILLER                   PIC X(10) VALUE " PESVNOCSV".
           03 FILLER                   PIC X(41) VALUE SPACES.
           03 FILLER                   PIC X(37) VALUE
             "ESTADISTICAS DE VALIDACION DE CEDULAS".
           03 FILLER                   PIC X(24) VALUE SPACES.
           03 HORA-T2                  PIC 9(02).
           03 FILLER                   PIC X     VALUE ":".
           03 MIN-T2                   PIC 9(02).
           03 FILLER                   PIC X(06) VALUE SPACES.
           03 FILLER                   PIC X(06) VALUE "SUSC: ".
           03 SUSCRIPTOR-T2            PIC 9(06).
       01  RAYAS                       PIC X(132) VALUE ALL "-".
       01  LINEA-1.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(32) VALUE
             "REGISTROS LEIDOS:               ".
           03 REG-LEIDOS-L1            PIC ZZ,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-2.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "REGISTROS CORRECTOS:             ".
           03 REG-CORRECTOS-L2         PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-3.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "NO COINCIDEN CON DIAN O DAS:     ".
           03 NO-COINCIDE-DIAN-L3      PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-4.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "NO COINCIDEN CON REGISTARDURIA:  ".
           03 NO-COINCIDE-REGIS-L4     PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-5.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "NO EXISTEN EN DIAN O DAS:        ".
           03 NO-EXISTE-DIAN-L5        PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-6.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "NO EXISTEN EN REGISTRADURIA:     ".
           03 NO-EXISTE-REGIS-L6       PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  LINEA-7.
           03 FILLER                   PIC X(45) VALUE SPACES.
           03 FILLER                   PIC X(33) VALUE
             "TIPO IDENTIFICACION INVALIDO:    ".
           03 TIPO-ID-INVALIDO-L7      PIC Z,ZZZ,ZZ9.
           03 FILLER                   PIC X(45) VALUE SPACES.
       01  FECHA-2000                  PIC 9(8).
       01  FECHA-2000-R  REDEFINES FECHA-2000.
           03 ANO-2000-R               PIC 9(4).
           03 MES-2000-R               PIC 9(2).
           03 DIA-2000-R               PIC 9(2).
      *------------------------------------------------------------------*
       01  HACER-MATCH                 PIC  9(01).
       01  CADENA-ENTRA                PIC  X(60).
       01  CADENA-SALE                 PIC  X(60).
       01  IND-ALFABETICO              PIC  X(01).
           88 SI-ALFABETICO           VALUE " " "A" "B" "C" "D" "E" "F"
                                            "G" "H" "I" "J" "K" "L" "M"
                                            "N" "/" "O" "P" "Q" "R" "S"
                                            "T" "U" "V" "W" "X" "Y" "Z"
                                            "Ñ".
CQ6271 LINKAGE SECTION.                                                 PJV0010
CQ6271 COPY LOGPESVNO.LKG.                                              PJV0010
      *                                     
      *=================================================================
      $SET CONSTANT HACERMATCH"SI"
      $SET CONSTANT AMNISTIA21"SI"
      *=================================================================

       PROCEDURE DIVISION.
      ******************************************************************
      *100-PROGRAMA-PRINCIPAL.
      *RUTINA PRINCIPAL
      *VALIDA EL CODIGO DEL SUSCRIPTOR DEL ARCHIVO DE ENTRADA
      *VALIDA LA CLAVE CON QUE SE GRABARAN REGISTROS EN EL ICBTCO
      ******************************************************************
       100-PROGRAMA-PRINCIPAL.
           PERFORM 150-ABRIR-ARCHIVOS
           READ ENTRADA
                AT END
                      MOVE 1 TO FIN-ENTRADA
                NOT AT END
                      INSPECT NUMID-X-E REPLACING ALL " " BY "0"
                      INSPECT TIPOID-X-E REPLACING ALL "0" BY "1"
           END-READ
R7094A     IF NOMBRE-E = "VALIDAR=NO" AND FIN-ENTRADA = 0               RMB0009
R7094A        MOVE 0 TO W-BLOQUES                                       RMB0009
R7094A        DISPLAY "Registro  control==> 000001 (VALIDAR=NO)"        RMB0009
R7094A        MOVE 0 TO W-BLOQUES                                       RMB0009
R7094A        READ ENTRADA                                              RMB0009
R7094A          AT END                                                  RMB0009
R7094A                MOVE 1 TO FIN-ENTRADA                             RMB0009
R7094A          NOT AT END                                              RMB0009
R7094A                INSPECT NUMID-X-E REPLACING ALL " " BY "0"        RMB0009
R7094A                INSPECT TIPOID-X-E REPLACING ALL "0" BY "1"       RMB0009
R7094A        END-READ                                                  RMB0009
R7094A     ELSE                                                         RMB0009
R7094A        DISPLAY "Registro  control==> 000000 (VALIDAR=NO)"        RMB0009
R7094A     END-IF.                                                      RMB0009
           CLOSE CLAVE ABD14.

           MOVE FUNCTION CURRENT-DATE TO FECHA-PROC-R
           MOVE DIA-PROC TO DIA-AUX
           MOVE MES-PROC TO MES-AUX
           MOVE ANO-PROC TO ANO-AUX
           MOVE ANO-HOY  TO W-ANO-ACTUAL

           PERFORM 400-VALIDAR UNTIL FIN-ENTRADA = 1.

           IF W-CONT-TIPO-5 >  ZEROS  OR
              W-CONT-TIPO-6 >  ZEROS  OR
              W-CONT-TIPO-7 >  ZEROS
            DISPLAY "Registros Tipo 5           ==> " W-CONT-TIPO-5
            DISPLAY "Registros Tipo 6           ==> " W-CONT-TIPO-6
            DISPLAY "Registros Tipo 7           ==> " W-CONT-TIPO-7
PJV011      DISPLAY "Registros Tipo 5 repetidos ==> " W-CONT-TIPO-5-REP CQ11407
      *        DISPLAY "*-----------------------------------*"
      *        DISPLAY "Registros validados en BDACSV:" SI-EXISTE-CSV
      *        DISPLAY "*------------------------------------*"
           END-IF
           PERFORM 900-CERRAR-ARCHIVOS
CQ6271     MOVE "V"               TO TIPPRO-LOGPESVNO-WK                PJV0010
CQ6271     MOVE "PESVNO"          TO PROGRAM-LOGPESVNO-WK               PJV0010
CQ6271     PERFORM 1000-UPDATE-LOGPESVNO                                PJV0010
           STOP RUN.


      ******************************************************************
      *150-ABRIR-ARCHIVOS.
      *SE ABRE CADA UNO DE LOS ARCHIVOS QUE REQUIERE EL PROGRAMA PARA SU
      *EJECUCION: ICDIAN,CEDULAS,REG01, REG02,ICDAS,ICBTCO,ICBCLA,ICBCIU
      *ICT40D.DAT,DCVAL,DCINIC,ICMUNI,ICI40N.PRN
      *PREPARA EL LA LLAVE DEL ARCHIVO ICBTCO PARA IDENTIFICAR CON QUE
      *LLAVE MAYOR QUE 20000000 INICIA LA ESCRITURA DEL MISMO
      ******************************************************************
       150-ABRIR-ARCHIVOS.
           OPEN INPUT BDIIREGI.
      *    DISPLAY "*-------------------------------------------------*"
      *    DISPLAY "|  PROCESO VALIDACION USANDO CUENTAS SIN VALIDAR  |"
      *    DISPLAY "*-------------------------------------------------*"
           DISPLAY "!!........EL ORDEN DE LOS PARAMETROS ES ........!!"
MODBD2     DISPLAY "!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!"FAC0011
           ACCEPT W-PARAMETROS   FROM COMMAND-LINE
           UNSTRING W-PARAMETROS DELIMITED BY SPACES INTO
                                                     W-ENT-NOMBRE,
                                                     W-VAL-NOMBRE,
                                                     W-INVAL-NOMBRE,
                                                     W-TARIFA,
                                                     W-BLOQUES,
                                                     W-DERECHOS
           END-UNSTRING
           IF W-TARIFA       = ZEROS  OR
              W-ENT-NOMBRE   = SPACES OR
              W-VAL-NOMBRE   = SPACES OR
              W-INVAL-NOMBRE = SPACES OR
R7094A*       (W-BLOQUES < 0 OR > 4)                                    RMB0009
R7094A         W-BLOQUES > 4                                            RMB0009
                 DISPLAY "!!!!!!    FALTA ALGUN PARAMETRO  !!!!!!! "
                 STOP RUN
           END-IF
R7094A     IF W-BLOQUES = 0                                             RMB0009
R7094A        DISPLAY "!!..EJECUCION SIN VALIDAR NOMBRES       .....!!" RMB0009
R7094A     END-IF                                                       RMB0009

PJV011     INITIALIZE W-VAL-NOMBRE-REP                                  CQ11407
PJV011     STRING W-VAL-NOMBRE DELIMITED BY "."                         CQ11407
PJV011            ".vre"       DELIMITED BY SIZE                        CQ11407
PJV011        INTO W-VAL-NOMBRE-REP                                     CQ11407
PJV011     END-STRING                                                   CQ11407

           MOVE W-ENT-NOMBRE            TO W-SORT-NOM-ENT

           MOVE W-ENT-NOMBRE            TO W-SORT-NOM-ENT
                                           W-SORT-NOM-SAL
                                           W-LINEAS-NOM-ENT
      *    DISPLAY "============================================"
           DISPLAY "REGISTROS RECIBIDOS ORIGINALMENTE:"
           CALL "SYSTEM" USING W-COMANDO-LINEAS
      *    DISPLAY " "
           DISPLAY "ARCHIVO: " W-LINEAS-NOM-ENT
      *    DISPLAY " "
           CALL "SYSTEM" USING W-COMANDO-SORT
           IF RETURN-CODE <> 0
              DISPLAY "ERROR ORDENANDO UNICOS " W-ENT-NOMBRE
              STOP RUN
           END-IF
           OPEN INPUT  ENTRADA
                       BDIIDIAN
                       BDIIDAS
                       BDIIALE
                       MUNICIPIOS
                       CLAVE
                       ABD14
XXXXXX*    OPEN I-O    SECUENCIAL
XXXXXX     OPEN INPUT  SECUENCIAL
           OPEN OUTPUT VALIDAS
                       INCONS
PJV011                 VALIDAS-REP                                      CQ11407
           MOVE 29999999 TO LLAVE-SEC
           START SECUENCIAL KEY < LLAVE-SEC INVALID KEY
                 DISPLAY " ERROR EN START DE ICBTCO  " LLAVE-SEC
                 MOVE 1 TO FINS
           END-START
           IF FINS = 1
              MOVE TOPE-INI-LLAVE7 TO LLAVE7
           ELSE
              READ SECUENCIAL PREVIOUS AT END
                   DISPLAY " ERROR LEYENDO REGISTRO PREVIO DE ICBTCO  "
                           LLAVE-SEC
                   MOVE 1 TO FINS
              END-READ
              IF FINS = 1
                 MOVE TOPE-INI-LLAVE7 TO LLAVE7
              ELSE
                 MOVE LLAVE-SEC TO LLAVE7
                 IF LLAVE7-1D NOT = 2
                    MOVE 2     TO LLAVE7-1D
                    MOVE ZEROS TO LLAVE7-FILLER
                 END-IF
              END-IF
           END-IF.

      *******************************************************************
      *400-VALIDAR
      * DEPENDIENDO DEL TIPO DE IDENTIFICACION LEIDO EN EL ARCHIVO DE EN-
      * TRADA LLAMA A LA CORRESPONDIENTE RUTINA DE VALIDACION (CEDULA,
      * NIT O DAS)
      * ACUMULA EN CONTADORES DEPENDIENDO DEL RESULTADO DE LA VALIDACION
      * LEE SECUENCIALMENTE EL ARCHIVO DE ENTRADA
      *******************************************************************
       400-VALIDAR.
           ADD  1 TO REG-LEIDOS.
           MOVE 0 TO SW-ERROR CODIGO-ERROR CODERR-INC
           INITIALIZE REG-INCONS REG-VALIDAS
           MOVE ";" TO FILLER1 FILLER2 FILLER3 FILLER4 FILLER5
                       FILLER6 FILLER7 FILLER8 FILLER9
           MOVE FILLER-2-E TO FILLER-2-VAL
           MOVE FILLER-2-E TO FILLER-2-INC
           IF TIPOID-E < 1 OR > 4
              MOVE 05 TO CODIGO-ERROR CODERR-INC
              MOVE 1  TO SW-ERROR
              PERFORM 512-CREE-REGISTRO
              WRITE REG-INCONS
              ADD  1  TO TIPO-ID-INVALIDO
           ELSE
              MOVE  TIPOID-E  TO  TIP-IDE-BDIIVIDE
              MOVE  NUMID-E   TO  NUM-IDE-BDIIVIDE
                                  NUM-ID-W
              MOVE  NOMBRE-E  TO  NOMBRE-BDIIVIDE
R7094A*       MOVE    1       TO  SW-VERIFNOM-BDIIVIDE                  RMB0009
R7094A*                           SW-DIGCHEQUEO-BDIIVIDE                RMB0009
R7094A        IF W-BLOQUES > 0                                          RMB0009
R7094A           MOVE    1       TO  SW-VERIFNOM-BDIIVIDE               RMB0009
R7094A        END-IF                                                    RMB0009
R7094D        IF TIPOID-E = 2 OR 3                                      RMB0009
R7094D           MOVE 1 TO SW-DIGCHEQUEO-BDIIVIDE                       RMB0009
R7094D        END-IF                                                    RMB0009
              MOVE  W-BLOQUES TO  NUM-BLOQUES-BDIIVIDE
              PERFORM 80100-VALIDAR-IDENTIFICACION
              MOVE  TIP-IDE-BDIIVIDE TO TIPOID-E
              MOVE  NUM-IDE-BDIIVIDE TO NUMID-E
              INITIALIZE REG-VALIDAS REG-INCONS
REQ596        MOVE FILLER-2-E TO FILLER-2-VAL                           LAG0007
REQ596        MOVE FILLER-2-E TO FILLER-2-INC                           LAG0007
              MOVE ";" TO FILLER1 FILLER2 FILLER3 FILLER4 FILLER5
                       FILLER6 FILLER7 FILLER8 FILLER9
              IF SW-ID-BDIIVIDE = 1
                 IF TIPOID-E <> 1
CSVCEX             MOVE  ZEROS         TO  HACER-MATCH                  GJC0003
MODCED             MOVE 0 TO IDE-TIPO-BDAMATCH                          EHA0006
CSVCEX             PERFORM  513-VALIDA-EN-CSV                           GJC0003
CSVCEX             IF  IDE-TIPO-BDAMATCH  =  0                          GJC0003
CSVCEX               MOVE 03           TO  CODIGO-ERROR CODERR-INC      GJC0003
CSVCEX               MOVE  1           TO SW-ERROR                      GJC0003
CSVCEX               PERFORM 512-CREE-REGISTRO                          GJC0003
CSVCEX               WRITE REG-INCONS                                   GJC0003
CSVCEX               ADD   1           TO  NO-EXISTE-DIAN               GJC0003
CSVCEX             END-IF                                               GJC0003
                 ELSE
                    MOVE  ZEROS TO  HACER-MATCH
MODCED              MOVE 0 TO IDE-TIPO-BDAMATCH                         EHA0006
                    PERFORM 513-VALIDA-EN-CSV
                    IF IDE-TIPO-BDAMATCH = 0
                       MOVE 04 TO CODIGO-ERROR CODERR-INC
                       MOVE TIPOID-E TO TIP-INC
                       ADD  1  TO NO-EXISTE-REGIS
                       MOVE 1  TO SW-ERROR
                       PERFORM 510-ESCRIBIR-INCONS
                    END-IF
                 END-IF
              ELSE
                 IF SW-NOMBRES-BDIIVIDE = 1
                    IF TIPOID-E <> 1
                       MOVE 01 TO CODIGO-ERROR CODERR-INC
                       MOVE  1 TO SW-ERROR
                       PERFORM 512-CREE-REGISTRO
                       WRITE REG-INCONS
                       ADD 1 TO NO-COINCIDE-DIAN
                       IF TIPOID-E = 4
                          MOVE NACIO-BDIIDAS TO MUN-EXP-INC
                       END-IF
                    ELSE
                       PERFORM 810-BUSCAR-MUNICIPIO
                       MOVE TIPOID-E TO TIP-VAL TIP-INC
                       MOVE NUMID-E  TO CED-VAL CED-INC
                       MOVE FECHA-EXP-BDIIREGI TO FECHA-2000
                       IF ANO-2000-R > 51
                          ADD 1900 TO ANO-2000-R
                       ELSE
                          ADD 2000 TO ANO-2000-R
                       END-IF
                       MOVE IND-SEXO-BDIIREGI TO GENERO-VAL
                       PERFORM 505-RANGO-EDADES
                       MOVE FECHA-2000 TO FEC-EXP-VAL
                                          FEC-EXP-INC
                       IF ESTADO-VIG-BDIIREGI = 12 OR = 27
                          MOVE "00"        TO VIG-VAL VIG-INC
                       ELSE
                          MOVE ESTADO-VIG-BDIIREGI TO VIG-VAL
                                                      VIG-INC
                       END-IF
                       MOVE   02 TO CODIGO-ERROR CODERR-INC
                       MOVE 1 TO SW-ERROR
                       PERFORM 510-ESCRIBIR-INCONS
                       ADD 1 TO NO-COINCIDE-REGIS
                    END-IF
                 ELSE
R7094C*             IF W-BLOQUES > 1 OR TIPOID-E <> 1                   RMB0009
R7094C*                MOVE NOM-VAL-BDIIVIDE         TO NOM-VAL         RMB0009
R7094C*             ELSE                                                RMB0009
R7094C*                MOVE PRIMER-APELLIDO-BDIIVIDE TO NOM-VAL         RMB0009
R7094C*             END-IF                                              RMB0009
R7094C              MOVE NOM-VAL-BDIIVIDE         TO NOM-VAL            RMB0009
                    INITIALIZE LLAVE-BDIIALE
                    MOVE  TIPOID-E TO TIP-IDE-BDIIALE
                    MOVE  NUMID-E  TO NUM-IDE-BDIIALE
                    MOVE  990003   TO FUENTE-BDIIALE
                    START BDIIALE KEY NOT < LLAVE-BDIIALE
                          INVALID KEY MOVE 1 TO SW-BDIIALE
                      NOT INVALID KEY MOVE 0 TO SW-BDIIALE
                          READ BDIIALE NEXT RECORD
                               AT END MOVE 1 TO SW-BDIIALE
                          END-READ
                    END-START
                    PERFORM UNTIL SW-BDIIALE = 1 OR
                            TIPOID-E <> TIP-IDE-BDIIALE OR
                            NUMID-E <> NUM-IDE-BDIIALE
                            IF FUENTE-BDIIALE = 990003 AND
                               FEC-NOV-BDIIALE <= FECHA-PROC-R AND
                               FEC-VEN-BDIIALE >= FECHA-PROC-R AND
                               BLOQUEO-BDIIALE = 0
                               MOVE 1 TO SW-BDIIALE
                            END-IF
                            IF SW-BDIIALE = 0
                               READ BDIIALE NEXT RECORD
                                    AT END MOVE 1 TO SW-BDIIALE
                               END-READ
                            END-IF
                    END-PERFORM
                    IF TIPOID-E = 1
                       IF ESTADO-VIG-BDIIREGI = 12 AND
                          W-DERECHOS = 1
                          MOVE  07   TO  CODIGO-ERROR CODERR-INC
                          MOVE   1   TO  SW-ERROR
                          MOVE "00"  TO  VIG-INC
                          PERFORM 510-ESCRIBIR-INCONS
                        ELSE
                           IF ESTADO-VIG-BDIIREGI = 21
                              MOVE  06  TO CODIGO-ERROR CODERR-INC
                              MOVE   1  TO SW-ERROR
                              MOVE "21" TO VIG-INC
                              PERFORM 510-ESCRIBIR-INCONS
                              ADD   1   TO NO-COINCIDE-REGIS
R7094B                        ADD   1   TO CONT-FALLECIDOS              RMB0009
                           ELSE
                              PERFORM 810-BUSCAR-MUNICIPIO
                              MOVE TIPOID-E TO TIP-VAL TIP-INC
                              MOVE NUMID-E  TO CED-VAL CED-INC
                              MOVE FECHA-EXP-BDIIREGI TO FECHA-2000
                              IF ANO-2000-R > 51
                                 ADD 1900 TO ANO-2000-R
                              ELSE
                                 ADD 2000 TO ANO-2000-R
                              END-IF
                              MOVE FECHA-2000 TO FEC-EXP-VAL
                                                 FEC-EXP-INC
                              IF ESTADO-VIG-BDIIREGI = 12 OR = 27
                                 MOVE "00" TO VIG-VAL VIG-INC
                              ELSE
                                 MOVE ESTADO-VIG-BDIIREGI TO VIG-VAL
                                                             VIG-INC
                              END-IF
                              MOVE IND-SEXO-BDIIREGI TO GENERO-VAL
                              PERFORM 505-RANGO-EDADES
PAM460*                       IF ORIGEN-VAL = SPACES    
PAM460*                          MOVE   "O"      TO ORIGEN-VAL
PAM460*                       END-IF
PJV011                        PERFORM 301-GRABA-LOS-VALIDOS             CQ11407
                           END-IF
                        END-IF
                    ELSE
                       IF TIPOID-E = 4
                          MOVE NACIO-BDIIDAS   TO MUN-EXP-VAL
                          MOVE ZEROS           TO VIG-VAL
                       END-IF
                       MOVE NOM-VAL-BDIIVIDE TO NOM-VAL
                       MOVE TIPOID-E         TO TIP-VAL TIP-INC
                       MOVE NUMID-E          TO CED-VAL CED-INC
PAM460*                IF ORIGEN-VAL = SPACES
PAM460*                   MOVE    "O"        TO ORIGEN-VAL
PAM460*                END-IF
PJV011                 PERFORM 301-GRABA-LOS-VALIDOS                    CQ11407
                    END-IF
                 END-IF
              END-IF
           END-IF
           IF CODIGO-ERROR = 01 OR 02 OR 06 OR 07
              ADD  1 TO W-CONT-TIPO-6
           ELSE
              IF CODIGO-ERROR = 03 OR 04 OR 05
                 ADD 1  TO W-CONT-TIPO-7
              ELSE
PJV011           IF SN-VALREP = "S"                                     CQ11407
PJV011              ADD 1  TO W-CONT-TIPO-5-REP                         CQ11407
PJV011           ELSE                                                   CQ11407
                    ADD 1  TO W-CONT-TIPO-5
PJV011           END-IF                                                 CQ11407
CQ6271           IF TIPOID-E = 2 OR 3                                   PJV0010
CQ6271              ADD 1 TO W-CONT-TIPO-5-PJ                           PJV0010
CQ6271           END-IF                                                 PJV0010
              END-IF
           END-IF
           READ ENTRADA
                AT END
                      MOVE 1 TO FIN-ENTRADA
                NOT AT END
                      INSPECT  NUMID-X-E REPLACING ALL " " BY "0"
                      INSPECT TIPOID-X-E REPLACING ALL "0" BY "1"
           END-READ.

PJV011 300-GRABA-VALREP.                                                CQ11407
PJV011     INITIALIZE REG-VALIDAS-REP                                   CQ11407
PJV011     WRITE REG-VALIDAS-REP FROM REG-VALIDAS                       CQ11407
PJV011     MOVE TIP-VAL TO TIP-KEYVAL                                   CQ11407
PJV011     MOVE CED-VAL TO NUM-KEYVAL                                   CQ11407
PJV011     ADD 1 TO REG-CORRECTOS-R  .                                  CQ11407
                                                                               
PJV011 301-GRABA-LOS-VALIDOS.                                           CQ11407
PJV011     MOVE "N" TO SN-VALREP                                        CQ11407
PJV011     IF TIP-KEYVAL = TIPOID-E AND                                 CQ11407
PJV011        NUM-KEYVAL = NUMID-E                                      CQ11407
PJV011        MOVE "S" TO SN-VALREP                                     CQ11407
PJV011        PERFORM 300-GRABA-VALREP                                  CQ11407
PJV011     ELSE                                                         CQ11407
PJV011        WRITE REG-VALIDAS                                         CQ11407
PJV011        MOVE TIP-VAL TO TIP-KEYVAL                                CQ11407
PJV011        MOVE CED-VAL TO NUM-KEYVAL                                CQ11407
PJV011        ADD 1 TO REG-CORRECTOS                                    CQ11407
PJV011     END-IF.                                                      CQ11407


       505-RANGO-EDADES.
      *--------------------------------------------------*
      *505-RANGO-EDADES.
      *  RANGO MUJERES: 20'000.001 A 70'000.000
      *  RANGO HOMBRES:          1 A 20'000.000
      *        MAYOR  : > 70'000.000 < 1000'000.000 (NUIPS)
      *--------------------------------------------------*
           MOVE FEC-EXP-VAL        TO  W-FEC-EXPE
           MOVE ZEROS              TO  W-EDAD-CEDULA
           IF W-ANO-EXPE >= 1975
              COMPUTE W-EDAD-CEDULA =
               ((W-ANO-ACTUAL - W-ANO-EXPE) + 18)
           ELSE
              COMPUTE W-EDAD-CEDULA =
               ((W-ANO-ACTUAL - W-ANO-EXPE) + 21)
           END-IF
           MOVE  W-EDAD-CEDULA    TO  EDAD-VAL WS-EDAD
           MOVE  FILLER-2-E TO FILLER-2-VAL FILLER-2-INC.
                 EVALUATE WS-EDAD
                    WHEN 18 THRU 21
                       MOVE "18-21" TO EDAD-RANGO
                    WHEN 22 THRU 28
                       MOVE "22-28" TO EDAD-RANGO
                    WHEN 29 THRU 35
                       MOVE "29-35" TO EDAD-RANGO
                    WHEN 36 THRU 45
                       MOVE "36-45" TO EDAD-RANGO
                    WHEN 46 THRU 55
                       MOVE "46-55" TO EDAD-RANGO
                    WHEN 56 THRU 65
                       MOVE "56-65" TO EDAD-RANGO
                    WHEN 66 THRU 999
                       MOVE "66+  " TO EDAD-RANGO
                    WHEN ANY
                       MOVE " N/A " TO EDAD-RANGO
                 END-EVALUATE.
      ****************************************************************
      *510-ESCRIBIR-INCONS.
      * BUSCA ERROR
      * CREAR REGISTRO EN EL ARCHIVO DE INCONSISTENCIAS
      ****************************************************************
       510-ESCRIBIR-INCONS.
           IF CODIGO-ERROR = 02 AND SW-ERROR = 1
              MOVE TIPOID-E TO TIP-INC.
           IF SW-ERROR = 1
               PERFORM 512-CREE-REGISTRO
               WRITE REG-INCONS.

      **************************************************************
      *512-CREE-REGISTRO.
      * ARMA EL REGISTRO DE INCONSISTENCIAS DEL ARCHIVO DCINC
      **************************************************************
       512-CREE-REGISTRO.
           MOVE TIPOID-E TO TIP-INC
           MOVE NUMID-E  TO CED-INC                                     FAC0019
           MOVE NOMBRE-E TO NOM1-INC
           IF CODIGO-ERROR = 02 OR 01 OR 06 OR 07
              MOVE NOM-VAL-BDIIVIDE TO NOM2-INC
           ELSE
              MOVE SPACES      TO NOM2-INC
                                  MUN-EXP-INC
                                  DEP-EXP-INC
                                  VIG-INC
              MOVE ZEROS       TO FEC-EXP-INC
              MOVE FILLER-2-E  TO FILLER-2-INC
           END-IF.

      **************************************************************
      *513-VALIDA-EN-CSV.
      *    VALIDA SI LA IDENTIFICACION ESTA EL LA BASE DE DATOS
      *    ALTERNA
      **************************************************************
       513-VALIDA-EN-CSV.
REQ550*    hace validacion de tipo de identificacion 
REQ550     MOVE  TIPOID-E  TO  TIP-IDE-BDIIVIDE
REQ550     MOVE  NUMID-E   TO  NUM-IDE-BDIIVIDE
REQ550     PERFORM 80400-VALIDAR-TIPO-ID
REQ550     IF SW-TID-BDIIVIDE = 0
           IF HACER-MATCH = ZEROS                               
              IF OPEN-DIR = ZEROS
                 OPEN INPUT MAESTRO-DIRECC
                 OPEN INPUT BDLCLI
                 OPEN INPUT SUSCRIPTOR
                 OPEN INPUT MAESTRO-CREDIT
                 OPEN INPUT MAESTRO-CHECK
                 PERFORM 06000-U-CARGAR-TABLA-DIRESTAN
                 MOVE 1 TO OPEN-DIR
               END-IF
               MOVE TIPOID-E TO TIP-IDE-INPUT-BDAMATCH
               MOVE NUMID-E  TO NUM-IDE-INPUT-BDAMATCH
               PERFORM 1000-U-RECORRER-CSV-BDAMATCH
               MOVE 1 TO HACERMATCH-LEEMSTRS
REQ609         IF IDE-TIPO-BDAMATCH = 1                                 LAG0008
REQ609            IF TIPOID-E = 1 OR 4                                  LAG0008
REQ609               INSPECT NOM-OUTPUT-BDAMATCH REPLACING ALL          LAG0008
REQ609                  "," BY " ", ";" BY " "                          LAG0008
REQ609            END-IF                                                LAG0008
REQ609            MOVE NOMBRE-E            TO NOMBRE-INPUT-VALNOM       LAG0008
REQ609            MOVE NOM-OUTPUT-BDAMATCH TO NOMBOK-INPUT-VALNOM       LAG0008
REQ609            MOVE TIPOID-E            TO  TIP-ID-INPUT-VALNOM      LAG0008
REQ609            MOVE NUM-BLOQUES-BDIIVIDE TO BLOQUES-INPUT-VALNOM     LAG0008
REQ609            PERFORM 10000-MATCH-NOMBRES-VALNOM                    LAG0008
REQ609            IF MATCH-OK-OUT-VALNOM = 1                            LAG0008
REQ609               MOVE 1 TO IDE-TIPO-BDAMATCH                        LAG0008
REQ609            ELSE                                                  LAG0008
R7094A              IF W-BLOQUES > 0                                    RMB0009
R7094A                 MOVE 0 TO IDE-TIPO-BDAMATCH                      RMB0009
R7094A              END-IF                                              RMB0009
REQ609            END-IF                                                LAG0008
REQ609         END-IF                                                   LAG0008

               IF IDE-TIPO-BDAMATCH = 1
                  MOVE TIPOID-E TO TIP-VAL
                  MOVE NUMID-E  TO CED-VAL
                  MOVE NOM-OUTPUT-BDAMATCH TO CADENA-ENTRA
                  PERFORM 9800-FILTRAR-ALFABETICO
                  MOVE CADENA-SALE TO  NOM-VAL
                  MOVE ZEROS    TO FEC-EXP-VAL
                  MOVE SPACES   TO MUN-EXP-VAL
                  MOVE SPACES   TO DEP-EXP-VAL
                  MOVE SPACES   TO VIG-VAL
                  MOVE SPACES   TO GENERO-VAL
                  MOVE SPACES   TO EDAD-VAL
                  MOVE SPACES   TO EDAD-RANGO
PAM460*           MOVE "A"      TO ORIGEN-VAL
PJV011            PERFORM  301-GRABA-LOS-VALIDOS                        CQ11407
PJV011            ADD 1 TO SI-EXISTE-CSV                                CQ11407
                END-IF
             END-IF.

       9800-FILTRAR-ALFABETICO.
      ******************************************************************
      *9800-FILTRAR-ALFABETICO.                                        *
      *    SE ELIMINAN CARACTERES NO ALFABETICOS A LA CADENA DE ENTRADA*       
      ******************************************************************       
           MOVE FUNCTION UPPER-CASE (CADENA-ENTRA) TO CADENA-ENTRA             
           INITIALIZE CADENA-SALE                                              
           MOVE 1 TO J                                                         
           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 60                          
              MOVE CADENA-ENTRA (I:1) TO IND-ALFABETICO                        
              IF SI-ALFABETICO                                                 
                 MOVE CADENA-ENTRA (I:1) TO CADENA-SALE (J:1)                  
                 ADD 1 TO J                                                    
              END-IF                                                           
           END-PERFORM.
      *******************************************************************

      *800-GRABAR-SECUENCIAL.
      * SE ARMA Y GRABA REGISTRO EN EL ARCHIVO ICBTCO, INDICANDO EN EL
      * NUMERO DE TERMINAL, LA TARIFA UTILIZADA Y EN EL NUMERO DE IDEN-
      * TIFICACION LA CANTIDAD DE VALIDACIONES REALIZADAS. SE GRABA UN
      * REGISTRO POR CADA TIPO DE RESULTADO DE LA VALIDACION
      *******************************************************************
       800-GRABAR-SECUENCIAL.
           INITIALIZE REG-SEC
           MOVE SUSCRIPTOR-AUX    TO COD-SUSCRIP-SEC
           MOVE FECHA-AUX-R       TO FEC-CONSUL-SEC
           MOVE ZEROS             TO TIP-ID-SEC
           MOVE W-TARIFA          TO NUM-TERM-SEC
           MOVE 2                 TO COBRA-SEC
           MOVE 1                 TO PRIV-SEC
           MOVE " "               TO SBPRIV-SEC
           MOVE 2                 TO PRODU-SEC
           MOVE COD-CLAVE-ABD09   TO COD-CLAVE-SEC
           MOVE CLAVE-AUT-ABD09   TO CLAVE-AUT-SEC
           MOVE CIUDAD-CONS-ABD09 TO CIUDAD-CONS-SEC
           MOVE REGIONAL-ABD14    TO REGIONAL-COMIS-SEC
           MOVE ZONA-FAC-ABD09    TO ZONA-FAC-SEC
           MOVE ZEROS             TO TABLA-SCOR-SEC
           ACCEPT TIEMPO-W        FROM TIME
           MOVE TIEMPO-W(1:6)     TO HORA-SEC
           IF W-CONT-TIPO-5       >  ZEROS
              ADD 1 TO LLAVE7
              MOVE LLAVE7 TO LLAVE-SEC
              MOVE W-CONT-TIPO-5  TO NUM-ID-SEC 
              MOVE 5  TO TIP-CON-SEC 
XXXXXX*       WRITE REG-SEC INVALID KEY
XXXXXX*             DISPLAY " ERROR ESCRIBIENDO ICBTCO:  " LLAVE-SEC
XXXXXX*       END-WRITE
           END-IF   
           IF W-CONT-TIPO-6       >  ZEROS
              ADD 1 TO LLAVE7
              MOVE LLAVE7 TO LLAVE-SEC
              MOVE W-CONT-TIPO-6  TO NUM-ID-SEC 
              MOVE 6  TO TIP-CON-SEC 
XXXXXX*       WRITE REG-SEC INVALID KEY
XXXXXX*             DISPLAY " ERROR ESCRIBIENDO ICBTCO:  " LLAVE-SEC
XXXXXX*       END-WRITE
           END-IF   
           IF W-CONT-TIPO-7       >  ZEROS
              ADD 1 TO LLAVE7
              MOVE LLAVE7 TO LLAVE-SEC
              MOVE W-CONT-TIPO-7  TO NUM-ID-SEC 
              MOVE 7  TO TIP-CON-SEC 
XXXXXX*       WRITE REG-SEC INVALID KEY
XXXXXX*             DISPLAY " ERROR ESCRIBIENDO ICBTCO:  " LLAVE-SEC
XXXXXX*       END-WRITE
           END-IF.                       
      *****************************************************************
      *810-BUSCAR-MUNICIPIO.
      * OBTIENE EL NOMBRE DEL MUNICIPIO Y EL DEPARTAMENTO AL QUE PERTE-
      * NECE CON EL FIN DE ALIMENTAR EL ARCHIVO DE VALIDAS
      *****************************************************************
       810-BUSCAR-MUNICIPIO.
           MOVE DEP-EXP-BDIIREGI TO CODIGO-DEP
           MOVE MUNIC-EXP-BDIIREGI TO CODIGO-MUNI
           READ MUNICIPIOS INVALID KEY
               MOVE SPACES TO NOMBRE-MUNI
               MOVE 71     TO CODIGO-DEP
           END-READ
           MOVE NOMBRE-MUNI           TO MUN-EXP-VAL MUN-EXP-INC
           MOVE T-NOM-DEP(CODIGO-DEP) TO DEP-EXP-VAL DEP-EXP-INC.
      *

      ******************************************************************
      *900-CERRAR-ARCHIVOS.
      * CIERRA CADA UNO DE LOS ARCHIVO UTILIZADOS EN EL PROGRMA QUE AUN
      * ESTAN ABIERTOS
      *****************************************************************
       900-CERRAR-ARCHIVOS.
           DISPLAY "REGISTROS LEIDOS                :" REG-LEIDOS
           DISPLAY "REGISTROS CORRECTOS             :" REG-CORRECTOS
PJV011     DISPLAY "REGISTROS CORRECTOS REPETIDOS   :" REG-CORRECTOS-R  CQ11407
           DISPLAY "REGISTROS NO COINCIDEN BDIIREGI :" NO-COINCIDE-REGIS
R7094B     DISPLAY "  REGISTROS DE FALLECIDOS         :" CONT-FALLECIDOSRMB0009
           DISPLAY "REGISTROS NO COINCIDEN BDIIDIAN :" NO-COINCIDE-DIAN
           DISPLAY "REGISTROS NO EXISTEN   BDIIREGI :" NO-EXISTE-REGIS
           DISPLAY "REGISTROS NO EXISTEN   BDIIDIAN :" NO-EXISTE-DIAN
           DISPLAY "TIPO IDENTIFICACION INVALIDO    :" TIPO-ID-INVALIDO
           CLOSE ENTRADA
                 BDIIDIAN
                 BDIIDAS
                 BDIIREGI
                 MUNICIPIOS
                 SECUENCIAL
                 VALIDAS
PJV011           VALIDAS-REP                                            CQ11407
                 INCONS.
      *****************************************************************
           COPY BDIIVIDE.PROC.
           COPY LEEMAESTROS.PROC.
           COPY BDLDIR.PROC.
CQ6271     COPY LOGPESVNO.PROC.                                         PJV0010
/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"





    



    


    


    


    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log$CHANGE MODEecho :w"sh-PE-Ripley" 697 lines, 24968 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>fgcat PESVNO.CBLclear         ls -l PESVNO*ls PESVNO*   fu        fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;N/A;N/A;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/fuentes
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.15s
user    0m0.06s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
/d/iccol/desarrollo/fuentes>archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2                                                               fg
vi sh-PE-Ripley

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    echo PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya#   banner "PE Ripley"



[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"    echo PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2ech$CHANGE MODEprint -:w"sh-PE-Ripley" 697 lines, 24971 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>fgfgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;N/A;N/A;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=N/A<
TIPO_ARCHIVO=N/A<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;N/A;N/A;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/fuentes
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: N/A
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
/d/iccol/desarrollo/fuentes>vi & $TEMPORALES/PERipley20140531.val
"/d/iccol/desarrollo/temporales/PERipley20140531.val" 742 lines, 79264 characters 100000004831BULLA ORJUELA HERNANDO19530327BOGOTA D.C.    CUNDINAMAR     00M08266+
100000454737RODRIGUEZ CUBILLOS JOSE ANTONIO19601004VIOTACUNDINAMAR     00M07566+
100002411141CIFUENTES RAMIREZ JAIME19551226CALIVALLE00M08066+
100002925464ANGARITA DULCEY PEDRO ARTURO19600801BOGOTA D.C.    CUNDINAMAR     00M07566+
100002940566LEON RUIZ HUMBERTO ANTONIO19610220BOGOTA D.C.    CUNDINAMAR     00M07466+
100002994664TOVAR CALVO LUIS ALEJANDRO19790713CHIACUNDINAMAR     00M05346-55
100003020988RUIZ ROMERO MANUEL RICARDO19760117FONTIBONCUNDINAMAR     00M05656-65
100003158483RUEDA GONZALEZ FERNANDO19830930SAN FRANCISCO  CUNDINAMAR     00M04946-55
100003181761MUNEVAR TELLEZ RAUL GUILLERMO19760728SUBACUNDINAMAR     00M05656-65
100003213808BELTRAN CHITIVA PEDRO LUIS19791209UBALACUNDINAMAR     00M05346-55
100003226636MANRIQUE SANTAMARIA CAMILO19741105USAQUENCUNDINAMAR     00M06156-65
100003329263ECHEVERRI MONTOYA ULPIANO19600617MEDELLINANTIOQUIA00M07566+
100004266024PARRA PARRA LUIS ADAN19770228SUSACONBOYACA00M05546-55
100004537842MORALES TORRES GILDARDO DE JESUS19750411QUINCHIARISARALDA00M05756-65
100004716536MURILLO DAVILA MARCO TULIO19871214MIRANDACAUCA00M04536-45
100004895549MARTINEZ GARCIA HECTOR19820908TESALIAHUILA00M05046-55
100005563591FLETCHER SUAREZ JAIRO19670719BUCARAMANGA    SANTANDER00M06866+
100005563621GAVASSA VILLAMIZAR RAFAEL19670719BUCARAMANGA    SANTANDER00M06866+
100005590565NIÑO RINCON LUIS ALFONSO19671205BARRANCABERMEJASANTANDER00M06866+
100005759232CALVETE PARDO CARLOS ALBERTO19960730SIMACOTASANTANDER00M03636-45
100005872766DUARTE TOVAR JOSE DAVID19770825CUNDAYTOLIMA00M05546-55
100005889100OVIEDO PRADA JOHN EDUARD19871207CHAPARRALTOLIMA00M04536-45
100005992247RAMIREZ QUIMBAYO CARLOS JULIO19861113ROVIRATOLIMA00M04646-55
100006001114DIAZ SALAZAR ROMULO19790813SAN ANTONIO    TOLIMA00M05346-55
100006092267UPEGUI ENCISO DIDIER ENRIQUE19631215CALIVALLE00M07266+
100006106694BEDOYA OSORIO JULIAN ANDRES19980213CALIVALLE00M03429-35
100006264281HERNANDEZ GARCIA LUIS ARBEY19700119CALIMAVALLE00M06556-65
100006288186MONEDERO  RODRIGO19751008EL CERRITO     VALLE00M05756-65
100006463789FRANCO HINCAPIE WILLIAM19820725SEVILLAVALLE00M05046-55
100006626340OCACIONES CARDONA ANDRES FABIAN20000529PALMIRAVALLE00M03229-35
100006889725GOMEZ SANCHEZ RODOLFO ANTONIO19810921MONTERIACORDOBA00M05146-55
100007176152LEAL APERADOR OSCAR FERNANDO19970704TUNJABOYACA00M03529-35
100007217641HIGUERA CAMARGO LUIS FRANCISCO19791209DUITAMABOYACA00M05346-55
100007217943SILVA PUERTO HENRY ORLANDO19800618DUITAMABOYACA00M05246-55
100007334810MOLINA CASALLAS WILSON FERNANDO19961104GARAGOABOYACA00M03636-45
100007716738BAUTISTA MACIAS WILKER ESNEIDER19990406NEIVAHUILA00M03329-35
100007724577DUSSAN ZULETA JUAN CARLOS20010731NEIVAHUILA00M03129-35
100007730659GOMEZ RAMIREZ ALEX MAURICIO20030321NEIVAHUILA00M02929-35
100008105329ARENAS VELEZ DEIVIT20000229SABANETAANTIOQUIA00M03229-35
100008125042PACHON DAVID JORGE ANDRES19970312MEDELLINANTIOQUIA00M03529-35
100008125263VENGOECHEA ARANGO JOSE ROBERTO19970410MEDELLINANTIOQUIA00M03529-35
100008164657PULGARIN BLANDON JUAN FELIPE20010913ENVIGADOANTIOQUIA00M03129-35
100008269253CARDONA GIL FRANCISCO LUIS19671002MEDELLINANTIOQUIA00M06866+
100008283679LOPEZ MESA GABRIEL DARIO19690422MEDELLINANTIOQUIA00M06666+
100008533525ALEY PEREZ RICARDO ARTURO19870213BARRANQUILLA   ATLANTICO00M04536-45
100008681704RODRIGUEZ CASTELLAR LUIS ADOLFO19770414BARRANQUILLA   ATLANTICO00M05546-55
100008700623SIMMONDS LASCARRO GUILLERMO ALBERTO19780918BARRANQUILLA   ATLANTICO00M05446-55
100008774818BENITEZ DE LA HOZ FRANKLIN ENRIQUE19910425SOLEDADATLANTICO00M04136-45
100008850681BABILONIA MENDEZ ORIEL19980416CARTAGENABOLIVAR00M03429-35
"/d/iccol/desarrollo/temporales/PERipley20140531.val" 742 lines, 79264 characters100000004831BULLA ORJUELA HERNANDO19530327BOGOTA D.C.    CUNDINAMAR     00M08266+
100000454737RODRIGUEZ CUBILLOS JOSE ANTONIO19601004VIOTACUNDINAMAR     00M07566+
100002411141CIFUENTES RAMIREZ JAIME19551226CALIVALLE00M08066+
100002925464ANGARITA DULCEY PEDRO ARTURO19600801BOGOTA D.C.    CUNDINAMAR     00M07566+
100002940566LEON RUIZ HUMBERTO ANTONIO19610220BOGOTA D.C.    CUNDINAMAR     00M07466+
100002994664TOVAR CALVO LUIS ALEJANDRO19790713CHIACUNDINAMAR     00M05346-55
100003020988RUIZ ROMERO MANUEL RICARDO19760117FONTIBONCUNDINAMAR     00M05656-65
100003158483RUEDA GONZALEZ FERNANDO19830930SAN FRANCISCO  CUNDINAMAR     00M04946-55
100003181761MUNEVAR TELLEZ RAUL GUILLERMO19760728SUBACUNDINAMAR     00M05656-65
100003213808BELTRAN CHITIVA PEDRO LUIS19791209UBALACUNDINAMAR     00M05346-55
100003226636MANRIQUE SANTAMARIA CAMILO19741105USAQUENCUNDINAMAR     00M06156-65
100003329263ECHEVERRI MONTOYA ULPIANO19600617MEDELLINANTIOQUIA00M07566+
100004266024PARRA PARRA LUIS ADAN19770228SUSACONBOYACA00M05546-55
100004537842MORALES TORRES GILDARDO DE JESUS19750411QUINCHIARISARALDA00M05756-65
100004716536MURILLO DAVILA MARCO TULIO19871214MIRANDACAUCA00M04536-45
100004895549MARTINEZ GARCIA HECTOR19820908TESALIAHUILA00M05046-55
100005563591FLETCHER SUAREZ JAIRO19670719BUCARAMANGA    SANTANDER00M06866+
100005563621GAVASSA VILLAMIZAR RAFAEL19670719BUCARAMANGA    SANTANDER00M06866+
100005590565NIÑO RINCON LUIS ALFONSO19671205BARRANCABERMEJASANTANDER00M06866+
100005759232CALVETE PARDO CARLOS ALBERTO19960730SIMACOTASANTANDER00M03636-45
100005872766DUARTE TOVAR JOSE DAVID19770825CUNDAYTOLIMA00M05546-55
100005889100OVIEDO PRADA JOHN EDUARD19871207CHAPARRALTOLIMA00M04536-45
100005992247RAMIREZ QUIMBAYO CARLOS JULIO19861113ROVIRATOLIMA00M04646-55
100006001114DIAZ SALAZAR ROMULO19790813SAN ANTONIO    TOLIMA00M05346-55
100006092267UPEGUI ENCISO DIDIER ENRIQUE19631215CALIVALLE00M07266+
100006106694BEDOYA OSORIO JULIAN ANDRES19980213CALIVALLE00M03429-35
100006264281HERNANDEZ GARCIA LUIS ARBEY19700119CALIMAVALLE00M06556-65
100006288186MONEDERO  RODRIGO19751008EL CERRITO     VALLE00M05756-65
100006463789FRANCO HINCAPIE WILLIAM19820725SEVILLAVALLE00M05046-55
100006626340OCACIONES CARDONA ANDRES FABIAN20000529PALMIRAVALLE00M03229-35
100006889725GOMEZ SANCHEZ RODOLFO ANTONIO19810921MONTERIACORDOBA00M05146-55
100007176152LEAL APERADOR OSCAR FERNANDO19970704TUNJABOYACA00M03529-35
100007217641HIGUERA CAMARGO LUIS FRANCISCO19791209DUITAMABOYACA00M05346-55
100007217943SILVA PUERTO HENRY ORLANDO19800618DUITAMABOYACA00M05246-55
100007334810MOLINA CASALLAS WILSON FERNANDO19961104GARAGOABOYACA00M03636-45
100007716738BAUTISTA MACIAS WILKER ESNEIDER19990406NEIVAHUILA00M03329-35
100007724577DUSSAN ZULETA JUAN CARLOS20010731NEIVAHUILA00M03129-35
100007730659GOMEZ RAMIREZ ALEX MAURICIO20030321NEIVAHUILA00M02929-35
100008105329ARENAS VELEZ DEIVIT20000229SABANETAANTIOQUIA00M03229-35
100008125042PACHON DAVID JORGE ANDRES19970312MEDELLINANTIOQUIA00M03529-35
100008125263VENGOECHEA ARANGO JOSE ROBERTO19970410MEDELLINANTIOQUIA00M03529-35
100008164657PULGARIN BLANDON JUAN FELIPE20010913ENVIGADOANTIOQUIA00M03129-35
100008269253CARDONA GIL FRANCISCO LUIS19671002MEDELLINANTIOQUIA00M06866+
100008283679LOPEZ MESA GABRIEL DARIO19690422MEDELLINANTIOQUIA00M06666+
100008533525ALEY PEREZ RICARDO ARTURO19870213BARRANQUILLA   ATLANTICO00M04536-45
100008681704RODRIGUEZ CASTELLAR LUIS ADOLFO19770414BARRANQUILLA   ATLANTICO00M05546-55
100008700623SIMMONDS LASCARRO GUILLERMO ALBERTO19780918BARRANQUILLA   ATLANTICO00M05446-55
100008774818BENITEZ DE LA HOZ FRANKLIN ENRIQUE19910425SOLEDADATLANTICO00M04136-45
100008850681BABILONIA MENDEZ ORIEL19980416CARTAGENABOLIVAR00M03429-35
100009047861TORRES ACEVEDO GENEROSO19620611CARTAGENABOLIVAR00M07366+
100009283474PINZON REDONDO HERNANDO SAMUEL19790328TURBACOBOLIVAR00M05346-55
100009396482PALACIOS RODRIGUEZ RODOLFO19900822SOGAMOSOBOYACA00M04236-45
100009773605ARCILA VARGAS JULIAN FERNANDO20030924ARMENIAQUINDIO00M02929-35
100009779604DURANGO PATIÑO RUBEN DARIO19771222CALARCAQUINDIO00M05546-55
100010001679ROJAS MONTOYA DIEGO EDISON19950428PEREIRARISARALDA00M03736-45
100010012641JIMENEZ MORALES YONNY FERNEY19971015PEREIRARISARALDA00M03529-35100000004831BULLA ORJUELA HERNANDO19530327BOGOTA D.C.    CUNDINAMAR     00M08266+
100000454737RODRIGUEZ CUBILLOS JOSE ANTONIO19601004VIOTACUNDINAMAR     00M07566+
100002411141CIFUENTES RAMIREZ JAIME19551226CALIVALLE00M08066+
100002925464ANGARITA DULCEY PEDRO ARTURO19600801BOGOTA D.C.    CUNDINAMAR     00M07566+
100002940566LEON RUIZ HUMBERTO ANTONIO19610220BOGOTA D.C.    CUNDINAMAR     00M07466+
100002994664TOVAR CALVO LUIS ALEJANDRO19790713CHIACUNDINAMAR     00M05346-55
100003020988RUIZ ROMERO MANUEL RICARDO19760117FONTIBONCUNDINAMAR     00M05656-65
100003158483RUEDA GONZALEZ FERNANDO19830930SAN FRANCISCO  CUNDINAMAR     00M04946-55
100003181761MUNEVAR TELLEZ RAUL GUILLERMO19760728SUBACUNDINAMAR     00M05656-65
100003213808BELTRAN CHITIVA PEDRO LUIS19791209UBALACUNDINAMAR     00M05346-55
100003226636MANRIQUE SANTAMARIA CAMILO19741105USAQUENCUNDINAMAR     00M06156-65
100003329263ECHEVERRI MONTOYA ULPIANO19600617MEDELLINANTIOQUIA00M07566+
100004266024PARRA PARRA LUIS ADAN19770228SUSACONBOYACA00M05546-55
100004537842MORALES TORRES GILDARDO DE JESUS19750411QUINCHIARISARALDA00M05756-65
100004716536MURILLO DAVILA MARCO TULIO19871214MIRANDACAUCA00M04536-45
100004895549MARTINEZ GARCIA HECTOR19820908TESALIAHUILA00M05046-55
100005563591FLETCHER SUAREZ JAIRO19670719BUCARAMANGA    SANTANDER00M06866+
100005563621GAVASSA VILLAMIZAR RAFAEL19670719BUCARAMANGA    SANTANDER00M06866+
100005590565NIÑO RINCON LUIS ALFONSO19671205BARRANCABERMEJASANTANDER00M06866+
100005759232CALVETE PARDO CARLOS ALBERTO19960730SIMACOTASANTANDER00M03636-45
100005872766DUARTE TOVAR JOSE DAVID19770825CUNDAYTOLIMA00M05546-55
100005889100OVIEDO PRADA JOHN EDUARD19871207CHAPARRALTOLIMA00M04536-45
100005992247RAMIREZ QUIMBAYO CARLOS JULIO19861113ROVIRATOLIMA00M04646-55
100006001114DIAZ SALAZAR ROMULO19790813SAN ANTONIO    TOLIMA00M05346-55
100006092267UPEGUI ENCISO DIDIER ENRIQUE19631215CALIVALLE00M07266+
100006106694BEDOYA OSORIO JULIAN ANDRES19980213CALIVALLE00M03429-35
100006264281HERNANDEZ GARCIA LUIS ARBEY19700119CALIMAVALLE00M06556-65
100006288186MONEDERO  RODRIGO19751008EL CERRITO     VALLE00M05756-65
100006463789FRANCO HINCAPIE WILLIAM19820725SEVILLAVALLE00M05046-55
100006626340OCACIONES CARDONA ANDRES FABIAN20000529PALMIRAVALLE00M03229-35
100006889725GOMEZ SANCHEZ RODOLFO ANTONIO19810921MONTERIACORDOBA00M05146-55
100007176152LEAL APERADOR OSCAR FERNANDO19970704TUNJABOYACA00M03529-35
100007217641HIGUERA CAMARGO LUIS FRANCISCO19791209DUITAMABOYACA00M05346-55
100007217943SILVA PUERTO HENRY ORLANDO19800618DUITAMABOYACA00M05246-55
100007334810MOLINA CASALLAS WILSON FERNANDO19961104GARAGOABOYACA00M03636-45
100007716738BAUTISTA MACIAS WILKER ESNEIDER19990406NEIVAHUILA00M03329-35
100007724577DUSSAN ZULETA JUAN CARLOS20010731NEIVAHUILA00M03129-35
100007730659GOMEZ RAMIREZ ALEX MAURICIO20030321NEIVAHUILA00M02929-35
100008105329ARENAS VELEZ DEIVIT20000229SABANETAANTIOQUIA00M03229-35
100008125042PACHON DAVID JORGE ANDRES19970312MEDELLINANTIOQUIA00M03529-35
100008125263VENGOECHEA ARANGO JOSE ROBERTO19970410MEDELLINANTIOQUIA00M03529-35
100008164657PULGARIN BLANDON JUAN FELIPE20010913ENVIGADOANTIOQUIA00M03129-35
100008269253CARDONA GIL FRANCISCO LUIS19671002MEDELLINANTIOQUIA00M06866+
100008283679LOPEZ MESA GABRIEL DARIO19690422MEDELLINANTIOQUIA00M06666+
100008533525ALEY PEREZ RICARDO ARTURO19870213BARRANQUILLA   ATLANTICO00M04536-45
100008681704RODRIGUEZ CASTELLAR LUIS ADOLFO19770414BARRANQUILLA   ATLANTICO00M05546-55
100008700623SIMMONDS LASCARRO GUILLERMO ALBERTO19780918BARRANQUILLA   ATLANTICO00M05446-55
100008774818BENITEZ DE LA HOZ FRANKLIN ENRIQUE19910425SOLEDADATLANTICO00M04136-45
100008850681BABILONIA MENDEZ ORIEL19980416CARTAGENABOLIVAR00M03429-35

:q/d/iccol/desarrollo/fuentes>^[k  /d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.val/d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.   inc
"/d/iccol/desarrollo/temporales/PERipley20140531.inc" 23 lines, 3542 characters 1;00000000533;;;
00000000;;;  ;04;
1;00000001974;;;
00000000;;;  ;04;
1;00000006060;;;
00000000;;;  ;04;
1;00000008238;;;
00000000;;;  ;04;
1;00000200935;;;
00000000;;;  ;04;
1;00000200980;;;
00000000;;;  ;04;
1;00004472294;;;
00000000;;;  ;04;
1;00006228037;;;
00000000;;;  ;04;
1;00009874691;;;
00000000;;;  ;04;
1;00009957108;;;
00000000;;;  ;04;
1;00013880835;;;
00000000;;;  ;04;
1;00019202475;;;
00000000;;;  ;04;
1;00024291763;;;
00000000;;;  ;04;
1;00024873700;;;
00000000;;;  ;04;
1;00035521255;;;
00000000;;;  ;04;
1;00041714762;;;
00000000;;;  ;04;
1;00052149811;;;
00000000;;;  ;04;
1;00052737392;;;
00000000;;;  ;04;
1;00063481404;;;
00000000;;;  ;04;
1;00079386807;;;
00000000;;;  ;04;
1;00080073613;;;
00000000;;;  ;04;
1;00094471330;;;
00000000;;;  ;04;
1;01017130671;;;
00000000;;;  ;04;
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140531.inc" 23 lines, 3542 characters1;00000000533;;;00000000;;;  ;04;
1;00000001974;;;00000000;;;  ;04;
1;00000006060;;;00000000;;;  ;04;
1;00000008238;;;00000000;;;  ;04;
1;00000200935;;;00000000;;;  ;04;
1;00000200980;;;00000000;;;  ;04;
1;00004472294;;;00000000;;;  ;04;
1;00006228037;;;00000000;;;  ;04;
1;00009874691;;;00000000;;;  ;04;
1;00009957108;;;00000000;;;  ;04;
1;00013880835;;;00000000;;;  ;04;
1;00019202475;;;00000000;;;  ;04;
1;00024291763;;;00000000;;;  ;04;
1;00024873700;;;00000000;;;  ;04;
1;00035521255;;;00000000;;;  ;04;
1;00041714762;;;00000000;;;  ;04;
1;00052149811;;;00000000;;;  ;04;
1;00052737392;;;00000000;;;  ;04;
1;00063481404;;;00000000;;;  ;04;
1;00079386807;;;00000000;;;  ;04;
1;00080073613;;;00000000;;;  ;04;
1;00094471330;;;00000000;;;  ;04;
1;01017130671;;;00000000;;;  ;04;
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~1;00000000533;;;
00000000;;;  ;04;
1;00000001974;;;
00000000;;;  ;04;
1;00000006060;;;
00000000;;;  ;04;
1;00000008238;;;
00000000;;;  ;04;
1;00000200935;;;
00000000;;;  ;04;
1;00000200980;;;
00000000;;;  ;04;
1;00004472294;;;
00000000;;;  ;04;
1;00006228037;;;
00000000;;;  ;04;
1;00009874691;;;
00000000;;;  ;04;
1;00009957108;;;
00000000;;;  ;04;
1;00013880835;;;
00000000;;;  ;04;
1;00019202475;;;
00000000;;;  ;04;
1;00024291763;;;
00000000;;;  ;04;
1;00024873700;;;
00000000;;;  ;04;
1;00035521255;;;
00000000;;;  ;04;
1;00041714762;;;
00000000;;;  ;04;
1;00052149811;;;
00000000;;;  ;04;
1;00052737392;;;
00000000;;;  ;04;
1;00063481404;;;
00000000;;;  ;04;
1;00079386807;;;
00000000;;;  ;04;
1;00080073613;;;
00000000;;;  ;04;
1;00094471330;;;
00000000;;;  ;04;
1;01017130671;;;
00000000;;;  ;04;
~
~
~:q/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.inc/d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.   log
"/d/iccol/desarrollo/temporales/PERipley20140531.log" 36 lines, 1283 characters !!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5==> 000742
Registros Tipo 6==> 000000
Registros Tipo 7==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS:0000765
REGISTROS CORRECTOS:0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS:0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140531
HORA  : 1353
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT- 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT- 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/05/31 13:53:52
Fin de Programa:     2014/05/31 13:53:52

~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140531.log" 36 lines, 1283 characters:q/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya









caREPLACE MODEeq:w"sh-PE-Ripley" 697 lines, 24971 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>fgvi $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.inc/d/iccol/desarrollo/fuentes>vi $TEMPORALES/PERipley20140531.val/d/iccol/desarrollo/fuentes>sh-PE-Ripley                       /d/iccol/desarrollo/fuentes>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;N/A;N/A;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=N/A<
TIPO_ARCHIVO=N/A<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;N/A;N/A;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/fuentes
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: N/A
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
 
----------------------------------------------------------------------
Las cantidades de registros no cuadran: proceso cancelado
----------------------------------------------------------------------
/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -eq $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
exit
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $rayane
    
    



exi$CHANGE MODEcancelado="1"/
#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion# control: si no hay un archivo .val se cancela el proceso
    [ ! -s $archivo_val ] && echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val/Address search hit BOTTOM without matching pattern/Address search hit BOTTOM without matching pattern?    # el directorio del archivo cambia según el ambienteP_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log/
#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion# control: si no hay un archivo .val se cancela el proceso
    [ ! -s $archivo_val ] && echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
OPEN MODE    [ $cancelado == "1" ] && exit
echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val

    
INSERT MODEif  &&$CHANGE MODE
echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exitCHANGE MODEthen
echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exitCHANGE MODE    then
    echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit
    echo "No hay un archivo de registros validados - PROCESO CANCELADO"; exit$CHANGE MODE
 exitCHANGE MODE        x
OPEN MODE    fi:w"sh-PE-Ripley" 701 lines, 25029 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;N/A;N/A;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=N/A<
TIPO_ARCHIVO=N/A<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;N/A;N/A;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/fuentes
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: N/A
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[630]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 041045047048049062067095099 VAL PERipley20140531.val
..............................................................................................
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
Fecha de calculo: 095099
    W-TIPO-SCORE: VAL                        
  W-TIPO-ARCHIVO: PER
         Archivo:                                                                                 
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 095099
FECHA RECOGIDA BD(YYYYMM) NO EXISTE

real    0m0.04s
user    0m0.01s
sys     0m0.01s

Inicio de Programa:  2014/05/31 14:17:30
Fin de Programa:     2014/05/31 14:17:30

 
HASTA ACÁ LLEGAMOS POR AHORA
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>sh-PE-Ripleyfg          sh-PE-Ripleyfg          vi $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes>
"/d/iccol/desarrollo/temporales/PERipley20140531.log" 36 lines, 1283 characters !!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5==> 000742
Registros Tipo 6==> 000000
Registros Tipo 7==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS:0000765
REGISTROS CORRECTOS:0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS:0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140531
HORA  : 1417
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT- 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT- 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/05/31 14:17:30
Fin de Programa:     2014/05/31 14:17:30

~
~
~
~
~
~
~
~
~
~
~
~
~"/d/iccol/desarrollo/temporales/PERipley20140531.log" 36 lines, 1283 characters:q/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>fgvi $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes> $TEMPORALES/PERipley20140531.log  /d/iccol/desarrollo/fuentes>c $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes>ca $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes>cat $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/fuentes>cat
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
REGISTROS LEIDOS                :0000765
REGISTROS CORRECTOS             :0000742
REGISTROS CORRECTOS REPETIDOS   :0000000
REGISTROS NO COINCIDEN BDIIREGI :0000000
  REGISTROS DE FALLECIDOS         :0000000
REGISTROS NO COINCIDEN BDIIDIAN :0000000
REGISTROS NO EXISTEN   BDIIREGI :0000023
REGISTROS NO EXISTEN   BDIIDIAN :0000000
TIPO IDENTIFICACION INVALIDO    :0000000
===================================
ACTUALIZANDO REGIS PARA FACTURACION
===================================
FECHA : 20140531
HORA  : 1417
===================================
ABRIENDO ARCHIVO :$DATOS/LOGPESVNO.DAT                  - 00
RESULTADO OPERACION :$DATOS/LOGPESVNO.DAT                  - 00
Graba Tipo 5    ==> 000000000742
Graba Tipo 6    ==> 000000000000
Graba Tipo 7    ==> 000000000023
Graba Tipo 5 PJ ==> 000000000000
TRANSAC-STATUS-WK: OK

Inicio de Programa:  2014/05/31 14:17:30
Fin de Programa:     2014/05/31 14:17:30

/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley
#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores5 lines yanked#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    echo ".............................................................................................."
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:



    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados    # Archivo Log:
# Por cada procedimiento se debe registrar la siguiente información:[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>ls -l $TEMPORALES/PERipley20140531*
-rw-rw-r--   1 icjlud   icdatacr    9945 May 31 10:30 /d/iccol/desarrollo/temporales/PERipley20140531
-rw-rw-r--   1 icjlud   icdatacr    3542 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.inc
-rw-rw-r--   1 icjlud   icdatacr    1283 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.log
-rw-rw-r--   1 icjlud   icdatacr    9945 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.prn
-rw-rw-r--   1 icjlud   icdatacr   79264 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.val
-rw-rw-r--   1 icjlud   icdatacr       0 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.vre
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>ls -l $TEMPORALES/PERipley20140531*/d/iccol/desarrollo/fuentes>ls -l PERipley20140531*            
PERipley20140531*: No such file or directory
/d/iccol/desarrollo/fuentes>rn m /d/iccol/desarrollo/temporales/PERipley20140531
/d/iccol/desarrollo/fuentes>^[  /d/iccol/desarrollo/fuentes>rm /d/iccol/desarrollo/temporales/PERipley2014053>/d/iccol/desarrollo/fuentes>ls -l PERipley20140531*                           /d/iccol/desarrollo/fuentes>ls -l $TEMPORALES/PERipley20140531*/d/iccol/desarrollo/fuentes>
-rw-rw-r--   1 icjlud   icdatacr    3542 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.inc
-rw-rw-r--   1 icjlud   icdatacr    1283 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.log
-rw-rw-r--   1 icjlud   icdatacr    9945 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.prn
-rw-rw-r--   1 icjlud   icdatacr   79264 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.val
-rw-rw-r--   1 icjlud   icdatacr       0 May 31 14:17 /d/iccol/desarrollo/temporales/PERipley20140531.vre
/d/iccol/desarrollo/fuentes>fg
vi sh-PE-Ripley
#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:
# Por cada procedimiento se debe registrar la siguiente información:/scotba?/SCOTBATCH $fec/fechaYYYYMM??# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_PROC_YYYYMM=$(echo $FECHA_PROC | cut -c1-6 )
sanata=$(grep $FECHA_PROC_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_PROC_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc?Address search hit TOP without matching pattern/echo "No hay un archivo de registros validados - PROCESO CANCELADO"exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)/??# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_PROC_YYYYMM=$(echo $FECHA_PROC | cut -c1-6 )
sanata=$(grep $FECHA_PROC_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_PROC_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc/\4fechaecho "No hay un archivo de registros validados - PROCESO CANCELADO"exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)/\$fecha# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"/echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
/then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
/then
echo "la fecha solamente puede contener dígitos"
tput bel
[ $doCuu == "1" ] && tput cuu 8
else
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
if [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
/then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# debe ser menor que la fecha actual (mes o año)
FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)
/fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)
/if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]
/
/then
echo "la fecha desde debe ser anterior a la actual"
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# todo bien
FECHA_PROC=$FECHA_PROCnew
/FECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMM
/paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"/:"sh-PE-Ripley" [Modified] line 386 of 700 --55%-- :w"sh-PE-Ripley" 700 lines, 24926 characters :v//dif [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMM
    echo "FECHA_PROC="$FECHA_PROC"<"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
echo "${s}histórico, desde: "$FECHA_PROC
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)FECHA_PROC=$fechaHastaYYYYMMDD
archivo="PERipley"$fechaHastaYYYYMMDD
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
FECHA_PROC_YYYYMM=$(echo $FECHA_PROC | cut -c1-6 )
sanata=$(grep $FECHA_PROC_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_PROC_YYYYMM "es" $sanataecho "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
674 fewer linesif [[ "$FECHA_PROCnew" != +([0-9]) ]]if [ -z $FECHA_PROCnew ]    echo "BASE="$BASE"<"echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_PROC
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
674 more lines# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
/histórico/echo "FECHA INICIAL DE PROCESO HISTÓRICO"echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"

/[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"//
paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_PROC
    else
echo "${s}actual" /


/    clearecho $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_PROC# fecha desde
else
FECHA_PROC=$fechaHastaYYYYMMDD
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "/    if [ $BASE == "E" ]then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$fechaHastaYYYYMMDD
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_PROC
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_PROC_YYYYMM=$(echo $FECHA_PROC | cut -c1-6 )
sanata=$(grep $FECHA_PROC_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_PROC_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]/Address search hit BOTTOM without matching pattern# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/fuentes>ma
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>mafgls -l $TEMPORALES/PERipley20140531*/d/iccol/desarrollo/macros>rm /d/iccol/desarrollo/temporales/PERipley20140531/d/iccol/desarrollo/macros>ls -l PERipley20140531*                           /d/iccol/desarrollo/macros>ls -l $TEMPORALES/PERipley20140531*/d/iccol/desarrollo/macros>fg                                 /d/iccol/desarrollo/macros>cat $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/macros>fg                                  /d/iccol/desarrollo/macros>vi $TEMPORALES/PERipley20140531.log/d/iccol/desarrollo/macros>sh-PE-Ripley                       /d/iccol/desarrollo/macros>            cp  sh-PE-Ripleyy  sh-PE-Ripleyy-BUP
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"/listarAddress search hit BOTTOM without matching pattern/display#*******************************************************************************allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT





9APPEND MODE                                  FECHA_PROC


1APPEND MODE   FECHA_DESDE# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"FECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]






#     # ##     # # #####  ####### #   ##     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
55 lines deletedreadTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"




readFECHA_PROC() {

# Fecha de proceso, cuando tipo de extracción es "H"FECHA INICIAL DE PROCESO HISTÓRICO"Ingrese fecha inicial de proceso,"enter para cancelar""
55 more lines# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"/readbasethen
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"
if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
thenreadBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"
if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
35 lines deleted# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
    echo " "
#      ......................................................................
 echo "                       ORIGEN DE LA BASE"$raya
"      I) Interna"
E) Externa, provista por el Cliente"
35 more lines
readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
 echo " "
#      ......................................................................"    TIPO DE PROCESO"$raya
  A) Proceso actual"
35 fewer lines
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
    echo " "
#      ......................................................................
 echo "                       ORIGEN DE LA BASE"$raya
"      I) Interna"
E) Externa, provista por el Cliente"
35 more lines
readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
 echo " "
#      ......................................................................"    TIPO DE PROCESO"$raya
  A) Proceso actual"
35 fewer lines

readBASE() {

# Lee el valor de BASE hasta que es OK {I|C} o el ope cancelaORIGEN DE LA BASE"I) Interna"
35 more lines/nuom_archivoecho $rayaecho "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
tput el
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
tput el
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
tput el
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
tput el
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
42 lines deletedID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"
if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
readNOM_ARCHIVO() {

# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES42 more lines"sh-PE-Ripley" [Modified] line 73 of 700 --10%-- tput el
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"

# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"/tipo_extra///echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
thenreadTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
34 lines deletedthen
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
EXTRACT() {extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptorTIPO DE EXTRACCIÓN"N) Por NIT"
C) Por codigo de suscriptor"EXTRACCIÓN:\c"EXTRACTnew
EXTRACTnew ]EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]

34 more linesecho "N) Por NIT"echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}
readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
thenOPEN MODE# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"/id_extract/echo $rayaecho "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"fi
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_PROC=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"




echo $rayaecho "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}


paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_PROC=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
53 lines deletedecho "C) Por codigo de suscriptor"echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
OPEN MODE
readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
    criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
"
#      ......................................................................
echo "                $criterioExtraccion PARA LA EXTRACCIÓN"
echo $raya

echo "      Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el                     # borra caracteres sobrantes
echo "            $criterioExtraccion:\c"
53 lines# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"/tipo_proc

/exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
thenreadTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "criterioExtraccion="NIT"inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************fi
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11criterioExtraccion="NIT"inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "echo "enter para cancelar"echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}


readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}


paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)


TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_PROC=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}

paramsDisplay() {
#*******************************************************************************
32 lines deleted# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"echo $rayaecho "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"
if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
tput el
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
tput el
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
OPEN MODE
readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
    echo " "
#      ......................................................................
 echo "                    ESTRUCTURA DEL ARCHIVO BASE"$raya
"      1) 1-11"
2) 1-11-45
enter para cancelar""
 ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
    loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
    TIPO_ARCHIVO=$TIPO_ARCHIVOnew
    loopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
32 lines:w"sh-PE-Ripley" 703 lines, 24987 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgcp sh-PE-Ripley sh-PE-Ripley-BUP/d/iccol/desarrollo/macros>sh-PE-Ripley sh-PE-Ripley-BUP   /d/iccol/desarrollo/macros>sh-PE-Ripley                 
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_PROC=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.14s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[633]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
Fecha de calculo: 095099
    W-TIPO-SCORE: VAL                        
  W-TIPO-ARCHIVO: PER
         Archivo:                                                                                 
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 095099
FECHA RECOGIDA BD(YYYYMM) NO EXISTE

real    0m0.03s
user    0m0.01s
sys     0m0.01s

Inicio de Programa:  2014/05/31 15:07:37
Fin de Programa:     2014/05/31 15:07:37

 
HASTA ACÁ LLEGAMOS POR AHORA
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna""APPEND MODE                       # reposicionar el cursor por errores
         
# $# CHANGE MODEParámetros y sus valores inicialesecho "E) Externa, provista por el Cliente"echo "enter para cancelar"echo " "echo "BASE:\c"eread BASEnew



2





$CHANGE MODEinicio de proceso históricoPRO$CHANGE MODEINICIO/fecha_procecho "H) Proceso histórico"echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput belC($INICIOC() {    ASCIIBanner="######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
[ $BASEnew == "e" ] && BASEnew="E"
[ $BASEnew == "i" ] && BASEnew="I"echo "H) Proceso histórico"echo "enter para cancelar"
echo " "
echo "TIPO de PROCESO:\c"
read TIPO_PROCnew
if [ -z $TIPO_PROCnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
[ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readFECHA_PROC() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput belPRO$INICIO[ $doCuu == "1" ] && tput cuu 8else# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter para cancelar"
echo " "
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_PROCnew
if [ -z $FECHA_PROCnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_PROCnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_PROCnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_PROCnewYYYYMM=$(echo $FECHA_PROCnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_PROCnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_PROC=$FECHA_PROCnewFECHA_PROC_YYYYMM=$FECHA_PROCnewYYYYMMloopEnd="1"/$CHANGE MODEFECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO


/$FECHA_INICIO


/$FECHA_INICIO

/$FECHA_INICIO

/fidone
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_PROC=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_INICIOnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)/TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
FECHA_PROC=$(echo "$params" | cut -d ";" -f7)    $    FECHA_INICIO
/}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_PROC:-"N/A"}
echo $allParms

echo "file:" $0.parm " in:" $(pwd)


echo $allParms >| $0.parm# para pruebas



echo $allParms >| $archivo.parm${




}paramsPrint() {#*******************************************************************************$FECHA_INICIO/# Muestra todos los parámetros, para pruebas
#*******************************************************************************
echo "BASE="$BASE"<"
echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
echo "ID_EXTRACT="$ID_EXTRACT"<"
echo "TIPO_PROC="$TIPO_PROC"<"
echo "FECHA_PROC="$FECHA_PROC"<"$FECHA_INICIO
/$FECHA_INICIO
/}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
/#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_PROC
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn$FECHA_INICIO/    echo "$ASCIIBanner"echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_PROC# fecha desde
else
FECHA_PROC=$fechaHastaYYYYMMDD
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]$FECHA_INICIO/$FECHA_INICIO/    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$fechaHastaYYYYMMDD
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_PROC
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_PROC_YYYYMM=$(echo $FECHA_PROC | cut -c1-6 )
sanata=$(grep $FECHA_PROC_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_PROC_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_PROC_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_PROC_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]
then $FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO/$FECHA_INICIO




/Address search hit BOTTOM without matching pattern# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"

    









OPEN MODE    FECHA_PROC=    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"fi
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayaFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_INICIOnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayaecho " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente
    if [ $BASE == "E" ]
    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$fechaHastaYYYYMMDD
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb














dowhile [ $continuar == "_" ]continuar="_"# pregunta al ope si está satisfechoecho $rayaparamsDisplayecho $rayaecho "$ASCIIBanner"# banner "PE Ripley"echo $rayaclearparamsPut# guarda en archivo .parmsleep 2paramsPrint # $$$$ DEBUGfiFECHA_INICIO=$fechaHastaYYYYMMDDelsereadFECHA_INICIO# fecha desdethenif [ $TIPO_PROC == "H" ]readTIPO_PROC# A actual, H históricofireadID_EXTRACT# NIT o cos subsreadTIPO_EXTRACT# N NIT, C cod subselsereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45readNOM_ARCHIVO# nombre del archivo basethenif [ $BASE == "E" ]readBASE# I interna, C cliente    do    while [ $parmsOK == "0" ]    parmsOK="0"#   lee el set de parámetros hasta que sea OK    paramsGet#   carga los valores del archivo .parm# Lectura de parámetros en la terminal#*******************************************************************************# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayaecho $rayaecho "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$fechaHastaYYYYMMDD
fi

paramsPrint # $$$$ DEBUG# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya=FECHA_PROC    echo $rayaecho "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$fechaHastaYYYYMMDD
fi

paramsPrint # $$$$ DEBUG
    # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/fechashastahastaread FECHA_INICIOnewif [ -z $FECHA_INICIOnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_INICIOnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)if [ $FECHA_INICIOnewYYYYMM -ge $fechaHastaYYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm$CHANGE MODEFECHA_PROC_/$FECHA_PROC_/$FECHA_PROC_/    echo "BASE="$BASE"<"echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$fechaHastaYYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************$FECHA_PROC_/    cantDeRegistrosTotal=$(wc -l < $archivo_prn)cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    fechaHastaYYYYMMDD=$(date '+%Y%m%d')
    fechaHastaYYYYMM=$(echo $fechaHastaYYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi$    FECHA_PROC_/$    FECHA_PROC_/$FECHA_PROC_/readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$fechaHastaYYYYMMDD$FECHA_PROC_
/read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente
    if [ $BASE == "E" ]
    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$fechaHastaYYYYMMDD
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg$FECHA_PROC_/# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $fechaHastaYYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc$FECHA_PROC_/Address search hit BOTTOM without matching pattern_YYYYMM -gt $f# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/Address search hit BOTTOM without matching pattern# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc/fechayyyymm# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc/echo "No hay un archivo de registros validados - PROCESO CANCELADO"exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)//Address search hit BOTTOM without matching pattern?# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $fechaYYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .incfech$CHANGE MODEFECHA_OROC:fechafech$CHANGE MODEFECHA_PROC_/echo "No hay un archivo de registros validados - PROCESO CANCELADO"exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $fechaYYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)fech$FECHA_PROC_/fech$FECHA_PROC_/Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 704 lines, 25131 characters :v/fecha/d#     Fecha: 20140529FECHA_PROC
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
    echo "${i}Fecha="$FECHA_PROC_YYYYMMDD
echo "${s}histórico, desde: "$FECHA_INICIO
    #Fecha y hora de ejecución
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)readFECHA_INICIO# fecha desdeFECHA_INICIO=$FECHA_PROC_YYYYMMDD
archivo="PERipley"$FECHA_PROC_YYYYMMDD
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanataecho "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
656 fewer linesexitfi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados
656 more lines/?/fecha:v//d#     Fecha: 20140529FECHA_PROC
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
    echo "${i}Fecha="$FECHA_PROC_YYYYMMDD
echo "${s}histórico, desde: "$FECHA_INICIO
    #Fecha y hora de ejecución
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)readFECHA_INICIO# fecha desdeFECHA_INICIO=$FECHA_PROC_YYYYMMDD
archivo="PERipley"$FECHA_PROC_YYYYMMDD
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanataecho "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
656 fewer lines    FECHA_PROC=
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "
readFECHA_INICIO() {
# Fecha de proceso, cuando tipo de extracción es "H"
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo "Ingrese fecha inicial de proceso,"
echo "FECHA INICIO de PROCESO AAAAMMDD:\c"
read FECHA_INICIOnew
if [ -z $FECHA_INICIOnew ]
if [[ "$FECHA_INICIOnew" != +([0-9]) ]]echo "la fecha solamente puede contener dígitos"if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]echo "la fecha es inválida, anterior a 2000 o posterior a 2029"# debe ser menor que la fecha actual (mes o año)FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]echo "la fecha desde debe ser anterior a la actual"FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMM
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
    echo "FECHA_INICIO="$FECHA_INICIO"<"
#     Fecha: 20140529FECHA_PROC
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
    echo "${i}Fecha="$FECHA_PROC_YYYYMMDD
echo "${s}histórico, desde: "$FECHA_INICIO
    #Fecha y hora de ejecución
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)readFECHA_INICIO# fecha desdeFECHA_INICIO=$FECHA_PROC_YYYYMMDD
archivo="PERipley"$FECHA_PROC_YYYYMMDD
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanataecho "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
~exitfi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados
656 more lines# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya//fecha_proc=Address search hit BOTTOM without matching pattern/Address search hit BOTTOM without matching pattern/Address search hit BOTTOM without matching patternecho $rayaecho "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC_YYYYMMDD
fi

paramsPrint # $$$$ DEBUG# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayaffF=fecha
readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
 echo " "
#  ......................................................................
        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
        echo $raya
 echo "      1) 1-11"
echo "      2) 1-11-45"
echo "enter para cancelar"
        echo " "
        echo "            ESTRUCTURA:\c"
        read TIPO_ARCHIVOnew
        if [ -z $TIPO_ARCHIVOnew ]
        then
            loopEnd="1"
      exit
fi
 if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
    TIPO_ARCHIVO=$TIPO_ARCHIVOnew
32 lines#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#       si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="2"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#    si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
 ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#      ......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
32 fewer linesecho $rayaecho "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC_YYYYMMDD
fi

paramsPrint # $$$$ DEBUG
    
==$(date '+%Y%m%d')# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya=$(date '+%Y%m%d')    cantDeRegistrosTotal=$(wc -l < $archivo_prn)cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi/FECHA_PROC_YYYYMMDD# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/read FECHA_INICIOnewif [ -z $FECHA_INICIOnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$FECHA_INICIOnew" != +([0-9]) ]]
then
echo "la fecha solamente puede contener dígitos"tput bel
[ $doCuu == "1" ] && tput cuu 8
    else
    # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# debe ser menor que la fecha actual (mes o año)FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"
fi
fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm  | cut -c1-6)$CHANGE MODEHA_PROCECHA_PROC_YYYYMM=$(echo $  | cut -c1-6)FECHA_PROC_YYYYMMDD  | cut -c1-6)/$CHANGE MODEFECHA_PROC/    echo "BASE="$BASE"<"echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC_YYYYMMDD
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
[ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
[ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************$FECHA_PROC/    cantDeRegistrosTotal=$(wc -l < $archivo_prn)cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC_YYYYMMDD=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC_YYYYMMDD  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi$    FECHA_PROC/$FECHA_PROC/readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC_YYYYMMDD$FECHA_PROC
/read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente
    if [ $BASE == "E" ]
    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$FECHA_PROC_YYYYMMDD
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg$FECHA_PROC/Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 704 lines, 25094 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[634]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (VACIO)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m14.88s
user    0m10.42s
sys     0m1.19s

Inicio de Programa:  2014/05/31 15:35:22
Fin de Programa:     2014/05/31 15:35:37

 
HASTA ACÁ LLEGAMOS POR AHORA
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente
    if [ $BASE == "E" ]
    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfgu# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="0"# reposicionar el cursor por errores
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya








    REPLACE 1 CHAR1po$CHANGE MODEluego de unn error:%s/  *$//exitfi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generadosecho "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente
    if [ $BASE == "E" ]
    then
archivo=$NOM_ARCHIVO
    else
# $$$$ no será posible ejecutar dos procesos en el mismo día
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# $$$$ no será posible ejecutar dos procesos en el mismo día# $$$$ nINPUT MODEe # $$$$ no será posible ejecutar dos procesos en el mismo día# $$$$ $CHANGE MODEhabría que agregar un $$ a l fila name ...REPLACE 1 CHARe$CHANGE MODEcse puede
# $$$$ se puede agregar un $$ al file name ...# $$$$ se $CHANGE MODEcontrolat si ya exister un archivo de hoy ...REPLACE 1 CHARrOPEN MODE#    # y se usa para armar todos los demás nombres de archivos del procesoeAPPEND MODE,
Oo
    

    OPEN MODE        # el nombre del archivo provisto, existente


    OPEN MODE#        # un nombre armado con P"PERipley" 7y la fecha de hoyde ho$CHANGE MODEdel día











13 lines yanked
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit


OPEN MODE
OPEN MODE# $$$$ no será posible ejecutar dos procesos en el mismo díareadTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
32 lines


    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit

32 fewer linesreadTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
    echo " "
#......................................................................
32 more lines



    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit

32 fewer lines

# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDsread continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par
14 lines yanked#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log# DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados
    # arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par
14 more lines#*******************************************************************************#*******************************************************************************
OPEN MODEN# Nombres de los archivos

    # arm$CHANGE MODEmuestra
    /=////////
#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

12 lines deleted    echo $raya
    echo "SCOTBATCH: cálculo de scores"
echo "$CHANGE MODEARCHIVOS:"
OPEN MODE    ls $TEMPORALES/$archivo*
    




    

    echo $raya
    echo " "
    echo " "

    #*******************************************************************************:w"sh-PE-Ripley" 723 lines, 25842 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.58s
user    0m0.06s
sys     0m0.08s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[639]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m12.96s
user    0m10.58s
sys     0m1.17s

Inicio de Programa:  2014/05/31 15:57:52
Fin de Programa:     2014/05/31 15:58:05

----------------------------------------------------------------------
ARCHIVOS:
 
/d/iccol/desarrollo/temporales/PERipley20140531.AADCOO
/d/iccol/desarrollo/temporales/PERipley20140531.AADFGE
/d/iccol/desarrollo/temporales/PERipley20140531.AADHVT
/d/iccol/desarrollo/temporales/PERipley20140531.AADINT
/d/iccol/desarrollo/temporales/PERipley20140531.AADTRO
/d/iccol/desarrollo/temporales/PERipley20140531.ACIEAA
/d/iccol/desarrollo/temporales/PERipley20140531.CARACT
/d/iccol/desarrollo/temporales/PERipley20140531.inc
/d/iccol/desarrollo/temporales/PERipley20140531.log
/d/iccol/desarrollo/temporales/PERipley20140531.PREDHD
/d/iccol/desarrollo/temporales/PERipley20140531.prn
/d/iccol/desarrollo/temporales/PERipley20140531.QUANTO
/d/iccol/desarrollo/temporales/PERipley20140531.ULTIMO
/d/iccol/desarrollo/temporales/PERipley20140531.val
/d/iccol/desarrollo/temporales/PERipley20140531.vre
 
 
----------------------------------------------------------------------
HASTA ACÁ LLEGAMOS POR AHORA
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:q
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:w
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981z
el dato ingresado debe ser numérico
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981000
longitud incorrecta (máximo  dígitos)
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción,
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:w
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:h
 
                  FECHA INICIAL DE PROCESO HISTÓRICO
----------------------------------------------------------------------
      Ingrese fecha inicial de proceso,
      enter para cancelar
 
            FECHA INICIO de PROCESO AAAAMMDD:20130101
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=H<
FECHA_INICIO=20130101<
I;1;1;N;00900047981;H;20130101
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: H  histórico, desde: 20130101
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
sanata para fecha 201301 es 1
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.15s
user    0m0.06s
sys     0m0.06s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[639]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m11.20s
user    0m10.38s
sys     0m0.76s

Inicio de Programa:  2014/05/31 16:04:28
Fin de Programa:     2014/05/31 16:04:40

----------------------------------------------------------------------
ARCHIVOS:
 
/d/iccol/desarrollo/temporales/PERipley20140531.AADCOO
/d/iccol/desarrollo/temporales/PERipley20140531.AADFGE
/d/iccol/desarrollo/temporales/PERipley20140531.AADHVT
/d/iccol/desarrollo/temporales/PERipley20140531.AADINT
/d/iccol/desarrollo/temporales/PERipley20140531.AADTRO
/d/iccol/desarrollo/temporales/PERipley20140531.ACIEAA
/d/iccol/desarrollo/temporales/PERipley20140531.CARACT
/d/iccol/desarrollo/temporales/PERipley20140531.inc
/d/iccol/desarrollo/temporales/PERipley20140531.log
/d/iccol/desarrollo/temporales/PERipley20140531.PREDHD
/d/iccol/desarrollo/temporales/PERipley20140531.prn
/d/iccol/desarrollo/temporales/PERipley20140531.QUANTO
/d/iccol/desarrollo/temporales/PERipley20140531.ULTIMO
/d/iccol/desarrollo/temporales/PERipley20140531.val
/d/iccol/desarrollo/temporales/PERipley20140531.vre
 
 
----------------------------------------------------------------------
HASTA ACÁ LLEGAMOS POR AHORA
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log


#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "



#*******************************************************************************
    # DEBUG: termina acá
    echo " "
    echo $raya
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya/nit//echo "2) 1-11-45"echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[ $doCuu == "1" ] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
[ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
[ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"elsetput bel[ $doCuu == "1" ] &&  tput cuu 8fidone}readID_EXTRACT() {#*******************************************************************************# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor#*******************************************************************************readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
criterioExtraccion="NIT"
inputLen=11
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el "$criterioExtraccion" para extracción,"
echo "enter para cancelar"
echo " "
tput el# borra caracteres sobrantes
echo "$criterioExtraccion:\c"
read ID_EXTRACTnew
tput el# borra mensaje de error
if [ -z $ID_EXTRACTnew ]
then
loopEnd="1"
exit
fi
# debe ser solo números
if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
then
echo "el dato ingresado debe ser numérico"tput bel
[ $doCuu == "1" ] &&  tput cuu 8
else
# control de longitud máxima (11 o 6)if [ ${#ID_EXTRACTnew} -gt inputLen ]then
echo "longitud incorrecta (máximo "$inputlen" dígitos)"tput bel
[ $doCuu == "1" ] &&  tput cuu 8else
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"




    

    


    
=6inputLenEEeINSERT MODE ($inputLen dígitos)/gtREPLACE MODEeq

orrecta (máxim$CHANGE MODEdebe serrINSERT MODE"REPLACE MODEne#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ...
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    # DEBUG: show output >> $archivo.log 2>>$archivo.log


#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "



#*******************************************************************************
    # DEBUG: termina acá
    echo " "
    echo $raya
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************

# $# CHANGE MODEEjecución del programa 
#Nombres de los archivos#
OPEN MODEx iceprerip01-test prueba200.val prueba200.inc 2 A 20140530
OPEN MODEarchivo de entrada, archivo de entrada de inconsistencias, estructura del archivo, tipo de proceso, fecha 
del periodoINSERT MODE iceprerip011

    x iceprerip01-test prueba200.val prueba200.inc 2 A 20140530
    archivo de entrada, archivo de entrada de inconsistencias, estructura del archivo, tipo de proceso, fe
cha del periodoOPEN MODE    # nohup ---.... $$$$ activar en producción
    OPEN MODE    # $$$$echo "HASTA ACÁ LLEGAMOS POR AHORA"x $CHANGE MODEarchivo_vall p$archivo_valva$CHANGE MODEincc 2 A $CHANGE MODE$FECHA_PROC    x -test INSERT MODE$$
    exit   
OPEN MODE# Los parámetros son: 
OPEN MODE#     APPEND MODEarchivo de entrada, archivo de entrada de inconsistencias, estructura del archivo, tipo de proceso, f
echa del periodoo da$CHANGE MODE d
fe
  
,v
oa
sl
ei
cd
oa
rd
pi
 os
e
 archivo de entrada de inconsistencias, estructura del archivo, tipo de proceso, fecha del periodo#   ,$CHANGE MODE
estructura del archivo, tipo de proceso, fecha del periodoCHANGE MODE#    ,$CHANGE MODE
tipo de proceso, fecha del periodoCHANGE MODE#    ,$
fecha del periodo#    oAPPEND MODE ????ivo ????




CAPPEND MODE >> $archivo_logl >> $archivo_log.APPEND MODE $$$$ activasr en producción
    


# DEBUG: termina acá:w"sh-PE-Ripley" 734 lines, 26404 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya








    
OPEN MODE    NOHUP"=""                          # "ncontiene "nohup" en producción    # contiene "nohup" en producción    =""   NOHU   P/nohup/    [ -s $archivo_prn ] && rm $archivo_prngrep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)
    # nohup ...
    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************#Fecha y hora de ejecución    # $$$$ falta reponer nohup, quitado para las pruebas (nohup.out ilegible)#Fecha y hora de ejecución
    horaInicio=$(date)INSERT MODE# 
INSERT MODE$NUHUP OHUPINSERT MODE$NUHUP     INSERT MODE$NOHUP /    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# nohup ... $$$$ activar en producción
    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    # nohup .... $$$$ activar en producción
    x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "

$NOHUP     $NOHUP         ?    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn# cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

# print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC=$(date '+%Y%m%d')//echo "No hay un archivo de registros validados - PROCESO CANCELADO"exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    # nohup .... $$$$ activar en producción
    x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "/
$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log    /



#*******************************************************************************# DEBUG: termina acáecho " "echo $rayaecho "HASTA ACÁ LLEGAMOS POR AHORA"
exit



#*******************************************************************************
# Finalmente
#*******************************************************************************
horaFin=$(date)
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
    





#*******************************************************************************
#*******************************************************************************

    #*******************************************************************************

echo "$CHANGE MODEfin del proceso PE-"$0
    
    echo $raya




#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:
8 lines deleted




    

#*******************************************************************************
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo $raya
    exit
8 more lines#*******************************************************************************


OPEN MODE    echo "deIniciado: "horaInicio " finalizado: "$horaFinINSERT MODE$    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"        fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi# guarda en archivo .parmparamsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior    cancelado="1"fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [ $TIPO_PROC == "H" ]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut# guarda en archivo .parmparamsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [ -z "$sanata" ]
then
# $$$$ los meses del año actual no figuran ... solo enero# $$$$ eso no es así en el ambiente de producciónecho " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
fi
if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
then
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
    fi
fi    fi
fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"    SCO62="062"SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "


#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
# El proceso batch debe incluir como mensajes de salida:
# Estadísticas de Validación (PESVNO)
# Estadísticas de cálculo de Score  (SCOTBATCH)
# Nombres de los archivos generados

# Archivo Log:
# Por cada procedimiento se debe registrar la siguiente información:
#     Parámetros Procesamiento
#     Archivo de parámetros
#     Hora de inicio de procesamiento
#     Hora de fin de procesamiento#     Número de identificaciones de entrada#     Número de registros procesados#     Número de registros no procesados#     Errores#Id procesado#Descripción del error#*******************************************************************************#*******************************************************************************#*******************************************************************************~
~~
~~

#APPEND MODE    
#    
#    



# Por cada procedimiento se debe registrar la siguiente información:
~ 
  REPLACE 1 CHAR+
+
+

# Ar

+

+
+
+
+
+
+
+
+sAPPEND MODE (en el archivo .inc):w"sh-PE-Ripley" 722 lines, 25904 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>date
Saturday, May 31, 2014 05:00:51 PM COT
/d/iccol/desarrollo/macros>da  man date
Reformatting page.  Please Wait... done

User Commands                                             date(1)

NAME
     date - write the date and time

SYNOPSIS
     /usr/bin/date [-u] [ +format]

     /usr/bin/date [ -a  [-]sss.fff]

     /usr/bin/date [-u] [ [mmdd] HHMM |  mmddHHMM [cc] yy]  [.SS]

     /usr/xpg4/bin/date [-u] [ +format]

     /usr/xpg4/bin/date [ -a  [-]sss.fff]

     /usr/xpg4/bin/date [-u] [ [mmdd] HHMM |  mmddHHMM  [cc]  yy]
     [.SS]

DESCRIPTION
     The date utility writes the date and time to standard output
     or attempts to set the system date and time. By default, the
     current date and time is written.

     Specifications of native language translations of month  and
     weekday  names  are  supported.  The month and weekday names
     used for a language are based on the locale specified by the
     environment variable LC_TIME. See environ(5).

     The following is the default form for the "C" locale:

     %a %b %e %T %Z %Y

     For example,

     Fri Dec 23 10:10:42 EST 1988

OPTIONS
     The following options are supported:

     -a [-]sss.fff   Slowly adjust the time  by  sss.fff  seconds
                     (fff represents fractions of a second). This
                     adjustment can be positive or negative.  The
                     system's  clock  is  sped  up or slowed down
                     until  it  has  drifted  by  the  number  of
                     seconds  specified.  Only the super-user may
                     adjust the time.
--More--(18%)
     -u              Display (or set) the date in Greenwich  Mean
                     Time  (GMT-universal  time),  bypassing  the
                     normal conversion to (or from) local time.

SunOS 5.10          Last change: 11 May 2004                    1

User Commands                                             date(1)

OPERANDS
     The following operands are supported:

     +format         If the argument begins with +, the output of
                     date is the result of passing format and the
                     current time to strftime().  date  uses  the
                     conversion   specifications  listed  on  the
                     strftime(3C) manual page, with  the  conver-
                     sion  specification  for  %C  determined  by
                     whether /usr/bin/date or  /usr/xpg4/bin/date
                     is used:

                     /usr/bin/date           Locale's  date   and
                                             time representation.
                                             This is the  default
                                             output for date.

                     /usr/xpg4/bin/date      Century   (a    year
                                             divided  by  100 and
                                             truncated   to    an
                                             integer)     as    a
                                             decimal number  [00-
                                             99].

                     The string is always terminated with a  NEW-
                     LINE.  An argument containing blanks must be
                     quoted; see the EXAMPLES section.

     mm              Month number

     dd              Day number in the month

     HH              Hour number (24 hour system)

     MM              Minute number

     SS              Second number

SunOS 5.10          Last change: 11 May 2004                    2
--More--(40%)
User Commands                                             date(1)

     cc              Century (a year divided by 100 and truncated
                     to  an integer) as a decimal number [00-99].
                     For example, cc is 19 for the year 1988  and
                     20 for the year 2007.

     yy              Last two digits of the year number. If  cen-
                     tury  (cc)  is not specified, then values in
                     the range 69-99 shall refer to years 1969 to
                     1999  inclusive,  and  values  in  the range
                     00-68 shall refer to  years  2000  to  2068,
                     inclusive.

     The month, day, year number, and century may be omitted; the
     current  values  are  applied  as defaults. For example, the
     following entry:

     example% date 10080045

     sets the date to Oct 8, 12:45 a.m. The current year  is  the
     default  because no year is supplied. The system operates in
     GMT. date takes care of the conversion  to  and  from  local
     standard  and  daylight time. Only the super-user may change
     the date. After successfully setting the date and time, date
     displays  the  new date according to the default format. The
     date command uses TZ to  determine  the  correct  time  zone
     information; see environ(5).

EXAMPLES
     Example 1: Generating Output

     The following command:

     example% date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'

     generates as output

     DATE: 08/01/76

     TIME: 14:45:05

     Example 2: Setting the Current Time

     The following command sets the current time to 12:34:56:

     example# date 1234.56
--More--(59%)
SunOS 5.10          Last change: 11 May 2004                    3

User Commands                                             date(1)

     Example 3: Setting Another Time and Date in  Greenwich  Mean
     Time

     The following command sets the date to  January  1st,  12:30
     am, 2000:

     example# date -u 010100302000

     This is displayed as:

     Thu Jan 01 00:30:00 GMT 2000

ENVIRONMENT VARIABLES
     See environ(5) for descriptions of the following environment
     variables  that  affect the execution of date: LANG, LC_ALL,
     LC_CTYPE, LC_TIME, LC_MESSAGES, and NLSPATH.

     TZ       Determine the timezone in which the time  and  date
              are  written, unless the -u option is specified. If
              the TZ variable is not set and the -u is not speci-
              fied, the system default timezone is used.

EXIT STATUS
     The following exit values are returned:

     0        Successful completion.

     >0       An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

  /usr/bin/date
     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | enabled                     |
    |_____________________________|_____________________________|

  /usr/xpg4/bin/date
--More--(76%)/d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%nTIME:%H:%M:%S
> ^C
/d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'
DATE: 05/31/14
TIME:17:02:36
/d/iccol/desarrollo/macros>date %H:%M:%S
date: bad conversion
/d/iccol/desarrollo/macros>date '%H:%M:%S'
date: bad conversion
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>date '%H:%M:%S'date %H:%M:%S   date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'/d/iccol/desarrollo/macros>
DATE: 05/31/14
TIME:17:03:26
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'/d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%nT              
> ^K^[  > ^K
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%n date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'/d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%               
/d/iccol/desarrollo/macros>^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y%n date '+DATE: %m/%d/%y%nTIME:%H:%M:%S'/d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y  
DATE: 05/31/14  TIME:17:04:33
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+DATE: %m/%d/%y  TIME:%H:%M:%S'/d/iccol/desarrollo/macros> date '+ %m/%d/%y  TIME:%H:%M:%S'       TIME:%H:%M:%S'          TIME:%H:%M:%S' TIME:%H:%M:%S' 
TIME:17:04:56
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+TIME:%H:%M:%S' date '+T:%H:%M:%S'    
:17:05:10
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> date '+:%H:%M:%S' date '+%H:%M:%S' 
17:05:20
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "


#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"/date///    [ -s archivo_prn_VALI ] && rm archivo_prn_VALIcantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date)
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
  readBASE# I interna, C cliente
if [ $BASE == "E" ]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subsd)INSERT MODEdate '+%H:%M:%S'//# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "


#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date)
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
    horaInicio=$(date '+%H:%M:%S')== horaInicio=$(date '+%H:%M:%S')
#   +     Descripción del error:w"sh-PE-Ripley" 722 lines, 25928 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg date '+%H:%M:%S'fg                 h-PE-Ripley
ksh: h-PE-Ripley:  not found
/d/iccol/desarrollo/macros>Is
ksh: Is:  not found
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>Ish-PE-Ripleysh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;H;20130101
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción (11 dígitos),
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[638]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m11.16s
user    0m10.39s
sys     0m0.74s

Inicio de Programa:  2014/05/31 17:08:21
Fin de Programa:     2014/05/31 17:08:33

       
 ** Datacredito*   MAYOR INFORMACION RIPLEY  **
       
iceprerip01.cbl    VERSION:MAY/2014 
       
       
W-PARAMETROS = PERipley20140531.val PERipley20140531.inc 2 A 20140531     
ARCH-ENTRADA = PERipley20140531.val           
ARCH-INCONC = PERipley20140531.inc           
       
REG. LEIDOS   => 00000742
REG. GRABADOS => 00000742
       
                
+---------------------------------------------------+
|      *** RESULTADOS DEL INFORME       ***         |
+----------------------------------+----------------+
|     DETALLE CALIFICACION         | CALF |  # REG. |
+----------------------------------+------+---------+
| - Registros con informacion      | O.K  |        0
| - Registros sin informacion      | SIN  |      742
| - Registros inconsistencias      | INC  |       23
+----------------------------------+------+---------+
| - Total Registro procesados             |      742
+----------------------------------+------+---------+

real    0m0.23s
user    0m0.06s
sys     0m0.05s

Inicio de Programa:  2014/05/31 17:08:33
Fin de Programa:     2014/05/31 17:08:33

----------------------------------------------------------------------
ARCHIVOS:
 
/d/iccol/desarrollo/temporales/PERipley20140531.AADCOO
/d/iccol/desarrollo/temporales/PERipley20140531.AADFGE
/d/iccol/desarrollo/temporales/PERipley20140531.AADHVT
/d/iccol/desarrollo/temporales/PERipley20140531.AADINT
/d/iccol/desarrollo/temporales/PERipley20140531.AADTRO
/d/iccol/desarrollo/temporales/PERipley20140531.ACIEAA
/d/iccol/desarrollo/temporales/PERipley20140531.CARACT
/d/iccol/desarrollo/temporales/PERipley20140531.DATINF
/d/iccol/desarrollo/temporales/PERipley20140531.ESTADI
/d/iccol/desarrollo/temporales/PERipley20140531.inc
/d/iccol/desarrollo/temporales/PERipley20140531.log
/d/iccol/desarrollo/temporales/PERipley20140531.PREDHD
/d/iccol/desarrollo/temporales/PERipley20140531.prn
/d/iccol/desarrollo/temporales/PERipley20140531.QUANTO
/d/iccol/desarrollo/temporales/PERipley20140531.ULTIMO
/d/iccol/desarrollo/temporales/PERipley20140531.val
/d/iccol/desarrollo/temporales/PERipley20140531.vre
 
 
----------------------------------------------------------------------
fin del proceso sh-PE-Ripley
Iniciado: 17:08:01  finalizado: 17:08:33
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "


#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"








    

OPEN MODE    cancelado="0"                   # las funciones ponen "1" para cancelar todoINSERT MODE        /   $CHANGE MODE    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /echo "${s}actual"fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
PESVNO_INPUT="archivo_prn_VALI"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
PESVNO_INPUT=$archivo_prn
    fi

print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI$    /$    /   $    
/cantDeRegistrosTotal=$(wc -l < $archivo_prn)
cantDeRegistrosVal=$(wc -l < $archivo_val)
cantDeRegistrosInc=$(wc -l < $archivo_inc)
echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
head -10 $archivo.log
if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
then   $    
/echo " "   $    
/$    
/echo $raya   $    
/$    
/echo "Las cantidades de registros no cuadran: proceso cancelado"   $    
/$    
/echo $raya   $    
/$    
/cancelado="1"   $    
/$    
/fi$    
/
#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
echo $raya
echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
ejecutar_extraccion
echo "Finalizada la extracción"
    fi

[ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit# control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    /$    




/$    



/$    


/$    

/   $    
/scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"   $    
/
echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val   $    
/$NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log   $    
/# DEBUG: show output >> $archivo.log 2>>$archivo.log   $        $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log# DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "


#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada/$#    /$    /Address search hit BOTTOM without matching pattern$         $CHANGE MODE    /Address search hit BOTTOM without matching pattern?Address search hit TOP without matching pattern

#   + Número de registros procesados[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción (11 dígitos),
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:n
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:a
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=A<
FECHA_INICIO=20140531<
I;1;1;N;00900047981;A;20140531
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
sh-PE-Ripley[638]: test: argument expected
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m11.14s
user    0m10.38s
sys     0m0.74s

Inicio de Programa:  2014/05/31 17:20:14
Fin de Programa:     2014/05/31 17:20:25

       
 ** Datacredito*   MAYOR INFORMACION RIPLEY  **
       
iceprerip01.cbl    VERSION:MAY/2014 
       
       
W-PARAMETROS = PERipley20140531.val PERipley20140531.inc 2 A 20140531     
ARCH-ENTRADA = PERipley20140531.val           
ARCH-INCONC = PERipley20140531.inc           
       
REG. LEIDOS   => 00000742
REG. GRABADOS => 00000742
       
                
+---------------------------------------------------+
|      *** RESULTADOS DEL INFORME       ***         |
+----------------------------------+----------------+
|     DETALLE CALIFICACION         | CALF |  # REG. |
+----------------------------------+------+---------+
| - Registros con informacion      | O.K  |        0
| - Registros sin informacion      | SIN  |      742
| - Registros inconsistencias      | INC  |       23
+----------------------------------+------+---------+
| - Total Registro procesados             |      742
+----------------------------------+------+---------+

real    0m0.12s
user    0m0.06s
sys     0m0.04s

Inicio de Programa:  2014/05/31 17:20:25
Fin de Programa:     2014/05/31 17:20:25

----------------------------------------------------------------------
ARCHIVOS:
 
/d/iccol/desarrollo/temporales/PERipley20140531.AADCOO
/d/iccol/desarrollo/temporales/PERipley20140531.AADFGE
/d/iccol/desarrollo/temporales/PERipley20140531.AADHVT
/d/iccol/desarrollo/temporales/PERipley20140531.AADINT
/d/iccol/desarrollo/temporales/PERipley20140531.AADTRO
/d/iccol/desarrollo/temporales/PERipley20140531.ACIEAA
/d/iccol/desarrollo/temporales/PERipley20140531.CARACT
/d/iccol/desarrollo/temporales/PERipley20140531.DATINF
/d/iccol/desarrollo/temporales/PERipley20140531.ESTADI
/d/iccol/desarrollo/temporales/PERipley20140531.inc
/d/iccol/desarrollo/temporales/PERipley20140531.log
/d/iccol/desarrollo/temporales/PERipley20140531.PREDHD
/d/iccol/desarrollo/temporales/PERipley20140531.prn
/d/iccol/desarrollo/temporales/PERipley20140531.QUANTO
/d/iccol/desarrollo/temporales/PERipley20140531.ULTIMO
/d/iccol/desarrollo/temporales/PERipley20140531.val
/d/iccol/desarrollo/temporales/PERipley20140531.vre
 
 
----------------------------------------------------------------------
fin del proceso sh-PE-Ripley
Iniciado: 17:19:55  finalizado: 17:20:25
----------------------------------------------------------------------
/d/iccol/desarrollo/macros> Registros sin informacion      | SIN  |      742                                                 cp sh-PE-Ripley sh-PE-Ripley-BUP2
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log# DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#....................................................................../san[-_]*ata# pregunta al ope si está satisfechocontinuar="_"
while [ $continuar == "_" ]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [ -z $continuar ]then
parmsOK="1"
continuar="listo"else
if [ $continuar == "1" ]then
:
fi
fi
done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
# el nombre del archivo provisto, existente
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name ...
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK/archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
:num onExtra characters at end of "number" command
:set number   534        echo " "535        echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
   536        read continuar
   537        if [ -z $continuar ]
   538        then
   539        parmsOK="1"
   540        continuar="listo"
   541        else
   542        if [ $continuar == "1" ]
   543        then
   544 :
   545  fi
   546  fi
   547          done
   548      done
   549
   550  #********
   551  # Nombres de los archivos, SANATA
   552  #********
   553      # la variable archivo es el nombre de la base, interna o del cliente,
   554      # y se usa para armar todos los demás nombres de archivos del proceso
   555      if [ $BASE == "E" ]
   556      then
   557          # el nombre del archivo provisto, existente
   558          archivo=$NOM_ARCHIVO
   559      else
   560          # un nombre armado con "PERipley" y la fecha del día
   561          # $$$$ no será posible ejecutar dos procesos en el mismo día
   562          # $$$$ se puede agregar un $$ al file name ...
   563          # $$$$ se puede controlar si ya existe un archivo de hoy ...
   564          archivo="PERipley"$FECHA_PROC
   565          NOM_ARCHIVO=$archivo
   566fi
   567      # arma los nombres de los archivos del proceso en base al anterior
   568      archivo_prn=$archivo.prn
   569      archivo_val=$archivo.val
   570      archivo_inc=$archivo.inc
   571      archivo_txt=$archivo.txt
   572      archivo_DATINF=$archivo.DATINF
   573      archivo_ESTADI=$archivo.ESTADI
   574      archivo_QUANTO=$archivo.QUANTO
   575      archivo_icgs65=$archivo.icgs65
   576      archivo_OK=$cadena12.OK
   577      archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
   578      archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
   579      archivo_par=$archivo.par
   580
   581  #********
   582  # Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
   583  # de proceso FECHA_INICIO
584  # Ejemplos de variables exportadas:     1  # /d/iccol/desarrollo/macros/sh-PE-Ripley2  #sh-PE-Ripley.V.1.00013  #*******************************************************************************4  #SHELL-ID:     sh-PE-Ripley5  #DATE-WRITTEN: 2014/05/236  #LAST-UPDATE:  2014/05/237  #AUTHOR:Globant - JL8  #*******************************************************************************9  # Definición de constantes
    10doCuu="1"# reposicionar el cursor luego de un error
    11NOHUP=""# contiene "nohup" en producción
    12cancelado="0"# las funciones ponen "1" para cancelar todo
    13P_SERVER_DEV="codes"# hostname de la máquina de develop
    14raya="----------------------------------------------------------------------"
    15ASCIIBanner="
    16######  #######    ######
    17#     # ##     # # #####  ####### #   #
    18#     # ##     # # #    # ### #
    19######  ###########  # #    # ######    #
    20###   #   # #####  ###
    21###    #  # ####
    22########    #     # # ####### ######   #
    23  "
24
25  # Parámetros y sus valores iniciales
    26FECHA_PROC=$(date '+%Y%m%d')
    27  #   "I": la lista de IDs es interna  "E": provista x cliente
    28BASE="E"
    29  #si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
    30NOM_ARCHIVO=" "
    31TIPO_ARCHIVO="2"
    32  #si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
    33TIPO_EXTRACT="N"
    34  #si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
    35ID_EXTRACT=" "
    36  #   Tipo de proceso "A": actual  "H": histórico
    37TIPO_PROC="A"
    38  #Si TIPO_PROC="H": la fecha inicio de proceso histórico
    39FECHA_INICIO=" "
    40
41  readBASE() {
    42  #*******************************************************************************
    43  # Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
    44  #*******************************************************************************
    45loopEnd="0"
    46while [ $loopEnd == "0" ]
    47do
    48echo " "
    49  #....................................................................../   528# pregunta al ope si está satisfecho529continuar="_"
   530while [ $continuar == "_" ]
   531do
   532echo " "
   533echo " "
   534echo " "
   535echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
   536read continuar
   537if [ -z $continuar ]
   538then
   539parmsOK="1"
   540continuar="listo"
   541else
   542if [ $continuar == "1" ]
   543then
   544:
   545fi
   546fi
   547done
   548done
   549
550  #*******************************************************************************
   551  # Nombres de los archivos, SANATA
   552  #*******************************************************************************
   553# la variable archivo es el nombre de la base, interna o del cliente,
   554# y se usa para armar todos los demás nombres de archivos del proceso
   555if [ $BASE == "E" ]
   556then
   557# el nombre del archivo provisto, existente
   558archivo=$NOM_ARCHIVO
   559else
   560# un nombre armado con "PERipley" y la fecha del día
   561# $$$$ no será posible ejecutar dos procesos en el mismo día
   562# $$$$ se puede agregar un $$ al file name ...
   563# $$$$ se puede controlar si ya existe un archivo de hoy ...
   564archivo="PERipley"$FECHA_PROC
   565NOM_ARCHIVO=$archivo
   566fi
   567# arma los nombres de los archivos del proceso en base al anterior
   568archivo_prn=$archivo.prn
   569archivo_val=$archivo.val
   570archivo_inc=$archivo.inc
   571archivo_txt=$archivo.txt
   572archivo_DATINF=$archivo.DATINF
   573archivo_ESTADI=$archivo.ESTADI
   574archivo_QUANTO=$archivo.QUANTO
   575archivo_icgs65=$archivo.icgs65
   576archivo_OK=$cadena12.OK/   577archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
578archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
579archivo_par=$archivo.par
580
581  #*******************************************************************************
582  # Proceso histórico: ubica la SANATA que corresponde a la fecha inicial   581  #*******************************************************************************582  # Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
   583  # de proceso FECHA_INICIO
   584  # Ejemplos de variables exportadas:
   585  # DATABASE=/san_ata_1/200212/icdb
   586  # DATABASE=/san_ata_2/200412/icdb
   587  # DATABASE=/san_ata_3/200512/icdb
   588  # EXTFH=/san_ata_2/200505/extfh.cfg
   589  # EXTFH=/san_ata_2/200504/extfh.cfg
   590  # EXTFH=/san_ata_3/200603/extfh.cfg
   591  # EXTFH=/san_ata_3/200601/extfh.cfg
   592  #*******************************************************************************
   593if [ $TIPO_PROC == "H" ]
   594then
   595FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
   596sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
   597echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
   598if [ -z "$sanata" ]
   599then
   600# $$$$ los meses del año actual no figuran ... solo enero
   601# $$$$ eso no es así en el ambiente de producción
   602echo " "
   603echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
   604echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
   605read sanata
   606fi
   607if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
   608then
   609export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
   610echo $EXTFH
   611export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
   612echo $DATABASE
   613fi
   614fi
   615
616  #*******************************************************************************
   617  # Extracción
   618  #*******************************************************************************
   619cd $TEMPORALES
   620if [ $BASE = "I" ]
   621then
   622echo $raya
   623echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
   624ejecutar_extraccion
   625echo "Finalizada la extracción"
   626fi
   627
628[ -s $archivo.log ] && rm $archivo.log
   629

       600
1
2
3
4
5
6
7
08
09
0
1
2
3
4
5
6
7
18
19
0
1
2
3
4
5
6
7
628  #*******************************************************************************
   629  # PESVNO: validación de IDs



   604echo " "5
6
7
8
9
10
1
2
3
4
5
6
7
8
9
20
1
2
3
4
5
6
7
8
9

25 more lines in file after visual
:^\^[
What?
:
    613fi
:vi
   613fi614
615  #*******************************************************************************
   616  # Extracción
   617  #*******************************************************************************
   618cd $TEMPORALES
   619if [ $BASE = "I" ]
   620then
   621echo $raya
   622echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
   623ejecutar_extraccion
   624echo "Finalizada la extracción"
   625fi
   626
627[ -s $archivo.log ] && rm $archivo.log
   628
629  #*******************************************************************************
   630  # PESVNO: validación de IDs
   631  # Valida los registros del archivo .prn y graba archivos .val y .inc
   632  #*******************************************************************************
   633[ -s $archivo_val ] && rm $archivo_val
   634[ -s $archivo_inc ] && rm $archivo_inc
   635echo $raya
   636echo "PESVNO: validación de IDs"
   637ejecutar_validacion
   638[ $cancelado == "1" ] && exit
   639
640# control: si no hay un archivo .val se cancela el proceso
   641if [ ! -s $archivo_val ]
   642then
   643echo "No hay un archivo de registros validados - PROCESO CANCELADO"
   644exit
   645fi
   646
647  #*******************************************************************************
   648  # SCOTBATCH: cálculo de scores
   649  # ...
   650  #*******************************************************************************
   651echo $raya
   652echo "SCOTBATCH: cálculo de scores"
   653formato="VAL"
   654SCO41="041"
   655SCO45="045"
   656SCO47="047"
   657SCO48="048"
   658SCO49="049"
   659SCO62="062"
   660SCO67="067"
   661SCO95="095"   612fi   611echo $DATABASE   610export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"   609echo $EXTFH   608export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"   607then   606if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]   605fi   604echo " "   603read sanata   602echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"   601echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"   600echo " "   599then   598if [ -z "$sanata" ]   597echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata   596sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)   595FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )   594then   593if [ $TIPO_PROC == "H" ]   592  #*******************************************************************************   591  # EXTFH=/san_ata_3/200601/extfh.cfg   590  # EXTFH=/san_ata_3/200603/extfh.cfg   589  # EXTFH=/san_ata_2/200504/extfh.cfg    fi$CHANGE MODE        $       605
6
07
08
09
0
1
2
3
4
5
6
17
18
19
0
1
2
3
4
5
6
27
28
29
0
1
2
3
4
635[ $cancelado == "1" ] && exit
   636
637# control: si no hay un archivo .val se cancela el proceso   605fi
   606if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
   607then8
9
10
11
12
3
4
5
6
7
8
9
20
21
22
3
4
5
6
7
8
9
30
31
32
3
4
5
6
7
/FECHA_PROC_YYYYMM     1  # /d/iccol/desarrollo/macros/sh-PE-Ripley2  #sh-PE-Ripley.V.1.00013  #*******************************************************************************4  #SHELL-ID:     sh-PE-Ripley5  #DATE-WRITTEN: 2014/05/236  #LAST-UPDATE:  2014/05/237  #AUTHOR:Globant - JL8  #*******************************************************************************9  # Definición de constantes
    10doCuu="1"# reposicionar el cursor luego de un error
    11NOHUP=""# contiene "nohup" en producción
    12cancelado="0"# las funciones ponen "1" para cancelar todo
    13P_SERVER_DEV="codes"# hostname de la máquina de develop
    14raya="----------------------------------------------------------------------"
    15ASCIIBanner="
    16######  #######    ######
    17#     # ##     # # #####  ####### #   #
    18#     # ##     # # #    # ### #
    19######  ###########  # #    # ######    #
    20###   #   # #####  ###
    21###    #  # ####
    22########    #     # # ####### ######   #
    23  "
24
25  # Parámetros y sus valores iniciales
    26FECHA_PROC=$(date '+%Y%m%d')
    27  #   "I": la lista de IDs es interna  "E": provista x cliente
    28BASE="E"
    29  #si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
    30NOM_ARCHIVO=" "
    31TIPO_ARCHIVO="2"
    32  #si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
    33TIPO_EXTRACT="N"
    34  #si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
    35ID_EXTRACT=" "
    36  #   Tipo de proceso "A": actual  "H": histórico
    37TIPO_PROC="A"
    38  #Si TIPO_PROC="H": la fecha inicio de proceso histórico
    39FECHA_INICIO=" "
    40
41  readBASE() {
    42  #*******************************************************************************
    43  # Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
    44  #*******************************************************************************
    45loopEnd="0"
    46while [ $loopEnd == "0" ]
    47do
    48echo " "
    49  #....................................................................../   290read FECHA_INICIOnew291if [ -z $FECHA_INICIOnew ]
   292then
   293loopEnd="1"
   294exit
   295fi
   296# debe ser solo números
   297if [[ "$FECHA_INICIOnew" != +([0-9]) ]]
   298then
   299echo "la fecha solamente puede contener dígitos"
   300tput bel
   301[ $doCuu == "1" ] && tput cuu 8
   302else
   303# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
   304# [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
   305if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
   306then
   307echo "la fecha es inválida, anterior a 2000 o posterior a 2029"
   308tput bel
   309[ $doCuu == "1" ] &&  tput cuu 8
   310else
   311# debe ser menor que la fecha actual (mes o año)
   312FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)
   313FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)
   314if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]
   315then
   316echo "la fecha desde debe ser anterior a la actual"
   317tput bel
   318[ $doCuu == "1" ] &&  tput cuu 8
   319else
   320# todo bien
   321FECHA_INICIO=$FECHA_INICIOnew
   322FECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMM
   323loopEnd="1"
   324fi
   325fi
   326fi
   327done
   328  }
   329
330
331
332
333  paramsGet() {
   334  #*******************************************************************************
   335  # Lee los parámetros de la corrida anterior
   336  #*******************************************************************************
   337  #   asegura que exista el arch de parámetros general
   338[ ! -f $0.parm ] && touch $0.parm//   462cantDeRegistrosVal=$(wc -l < $archivo_val)463cantDeRegistrosInc=$(wc -l < $archivo_inc)
   464echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc
" total:" $cantDeRegistrosTotal
   465head -10 $archivo.log
   466if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
   467then
   468echo " "
   469echo $raya
   470echo "Las cantidades de registros no cuadran: proceso cancelado"
   471echo $raya
   472cancelado="1"
   473fi
   474  }
   475
476  #*******************************************************************************
   477  #*******************************************************************************
   478  #MAIN
   479  #*******************************************************************************
   480  #*******************************************************************************
   481#Fecha y hora de ejecución
   482horaInicio=$(date '+%H:%M:%S')
   483FECHA_PROC=$(date '+%Y%m%d')
   484FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)
   485
486clear
   487echo $raya
   488  #   banner "PE Ripley"
   489echo "$ASCIIBanner"
   490echo $raya
   491
492  #*******************************************************************************
   493  # Lectura de parámetros en la terminal
   494  #   carga los valores del archivo .parm
   495paramsGet
   496  #   lee el set de parámetros hasta que sea OK
   497parmsOK="0"
   498while [ $parmsOK == "0" ]
   499do
   500readBASE# I interna, C cliente
   501if [ $BASE == "E" ]
   502then
   503readNOM_ARCHIVO# nombre del archivo base
   504readTIPO_ARCHIVO# 0 1-11, 1 1-11-45
   505else
   506readTIPO_EXTRACT# N NIT, C cod subs
   507readID_EXTRACT# NIT o cos subs
   508fi
   509readTIPO_PROC# A actual, H histórico/   583  # de proceso FECHA_INICIO584  # Ejemplos de variables exportadas:
   585  # DATABASE=/san_ata_1/200212/icdb
   586  # DATABASE=/san_ata_2/200412/icdb
   587  # DATABASE=/san_ata_3/200512/icdb
   588  # EXTFH=/san_ata_2/200505/extfh.cfg
   589  # EXTFH=/san_ata_2/200504/extfh.cfg
   590  # EXTFH=/san_ata_3/200603/extfh.cfg
   591  # EXTFH=/san_ata_3/200601/extfh.cfg
   592  #*******************************************************************************
   593if [ $TIPO_PROC == "H" ]
   594then
   595FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
   596sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
   597echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
   598if [ -z "$sanata" ]
   599then
   600echo " "
   601echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
   602echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
   603read sanata
   604echo " "
   605fi
   606if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
   607then
   608export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
   609echo $EXTFH
   610export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
   611echo $DATABASE
   612fi
   613fi
   614
615  #*******************************************************************************
   616  # Extracción
   617  #*******************************************************************************
   618cd $TEMPORALES
   619if [ $BASE = "I" ]
   620then
   621echo $raya
   622echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
   623ejecutar_extraccion
   624echo "Finalizada la extracción"
   625fi
   626
627[ -s $archivo.log ] && rm $archivo.log
   628
629  #*******************************************************************************
   630  # PESVNO: validación de IDs
   631  # Valida los registros del archivo .prn y graba archivos .val y .inc//   642then643echo "No hay un archivo de registros validados - PROCESO CANCELADO"
   644exit
   645fi
   646
647  #*******************************************************************************
   648  # SCOTBATCH: cálculo de scores
   649  # ...
   650  #*******************************************************************************
   651echo $raya
   652echo "SCOTBATCH: cálculo de scores"
   653formato="VAL"
   654SCO41="041"
   655SCO45="045"
   656SCO47="047"
   657SCO48="048"
   658SCO49="049"
   659SCO62="062"
   660SCO67="067"
   661SCO95="095"
   662SCO99="099"
   663scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"
   664
665echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
   666$NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
   667# DEBUG: show output >> $archivo.log 2>>$archivo.log
   668
669  #*******************************************************************************
   670  # Ejecución del programa iceprerip01
   671  # Los parámetros son:
   672  #    archivo de entrada de validados
   673  #    archivo de entrada de inconsistencias
   674  #    estructura del archivo ????
   675  #    tipo de proceso ????
   676  #    fecha del periodo
   677  #*******************************************************************************
   678$NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log
   679
680  #*******************************************************************************
   681  # Nombres de los archivos
   682  #*******************************************************************************
   683# muestra los nombres de los archivos del proceso
   684echo $raya
   685echo "ARCHIVOS:"
   686echo " "
   687ls $TEMPORALES/$archivo*
   688echo " "
   689
690  #*******************************************************************************//Address search hit BOTTOM without matching pattern??   583  # de proceso FECHA_INICIO584  # Ejemplos de variables exportadas:
   585  # DATABASE=/san_ata_1/200212/icdb
   586  # DATABASE=/san_ata_2/200412/icdb
   587  # DATABASE=/san_ata_3/200512/icdb
   588  # EXTFH=/san_ata_2/200505/extfh.cfg
   589  # EXTFH=/san_ata_2/200504/extfh.cfg
   590  # EXTFH=/san_ata_3/200603/extfh.cfg
   591  # EXTFH=/san_ata_3/200601/extfh.cfg
   592  #*******************************************************************************
   593if [ $TIPO_PROC == "H" ]
   594then
   595FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
   596sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
   597echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
   598if [ -z "$sanata" ]
   599then
   600echo " "
   601echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
   602echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
   603read sanata
   604echo " "
   605fi
   606if [ $FECHA_PROC_YYYYMM -gt $FECHA_PROC_YYYYMM ]
   607then
   608export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
   609echo $EXTFH
   610export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
   611echo $DATABASE
   612fi
   613fi
   614
615  #*******************************************************************************
   616  # Extracción
   617  #*******************************************************************************
   618cd $TEMPORALES
   619if [ $BASE = "I" ]
   620then
   621echo $raya
   622echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
   623ejecutar_extraccion
   624echo "Finalizada la extracción"
   625fi
   626
627[ -s $archivo.log ] && rm $archivo.log
   628
629  #*******************************************************************************
   630  # PESVNO: validación de IDs
   631  # Valida los registros del archivo .prn y graba archivos .val y .inc//   605
6
07
08
09
0
1
2
3
4
5
6
17
18
19
0
1
2
3
4
5
6
27
28
   629  #*******************************************************************************
   630[ -s $archivo_val ] && rm $archivo_val
   631[ -s $archivo_inc ] && rm $archivo_inc:w"sh-PE-Ripley" 718 lines, 25965 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgcp sh-PE-Ripley sh-PE-Ripley-BUP2/d/iccol/desarrollo/macros>sh-PE-Ripley                     /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;N;00900047981;A;20140531
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCIÓN:n
 
                        NIT PARA LA EXTRACCIÓN
----------------------------------------------------------------------
      Ingrese el  NIT para extracción (11 dígitos),
      enter para cancelar
 
                    NIT:00900047981
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter para cancelar
 
            TIPO de PROCESO:h
 
                  FECHA INICIAL DE PROCESO HISTÓRICO
----------------------------------------------------------------------
      Ingrese fecha inicial de proceso,
      enter para cancelar
 
            FECHA INICIO de PROCESO AAAAMMDD:20120101
BASE=I<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=N<
ID_EXTRACT=00900047981<
TIPO_PROC=H<
FECHA_INICIO=20120101<
I;1;1;N;00900047981;H;20120101
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140531
    Archivo: 1
    Base: I  extraída de datos internos
    Criterio de extracción: N  por NIT 00900047981
    Tipo de proceso: H  histórico, desde: 20120101
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
sanata para fecha 201201 es 8
----------------------------------------------------------------------
EXTRACCIÓN: N   00900047981
Máquina de desarrollo: codes
el archivo de salida es PERipley20140531.prn  el input es /despeciales/ICMCRECOPY.DAT
Registros extraídos:  765
Finalizada la extracción
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: PERipley20140531.prn
PESVNO archivo_prn_VALI PERipley20140531.val PERipley20140531.inc 10 2

real    0m0.13s
user    0m0.05s
sys     0m0.05s
PESVNO - registros válidos: 742  inconsistentes: 23  total: 765
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
766
ARCHIVO: archivo_prn_VALI              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 000742
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 000023
Registros Tipo 5 repetidos ==> 000000
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
SCOTBATCH 201405 041045047048049062067095099 VAL PERipley20140531.val
EJECUCION DE PROG CON AMNISTIA INICIADO EN 200901
EJECUCION DE PROG CON AMNISTIA CON RUTINA  1
PARA APLICACION DE ARTICULO 13 SE TOMA COMO FECHA DEL DIA 20140531
  *-----------------------------------------*
  |     Parametros  scoring batch           |
  *-----------------------------------------*
                                             
Programa: SCOTBATCH         Version:Nov/2012 
                                             
SCORE SERIE+ RECIBIDO :041 POS: 001
SCORE SERIE+ RECIBIDO :045 POS: 002
SCORE SERIE+ RECIBIDO :047 POS: 003
SCORE SERIE+ RECIBIDO :048 POS: 004
SCORE SERIE+ RECIBIDO :049 POS: 005
SCORE SERIE+ RECIBIDO :062 POS: 006
SCORE SERIE+ RECIBIDO :067 POS: 007
SCORE SERIE+ RECIBIDO :095 POS: 008
SCORE SERIE+ RECIBIDO :099 POS: 009
Fecha de calculo: 201405
    W-TIPO-SCORE: 041045047048049062067095099
  W-TIPO-ARCHIVO: VAL
         Archivo: PERipley20140531.val                                                            
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140531
FECHA RECOGIDA BD(YYYYMM) : 201405
Tipo score: ACIE-A-DHVT
Tipo score: ACIE-A-DCOO
Tipo score: ACIE-A-DFGE
Tipo score: ACIE-A-DTRO
Tipo score: ACIERTA-A  
Tipo score: QUANTO     
Tipo score: ACIERTA+   
Tipo score: ACIE-A-DINT
Tipo score: CARACTERISTICAS
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIA-DHVT mayor a ceros: 0000742
Clientes con ACIA-DCOO mayor a ceros: 0000742
Clientes con ACIA-DFGE mayor a ceros: 0000742
Clientes con ACIA-DTRO mayor a ceros: 0000742
Clientes con ACIERTA-A mayor a ceros: 0000742
Clientes con QUANTO    mayor a ceros: 0000742
Clientes con ACIERTA+  mayor a ceros: 0000742
Clientes con ACIA-DINT mayor a ceros: 0000742
Clientes con CARACAT   mayor a ceros: 0000742
================================
SE LEYERON EN TOTAL: 0000742

real    0m11.11s
user    0m10.37s
sys     0m0.73s

Inicio de Programa:  2014/05/31 17:39:14
Fin de Programa:     2014/05/31 17:39:25

       
 ** Datacredito*   MAYOR INFORMACION RIPLEY  **
       
iceprerip01.cbl    VERSION:MAY/2014 
       
       
W-PARAMETROS = PERipley20140531.val PERipley20140531.inc 2 A 20140531     
ARCH-ENTRADA = PERipley20140531.val           
ARCH-INCONC = PERipley20140531.inc           
       
REG. LEIDOS   => 00000742
REG. GRABADOS => 00000742
       
                
+---------------------------------------------------+
|      *** RESULTADOS DEL INFORME       ***         |
+----------------------------------+----------------+
|     DETALLE CALIFICACION         | CALF |  # REG. |
+----------------------------------+------+---------+
| - Registros con informacion      | O.K  |        0
| - Registros sin informacion      | SIN  |      742
| - Registros inconsistencias      | INC  |       23
+----------------------------------+------+---------+
| - Total Registro procesados             |      742
+----------------------------------+------+---------+

real    0m0.12s
user    0m0.06s
sys     0m0.04s

Inicio de Programa:  2014/05/31 17:39:25
Fin de Programa:     2014/05/31 17:39:25

----------------------------------------------------------------------
ARCHIVOS:
 
/d/iccol/desarrollo/temporales/PERipley20140531.AADCOO
/d/iccol/desarrollo/temporales/PERipley20140531.AADFGE
/d/iccol/desarrollo/temporales/PERipley20140531.AADHVT
/d/iccol/desarrollo/temporales/PERipley20140531.AADINT
/d/iccol/desarrollo/temporales/PERipley20140531.AADTRO
/d/iccol/desarrollo/temporales/PERipley20140531.ACIEAA
/d/iccol/desarrollo/temporales/PERipley20140531.CARACT
/d/iccol/desarrollo/temporales/PERipley20140531.DATINF
/d/iccol/desarrollo/temporales/PERipley20140531.ESTADI
/d/iccol/desarrollo/temporales/PERipley20140531.inc
/d/iccol/desarrollo/temporales/PERipley20140531.log
/d/iccol/desarrollo/temporales/PERipley20140531.PREDHD
/d/iccol/desarrollo/temporales/PERipley20140531.prn
/d/iccol/desarrollo/temporales/PERipley20140531.QUANTO
/d/iccol/desarrollo/temporales/PERipley20140531.ULTIMO
/d/iccol/desarrollo/temporales/PERipley20140531.val
/d/iccol/desarrollo/temporales/PERipley20140531.vre
 
 
----------------------------------------------------------------------
fin del proceso sh-PE-Ripley
Iniciado: 17:38:54  finalizado: 17:39:25
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
   583  # de proceso FECHA_INICIO584  # Ejemplos de variables exportadas:
   585  # DATABASE=/san_ata_1/200212/icdb
   586  # DATABASE=/san_ata_2/200412/icdb
   587  # DATABASE=/san_ata_3/200512/icdb
   588  # EXTFH=/san_ata_2/200505/extfh.cfg
   589  # EXTFH=/san_ata_2/200504/extfh.cfg
   590  # EXTFH=/san_ata_3/200603/extfh.cfg
   591  # EXTFH=/san_ata_3/200601/extfh.cfg
   592  #*******************************************************************************
   593if [ $TIPO_PROC == "H" ]
   594then
   595FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
   596sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
   597echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
   598if [ -z "$sanata" ]
   599then
   600echo " "
   601echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
   602echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
   603read sanata
   604echo " "
   605export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
   606echo $EXTFH
   607export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
   608echo $DATABASE
   609fi
   610fi
   611
612  #*******************************************************************************
   613  # Extracción
   614  #*******************************************************************************
   615cd $TEMPORALES
   616if [ $BASE = "I" ]
   617then
   618echo $raya
   619echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
   620ejecutar_extraccion
   621echo "Finalizada la extracción"
   622fi
   623
624[ -s $archivo.log ] && rm $archivo.log
   625
626  #*******************************************************************************
   627  # PESVNO: validación de IDs
   628  # Valida los registros del archivo .prn y graba archivos .val y .inc
   629  #*******************************************************************************
   630[ -s $archivo_val ] && rm $archivo_val
   631[ -s $archivo_inc ] && rm $archivo_inc/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>cat sh-PE-Ripley
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    doCuu="1"                        # reposicionar el cursor luego de un error
    NOHUP=""                   # contiene "nohup" en producción
    cancelado="0"                    # las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"            # hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#       si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="2"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha inicio de proceso histórico
        FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                       ORIGEN DE LA BASE"
        echo $raya
        echo "      I) Interna"
        echo "      E) Externa, provista por el Cliente"
        echo "      enter para cancelar"
        echo " "
        echo "            BASE:\c"
        read BASEnew
        if [ -z $BASEnew ]
        then
            loopEnd="1"
            exit
        fi
        [ $BASEnew == "e" ] && BASEnew="E"
        [ $BASEnew == "i" ] && BASEnew="I"
        if [ $BASEnew == "E" ] || [ $BASEnew == "I" ]
        then
            BASE=$BASEnew
            loopEnd="1"
        else
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                       NOMBRE DEL ARCHIVO BASE"
        echo $raya
        echo "      Ingrese el nombre del archivo base,"
        echo "      enter para cancelar"
        echo " "
                tput el
        echo "            ARCHIVO:\c"
        read NOM_ARCHIVOnew
        tput el
        if [ -z $NOM_ARCHIVOnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ -d $NOM_ARCHIVOnew ]
        then
            echo $NOM_ARCHIVOnew" es un nombre de directorio"
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        else
            if [ ! -f $NOM_ARCHIVOnew ]
            then
                echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"
                tput bel
                                [ $doCuu == "1" ] &&  tput cuu 8
            else
                NOM_ARCHIVO=$NOM_ARCHIVOnew
                loopEnd="1"
            fi
        fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
        echo $raya
        echo "      1) 1-11"
        echo "      2) 1-11-45"
        echo "      enter para cancelar"
        echo " "
        echo "            ESTRUCTURA:\c"
        read TIPO_ARCHIVOnew
        if [ -z $TIPO_ARCHIVOnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ $TIPO_ARCHIVOnew == "1" ] || [ $TIPO_ARCHIVOnew == "2" ]
        then
            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
            loopEnd="1"
        else
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                         TIPO DE EXTRACCIÓN"
        echo $raya
        echo "      N) Por NIT"
        echo "      C) Por codigo de suscriptor"
        echo "      enter para cancelar"
        echo " "
        echo "            TIPO de EXTRACCIÓN:\c"
        read TIPO_EXTRACTnew
        if [ -z $TIPO_EXTRACTnew ]
        then
            loopEnd="1"
            exit
        fi
        [ $TIPO_EXTRACTnew == "c" ] && TIPO_EXTRACTnew="C"
        [ $TIPO_EXTRACTnew == "n" ] && TIPO_EXTRACTnew="N"
        if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
        then
            TIPO_EXTRACT=$TIPO_EXTRACTnew
            loopEnd="1"
        else
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [ $TIPO_EXTRACT == "N" ]
    then
        criterioExtraccion="        NIT"
        inputLen=11
    else
        criterioExtraccion="COD SUSCRIPTOR"
        inputLen=6
    fi
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                $criterioExtraccion PARA LA EXTRACCIÓN"
        echo $raya

        echo "      Ingrese el "$criterioExtraccion" para extracción ($inputLen dígitos),"
        echo "      enter para cancelar"
        echo " "
        tput el                     # borra caracteres sobrantes
        echo "            $criterioExtraccion:\c"
        read ID_EXTRACTnew
        tput el                     # borra mensaje de error
        if [ -z $ID_EXTRACTnew ]
        then
            loopEnd="1"
            exit
        fi
        # debe ser solo números
        if [[ "$ID_EXTRACTnew" !=  +([0-9]) ]]
        then
            echo "el dato ingresado debe ser numérico"
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        else
            # control de longitud (11 o 6)
            if [ ${#ID_EXTRACTnew} -ne inputLen ]
            then
                echo "longitud incorrecta (debe ser "$inputlen" dígitos)"
                tput bel
                [ $doCuu == "1" ] &&  tput cuu 8
            else
                ID_EXTRACT=$ID_EXTRACTnew
                loopEnd="1"
            fi
        fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                          TIPO DE PROCESO"
        echo $raya
        echo "      A) Proceso actual"
        echo "      H) Proceso histórico"
        echo "      enter para cancelar"
        echo " "
        echo "            TIPO de PROCESO:\c"
        read TIPO_PROCnew
        if [ -z $TIPO_PROCnew ]
        then
            loopEnd="1"
            exit
        fi
        [ $TIPO_PROCnew == "a" ] && TIPO_PROCnew="A"
        [ $TIPO_PROCnew == "h" ] && TIPO_PROCnew="H"
        if [ $TIPO_PROCnew == "H" ] || [ $TIPO_PROCnew == "A" ]
        then
            TIPO_PROC=$TIPO_PROCnew
            loopEnd="1"
        else
            tput bel
            [ $doCuu == "1" ] &&  tput cuu 8
        fi
    done
}

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                  FECHA INICIAL DE PROCESO HISTÓRICO"
        echo $raya
        echo "      Ingrese fecha inicial de proceso,"
        echo "      enter para cancelar"
        echo " "
        echo "            FECHA INICIO de PROCESO AAAAMMDD:\c"
        read FECHA_INICIOnew
        if [ -z $FECHA_INICIOnew ]
        then
            loopEnd="1"
            exit
        fi
        # debe ser solo números
        if [[ "$FECHA_INICIOnew" != +([0-9]) ]]
        then
            echo "la fecha solamente puede contener dígitos"
            tput bel
            [ $doCuu == "1" ] && tput cuu 8
    else
            # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
            # [[ "20141229" == +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
            if [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
            then
                echo "la fecha es inválida, anterior a 2000 o posterior a 2029"
                tput bel
                [ $doCuu == "1" ] &&  tput cuu 8
            else
                # debe ser menor que la fecha actual (mes o año)
                FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)
                FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)
                if [ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]
                then
                    echo "la fecha desde debe ser anterior a la actual"
                    tput bel
                    [ $doCuu == "1" ] &&  tput cuu 8
                else
                    # todo bien
                    FECHA_INICIO=$FECHA_INICIOnew
                    FECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMM
                    loopEnd="1"
                fi
            fi
        fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
        allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
        allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
        allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
        echo $allParms
        echo "file:" $0.parm " in:" $(pwd)
        echo $allParms >| $0.parm                       # para pruebas
        echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529                                  FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [ $BASE == "E" ]
    then
        echo "${s}provista por el cliente"
        print -n "${i}Estructura: "$TIPO_ARCHIVO
        [ $TIPO_ARCHIVO == "1" ] && echo "${s}1-11"
        [ $TIPO_ARCHIVO == "2" ] && echo "${s}1-11-45"
    else
        echo "${s}extraída de datos internos"
        print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
        [ $TIPO_EXTRACT == "N" ] && echo "${s}por NIT "$ID_EXTRACT
        [ $TIPO_EXTRACT == "C" ] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
    print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [ $TIPO_PROC == "H" ]
    then
        echo "${s}histórico, desde: "$FECHA_INICIO
    else
        echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [ $P_MAQUINA == $P_SERVER_DEV ]
    then
        echo "Máquina de desarrollo:" $P_MAQUINA
        ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
        # echo "Máquina de producción:" $P_MAQUINA
        ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
    # extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    # $$$$ NIT para pruebas: 00900047981
    echo "el archivo de salida es "$archivo_prn " el input es "$ICMCRECOPY
    grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    # echo "regex:"$grepRegex
    [ -s $archivo_prn ] && rm $archivo_prn
    grep "^A......[14].*"$ID_EXTRACT".P$" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    if [ $TIPO_ARCHIVO == "1" ]     # el input tiene estructura 1-11
    then
        PESVNO_INPUT="archivo_prn_VALI"
        cat $DATOS/REGPESVNO.VALI $archivo_prn >| archivo_prn_VALI
    else
        PESVNO_INPUT=$archivo_prn
    fi

    print - PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $PESVNO_INPUT $archivo_val $archivo_inc 10 2 >| $archivo.log
    [ -s archivo_prn_VALI ] && rm archivo_prn_VALI
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc) ]
    then
        echo " "
        echo $raya
        echo "Las cantidades de registros no cuadran: proceso cancelado"
        echo $raya
        cancelado="1"
    fi
}

#*******************************************************************************
#*******************************************************************************
#                                     MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)

    clear
    echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya

#*******************************************************************************
# Lectura de parámetros en la terminal
#   carga los valores del archivo .parm
    paramsGet
#   lee el set de parámetros hasta que sea OK
    parmsOK="0"
    while [ $parmsOK == "0" ]
    do
        readBASE                     # I interna, C cliente
        if [ $BASE == "E" ]
        then
            readNOM_ARCHIVO          # nombre del archivo base
            readTIPO_ARCHIVO         # 0 1-11, 1 1-11-45
        else
            readTIPO_EXTRACT         # N NIT, C cod subs
            readID_EXTRACT           # NIT o cos subs
        fi
        readTIPO_PROC                # A actual, H histórico
        if [ $TIPO_PROC == "H" ]
        then
            readFECHA_INICIO           # fecha desde
        else
            FECHA_INICIO=$FECHA_PROC
        fi

        paramsPrint # $$$$ DEBUG
        sleep 2
        # guarda en archivo .parm
        paramsPut
        clear
        echo $raya
        # banner "PE Ripley"
        echo "$ASCIIBanner"
        echo $raya
        paramsDisplay
        echo $raya
        # pregunta al ope si está satisfecho
        continuar="_"
        while [ $continuar == "_" ]
        do
            echo " "
            echo " "
            echo " "
            echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
            read continuar
            if [ -z $continuar ]
            then
                parmsOK="1"
                continuar="listo"
            else
                if [ $continuar == "1" ]
                then
                    :
                fi
            fi
        done
    done

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [ $BASE == "E" ]
    then
        # el nombre del archivo provisto, existente
        archivo=$NOM_ARCHIVO
    else
        # un nombre armado con "PERipley" y la fecha del día
        # $$$$ no será posible ejecutar dos procesos en el mismo día
        # $$$$ se puede agregar un $$ al file name ...
        # $$$$ se puede controlar si ya existe un archivo de hoy ...
        archivo="PERipley"$FECHA_PROC
        NOM_ARCHIVO=$archivo
    fi
    # arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc
    archivo_txt=$archivo.txt
    archivo_DATINF=$archivo.DATINF
    archivo_ESTADI=$archivo.ESTADI
    archivo_QUANTO=$archivo.QUANTO
    archivo_icgs65=$archivo.icgs65
    archivo_OK=$cadena12.OK
    archivo_LOG_ICGS65_fecha="LOG-ICGS65-"$fecha
    archivo_LOG_ICG65_PRB_fecha="LOG-ICGS65-PRB-"$fecha
    archivo_par=$archivo.par

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
# Ejemplos de variables exportadas:
# DATABASE=/san_ata_1/200212/icdb
# DATABASE=/san_ata_2/200412/icdb
# DATABASE=/san_ata_3/200512/icdb
# EXTFH=/san_ata_2/200505/extfh.cfg
# EXTFH=/san_ata_2/200504/extfh.cfg
# EXTFH=/san_ata_3/200603/extfh.cfg
# EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [ $TIPO_PROC == "H" ]
    then
        FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
        sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
        echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
        if [ -z "$sanata" ]
        then
            echo " "
            echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
            echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
            read sanata
            echo " "
            export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
            echo $EXTFH
            export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
            echo $DATABASE
        fi
    fi

#*******************************************************************************
# Extracción
#*******************************************************************************
    cd $TEMPORALES
    if [ $BASE = "I" ]
    then
        echo $raya
        echo "EXTRACCIÓN:" $TIPO_EXTRACT " " $ID_EXTRACT
        ejecutar_extraccion
        echo "Finalizada la extracción"
    fi

    [ -s $archivo.log ] && rm $archivo.log

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    [ -s $archivo_val ] && rm $archivo_val
    [ -s $archivo_inc ] && rm $archivo_inc
    echo $raya
    echo "PESVNO: validación de IDs"
    ejecutar_validacion
    [ $cancelado == "1" ] && exit

    # control: si no hay un archivo .val se cancela el proceso
    if [ ! -s $archivo_val ]
    then
        echo "No hay un archivo de registros validados - PROCESO CANCELADO"
        exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    formato="VAL"
    SCO41="041"
    SCO45="045"
    SCO47="047"
    SCO48="048"
    SCO49="049"
    SCO62="062"
    SCO67="067"
    SCO95="095"
    SCO99="099"
    scoring="$SCO41$SCO45$SCO47$SCO48$SCO49$SCO62$SCO67$SCO95$SCO99"

    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo_log
    # DEBUG: show output >> $archivo.log 2>>$archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
# Los parámetros son: 
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
#*******************************************************************************
     $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo_log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    ls $TEMPORALES/$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio " finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
/d/iccol/desarrollo/macros>^D
