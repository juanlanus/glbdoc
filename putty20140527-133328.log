=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2014.05.27 13:33:28 =~=~=~=~=~=~=~=~=~=~=~=
login as: icjlud
Using keyboard-interactive authentication.
Password: 
Last login: Tue May 27 11:08:01 2014 from 172.16.10.33
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
COBJVM=sun_142
JAVA_HOME=/usr/j2se
LD_LIBRARY_PATH=/usr/j2se/jre/lib/sparc:/usr/j2se/jre/lib/sparc/client:/usr/j2se/jre/lib/sparc/native_threads:/usr/j2se/jre/lib/sparc:/opt/mfocus/des/cobol/lib:/opt/IBM/db2/V9.7/lib:/export/home/db2inst1/sqllib/lib64:/export/home/db2inst1/sqllib/lib32
PATH=/usr/j2se/jre/sh:/usr/j2se/sh:/usr/j2se/bin:/usr/j2se/jre/bin:/opt/mfocus/des/cobol/lib:/opt/mfocus/des/cobol/bin:/usr/bin:/bin:/usr/bin:/d/iccol/desarrollo/macros:/d/iccol/desarrollo/utiles:/opt/bin:/usr/sbin:/usr/lib:/usr/ccs/bin:/opt/SUNWspro/bin:/usr/jdk/latest/bin:/usr/local/bin:/usr/j2se/bin:/usr/openwin/bin:.:/export/home/db2inst1/sqllib/bin:/export/home/db2inst1/sqllib/adm:/export/home/db2inst1/sqllib/misc
CLASSPATH=/opt/mfocus/des/cobol/lib/mfcobol.jar:.:/usr/j2se/jre/lib/rt.jar:/opt/mfocus/des/cobol/lib/mfimtk.jar:/opt/mfocus/des/cobol/lib/xerces.jar:/opt/mfocus/des/cobol/lib/castor-0_9_4_1-xml.jar:/opt/mfocus/des/cobol/lib/mfcobol.jar:/usr/j2se/jre/lib/dt.jar:/usr/j2se/jre/lib/rt.jar:/d/iccol/desarrollo/java/server:/export/home/db2inst1/sqllib/java/db2java.zip:/export/home/db2inst1/sqllib/java/db2jcc.jar:/export/home/db2inst1/sqllib/java/sqlj.zip:/export/home/db2inst1/sqllib/function:/export/home/db2inst1/sqllib/java/db2jcc_license_cu.jar:.
COBCPY=/opt/mfocus/des/cobol/cpylib:/opt/mfocus/des/cobol/cpylib:/d/iccol/desarrollo/copys/pais:/d/iccol/desarrollo/copys
Java version = 1.4.2_19
Java vendor = Sun Microsystems Inc.
Java OS name = SunOS
Java OS arch = sparc
Java OS version = 5.10

  ####    ####   #####   ######   ####
 #    #  #    #  #    #  #       #
 #       #    #  #    #  #####    ####
 #       #    #  #    #  #            #
 #    #  #    #  #    #  #       #    #
  ####    ####   #####   ######   ####

 #####
#     #   ####   #        ####   #    #  #####      #      ##
#        #    #  #       #    #  ##  ##  #    #     #     #  #
#        #    #  #       #    #  # ## #  #####      #    #    #
#        #    #  #       #    #  #    #  #    #     #    ######
#     #  #    #  #       #    #  #    #  #    #     #    #    #
 #####    ####   ######   ####   #    #  #####      #    #    #

 #####
#     #   ####   #    #  #####      #    #         ##     ####      #     ####
#        #    #  ##  ##  #    #     #    #        #  #   #    #     #    #    #
#        #    #  # ## #  #    #     #    #       #    #  #          #    #    #
#        #    #  #    #  #####      #    #       ######  #          #    #    #
#     #  #    #  #    #  #          #    #       #    #  #    #     #    #    #
 #####    ####   #    #  #          #    ######  #    #   ####      #     ####

 #####                                           #####  #         ###
#     #  #    #  #    #          #    #         #     # #    #   #   #
#        #    #  ##   #          #    #               # #    #  #     #
 #####   #    #  # #  #          #    #          #####  #    #  #     #
      #  #    #  #  # #          #    #   ###   #       ####### #     #
#     #  #    #  #   ##           #  #    ###   #            #   #   #
 #####    ####   #    # #######    ##     ###   #######      #    ###

icjlud@codes /d/iccol/desarrollo
$ . viset
viset running
/d/iccol/desarrollo>ll
ksh: ll:  not found
/d/iccol/desarrollo>ls -l
total 1752102
-rw-rw-r--   1 icjcad   icdatacr       0 Jul 16  2012 -PER12-01-00DEM
-rw-rw-r--   1 icjcad   icdatacr       0 Jul 16  2012 *
-rw-rw-r--   1 icjcad   icdatacr   24576 Jul 16  2012 °
-rw-rw-r--   1 icjcad   icdatacr       0 Jul 16  2012 $TEMPORALES-ICGLEY.CON
-rw-rw-r--   1 icjcad   icdatacr    3072 Jul 16  2012 $TEMPORALES-ICGLEY.CON.idx
-rw-r--r--   1 icvhfd   icdatacr     764 Mar 21 16:51 001009001-COB-006.txt
-rw-r--r--   1 icfacd   icdatacr  104409 May  3  2013 010047.20130131.T.DUPBDL
-rw-rw-r--   1 ichdd    icdatacr   66386 May 15 10:15 1000000
-rw-rw-r--   1 iccavd   icdatacr      13 Aug 30  2013 100055300703
-rw-rw-r--   1 icnudd   icdatacr    1686 Aug 23  2013 17021.aif
-rw-rw-r--   1 icjamd   icdatacr  117098 Nov 20  2013 172.24.2.7
drwxrwxr-x   2 icrgd    icdatacr     512 Jul 15  2013 20130715Formulario_0004
-rw-rw-r--   1 icjcld   icdatacr  999424 Mar 12 01:44 20140312MiDataCredito.zip
-rw-rw-r--   1 icnudd   icdatacr    1952 Aug 15  2013 20609.aif
drwxrwxr-x   2 1472     icdatacr    1024 Apr 30 08:36 27
-rw-r--r--   1 icimsd   icdatacr   37524 May 14 06:32 860007335-100005-5-X-ENTIDAD.20140513.csv.Z
-rw-r--r--   1 icimsd   icdatacr  745955 May 14 06:32 860007335-5-Triggers-20140513.csv.Z
-rw-r--r--   1 icimsd   icdatacr   21414 May 14 06:32 860051894-100005-6-X-ENTIDAD.20140513.csv.Z
-rw-r--r--   1 icimsd   icdatacr    4732 May 14 06:31 900161180-10-Triggers-20140513.csv.Z
-rw-r--r--   1 icimsd   icdatacr    8065 May 14 06:31 900161180-100005-10-X-ENTIDAD.20140513.csv.Z
-rw-rw-r--   1 icjdld   icdatacr       0 Feb 19 22:37 a
drwxrwxr-x   7 iccavd   icdatacr     512 Mar  3 17:17 actualizacion
-rw-r--r--   1 icimsd   icdatacr    1811 May 14 06:31 ALERTA_100005_1_BANCAMIA_X_ENTIDAD.20140513.Z
-rw-r--r--   1 icjaad   icdatacr     358 Dec 23 17:34 ALERTA_100005_1_BANCAMIA_X_GRUPOS.20131222
-rw-r--r--   1 icimsd   icdatacr    1367 May 14 06:31 ALERTA_100005_1_BANCAMIA_X_GRUPOS.20140513.Z
-rw-r--r--   1 icimsd   icdatacr    6674 May 14 06:30 ALERTA_100005_100_AV_VILLAS_X_ENTIDAD.20140513.Z
-rw-r--r--   1 icimsd   icdatacr    3100 Jan  4 07:34 ALERTA_100005_2_AV_VILLAS_X_ENTIDAD.20140103.Z
-rw-r--r--   1 icimsd   icdatacr    2897 Feb 18 06:55 ALERTA_100005_2_AV_VILLAS_X_ENTIDAD.20140215.Z
-rw-r--r--   1 icimsd   icdatacr    1612 Feb 18 06:55 ALERTA_100005_2_AV_VILLAS_X_ENTIDAD.20140216.Z
-rw-r--r--   1 icimsd   icdatacr    6144 Feb 18 06:55 ALERTA_100005_2_AV_VILLAS_X_ENTIDAD.20140217.Z
-rw-r--r--   1 icimsd   icdatacr    6149 May 14 06:30 ALERTA_100005_2_AV_VILLAS_X_ENTIDAD.20140513.Z
-rw-rw-r--   1 icdgd    icdatacr   62826 May 13 10:16 alertas.txt
-rw-rw-r--   1 ichdd    icdatacr      84 May 15 09:18 ALERTAS.TXT
-rw-rw-r--   1 icdgd    icdatacr  422437 May 13 11:23 alertas1.txt
-rw-rw-r--   1 icdgd    icdatacr   62826 May 13 12:41 alertas2.txt
-rw-rw-r--   1 ichdd    icdatacr      84 May 15 09:20 ALERTAS3.TXT
-rw-rw-r--   1 icjdld   icdatacr     550 Mar  4  2013 algo
drwxrwxrwx   3 icrgd    icdatacr     512 Feb 23 23:33 analistas
-rw-rw-r--   1 icjcad   icdatacr    7273 Jul 16  2012 ANALITICO1X.TXT
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 11 08:54 animator
-rw-rw-r--   1 icjamd   icdatacr  474765 Apr 19  2013 archivos15Apr18Apr2013.zip
drwxrwxr-x   2 iccavd   icdatacr     512 May 27 11:33 archtemp
-rwxrwxr-x   1 icjcad   icdatacr    8188 Jul 16  2012 arregla-maes
drwxrwxr-x   2 icejvd   icdatacr     512 May 19 15:11 artefactos_Portal_20140519
drwxrwxrwx   2 root     root         512 May 19 17:08 artefactos_tomcat_19_05_2014
drwxrwxr-x   2 iccavd   icdatacr     512 May  2 07:50 auditor
-rw-rw-r--   1 icjcad   icdatacr     301 Jul 16  2012 BD_EXTRACUPOS.h
-rw-rw-r--   1 icjcad   icdatacr     127 Jul 16  2012 BD_NOVEDAT.h
-rw-rw-r--   1 icjcad   icdatacr     131 Jul 16  2012 BD_SSO.h
-rw-r--r--   1 1395     icdatacr    7172 Dec 13 15:26 BDACSN
-rw-r--r--   1 1395     icdatacr    8192 Dec 13 15:26 BDACSN.idx
-rw-r--r--   1 1395     icdatacr       0 Dec 13 15:26 BDIDAN
-rw-r--r--   1 1395     icdatacr    3072 Dec 13 15:26 BDIDAN.idx
-rw-r--r--   1 1395     icdatacr       0 Dec 13 15:26 BDIDIN
-rw-r--r--   1 1395     icdatacr    3072 Dec 13 15:26 BDIDIN.idx
-rw-rw-r--   1 1395     icdatacr     750 Feb  6  2013 BDIEGARJ.log
-rw-r--r--   1 1395     icdatacr   65536 Dec 13 15:26 BDIESN
-rw-r--r--   1 1395     icdatacr 1360616 Dec 13 15:26 BDIESN01
-rw-rw-r--   1 ichdd    icdatacr 8216081 May 20 18:40 BDIIALEDB2.20140520.core
-rw-rw-r--   1 icrmbd   icdatacr     922 Apr 24 11:19 BDIIALEDB2.aif
-rw-r--r--   1 1395     icdatacr    2013 Dec 13 15:26 BDIILAN
-rw-r--r--   1 1395     icdatacr    3072 Dec 13 15:26 BDIILAN.idx
-rw-r--r--   1 1395     icdatacr   65536 Dec 13 15:26 BDIREN
-rw-r--r--   1 1395     icdatacr  166528 Dec 13 15:26 BDIREN01
-rw-rw-r--   1 icjcad   icdatacr  193883 Jul 16  2012 BDLDI2.PROC
-rw-r--r--   1 1395     icdatacr   78336 Dec 13 15:26 BDLDIM
-rw-rw-r--   1 icjcad   icdatacr      84 Jul 16  2012 BDLDIRESTR-n.log
-rw-r--r--   1 1395     icdatacr 1465600 Dec 13 15:26 BDLEST
-rw-rw-r--   1 icjcad   icdatacr  388469 Jul 16  2012 BDLLDIRL.SAL
-rw-rw-r--   1 icjcad   icdatacr     440 Jul 16  2012 BDLLDIRL.SAL1
-rw-rw-r--   1 icjcad   icdatacr   96870 Jul 16  2012 BDLLDIRL.SAL2
-rw-rw-r--   1 icjcad   icdatacr    2299 Jul 16  2012 BDLPART
-rw-rw-r--   1 icjcad   icdatacr    6144 Jul 16  2012 BDLPART.idx
drwxrwxr-x   2 icgjcd   icdatacr    4096 Apr 28 17:12 binds
-rwxrwxr-x   1 icjcad   icdatacr    9296 Jul 16  2012 borra2
-rw-rw-r--   1 icjcad   icdatacr     124 Jul 16  2012 BORRAR.msg
-rw-rw-r--   1 icjcad   icdatacr    1913 Jul 16  2012 borrar.sh
-rw-rw-r--   1 icjcad   icdatacr     284 Jul 16  2012 BSTRACE.XFH
-rw-rw-r--   1 icjcad   icdatacr   84961 Jul 16  2012 busq-dcifra
-rwxrwxr-x   1 icjcad   icdatacr    2980 Jul 16  2012 c-cobdb2-use
-rw-rw-r--   1 icjcad   icdatacr   25605 Jul 16  2012 campes
-rw-rw-r--   1 icllsd   icdatacr  102312 Mar  6 09:04 CARACTNEW.CBL
-rw-rw-r--   1 icjcad   icdatacr    3803 Jun 20  2012 cataloga
-r-xr-xr-x   1 icjcad   icdatacr  121804 Jun 19  2012 cc
-rw-rw-r--   1 iccavd   icdatacr       0 Feb  4  2013 cccc
-rw-rw-r--   1 icjcad   icdatacr 10637227 May 22 16:40 ccierr.log
-rw-rw-r--   1 icjcad   icdatacr      26 Feb 14 09:24 ced.txt
-rw-rw-r--   1 icjcad   icdatacr      14 Feb 21 11:19 ced1.txt
-rw-rw-r--   1 icjcad   icdatacr      13 Mar  3 10:59 ced3.txt
-rw-rw-r--   1 icjcad   icdatacr      13 Mar 11 09:57 ced5.txt
-rw-rw-r--   1 icjcad   icdatacr      14 Mar 11 09:58 ced5.txt-
-rw-rw-r--   1 icjcad   icdatacr    3072 Jun 20  2012 cedulas.log.idx
-rw-rw-r--   1 icjcad   icdatacr    8988 Jun 20  2012 cedulas.txt.dlm
-rw-rw-r--   1 icjcad   icdatacr   15760 Jun 20  2012 cgic.a
-rw-rw-r--   1 icjcad   icdatacr    4292 Jun 20  2012 cgic.h
-rw-rw-r--   1 icjcad   icdatacr   47462 Jun 20  2012 cgic107.tar.gz
-rwxrwxr-x   1 icjcad   icdatacr   66248 Jun 20  2012 cgicobol1
-rwxrwxr-x   1 icjcad   icdatacr   34828 Jun 20  2012 cgiesq
-rw-rw-r--   1 icjcad   icdatacr     416 Jun 20  2012 change.log
-rw-rw-r--   1 icjcad   icdatacr    1374 Jun 20  2012 chequeo
-rw-rw-r--   1 icvhfd   icdatacr       0 May 14  2013 CITIBURO
-rw-rw-r--   1 icgjcd   icdatacr     151 May 22 18:24 cobconfig
-rw-rw-r--   1 icimsd   icdatacr     277 Apr  2 18:12 cobconfig-icimsd
-r--------   1 root     root         151 Feb 21 22:04 cobconfig.20140320
-rw-rw-r--   1 icgavd   icdatacr     178 Jun  7  2013 cobconfig.gav
-rwxrwxr-x   1 icgjcd   icdatacr     280 Dec 30 15:41 cobconfig.gjc
-rwxrwxr-x   1 icvhfd   icdatacr     100 Sep 13  2012 cobconfig.ok
-rw-rw-r--   1 1395     icdatacr     278 Jan  8 12:01 cobconfig.pjv
-rwxrwxr-x   1 icrmbd   icdatacr     280 Mar 19  2013 cobconfig.rmb
-rw-rw-r--   1 icvhfd   icdatacr     332 May 21 16:23 cobconfig.vhf
-rw-r-----   1 icjcad   icdatacr   55338 Jun 20  2012 cobol-db2yyyy
-rw-r--r--   1 icfgcd   icdatacr   85239 Dec 26  2012 CobolFico.jar
-rw-r--r--   1 icehad   icdatacr   85239 Apr 30  2013 CobolFico.jar-ant
-rw-r--r--   1 icehad   icdatacr   87963 Apr 30  2013 CobolFico.jar1
-rw-rw-rw-   1 root     root      151852 Mar 11  2013 CobolFico.zip
-rwxrwxr-x   1 icjcad   icdatacr    1085 Jun 20  2012 comp_conver16
-rwxrwxr-x   1 icjcad   icdatacr     996 Jun 20  2012 comp_conver32
-rwxrwxr-x   1 icjcad   icdatacr    1167 Jun 20  2012 comp_conver64
-rwxrwxr-x   1 icjcad   icdatacr     362 Jun 20  2012 comp-pais
drwxrwxr-x  10 icgjcd   icdatacr   94208 May 27 11:17 copys
-rw-rw-rw-   1 root     root     1582771 Mar 11  2013 copys-linea.zip
-rw-r-----   1 icjcad   icdatacr      62 Jun 20  2012 copyscopy1.fd
-rw-------   1 icjcld   icdatacr 57226837 May 22 16:47 core
-rw-r--r--   1 icimsd   icdatacr   86016 Mar 18  2013 CQ10461P3-PER36-02NUM
-rw-rw-r--   1 iccavd   icdatacr     396 Mar 20  2013 CTLN97-BLQ.490028.SAL
-rw-rw-r--   1 iccavd   icdatacr    2076 Mar 20  2013 CTLN97.490028.SAL
-rw-rw-r--   1 icjcad   icdatacr     228 Jun 20  2012 cvs-progr
-rw-rw-r--   1 icjcad   icdatacr       0 Jun 20  2012 daevalxxx.txt
-rw-rw-r--   1 icjcad   icdatacr       0 Jun 20  2012 daevalxxx.txt2
-rw-rw-r--   1 icjcad   icdatacr    2226 Jun 20  2012 DAP
-rwxrwxr-x   1 icjcad   icdatacr     699 Jun 20  2012 dar
drwxrwxr-x   5 iccavd   icdatacr    7680 May 27 11:32 database
-rw-r-----   1 icjcad   icdatacr     146 Jun 20  2012 datacas.log
-rw-r-----   1 icjcad   icdatacr    5159 Jun 20  2012 datacas.txt
drwxrwxr-x   4 iccavd   icdatacr   11264 May 27 10:41 datos
-rw-rw-r--   1 icjcad   icdatacr       0 Jun 20  2012 DATOSBBVA
-rw-rw-r--   1 icjcad   icdatacr    1404 Jun 20  2012 daviclientes.txt
-rw-rw-r--   1 icjcad   icdatacr    7284 Jun 20  2012 dcutil_old.jar
-rw-rw-r--   1 icjcad   icdatacr    6938 Jun 20  2012 dcutil.jar
-rw-------   1 icjdld   icdatacr      38 Feb  6 08:24 dead.letter
-rw-rw-r--   1 icjcad   icdatacr   28365 Jun 19  2012 deborrar1
-rw-rw-r--   1 icfgcd   icdatacr 6527182 Jan 27 14:56 DecisorWS Logs 2701201401.55.zip
-rwxrwxr-x   1 icjcad   icdatacr   52168 Jun 19  2012 demo
-rw-rw-r--   1 icjcad   icdatacr     480 Jun 19  2012 demo.class
-rw-rw-r--   1 icjcad   icdatacr    1356 Jun 19  2012 demo.jar
-rw-rw-r--   1 icjcad   icdatacr     770 Jun 19  2012 demo.java
-rw-rw-r--   1 icjamd   icdatacr      12 Aug 17  2013 demo.txt
-rw-rw-r--   1 icrmbd   icdatacr    8039 May  7 12:39 Dep-DatabaseReport.txt
-rw-rw-r--   1 icrmbd   icdatacr    1109 May  7 12:39 Dep-LicenseReport.txt
-rw-rw-r--   1 icjcad   icdatacr    2811 Jun 19  2012 deptos
drwxr-xr-x  26 icbuild  icprodd     2560 Apr 24 14:15 Desinstalar
drwxrwxr-x 188 icbuild  icprodd    20480 May 23 15:37 Desplegar
drwxrwxr-x   5 icbuild  icprodd      512 Jun 11  2013 Desplegar_pruebas
drwxr-xr-x  19 icbuild  icprodd     1024 Apr 21 17:23 Despliegue_Fallido
-rw-rw-r--   1 icrmbd   icdatacr    2352 May  7 12:39 Dev-DatabaseReport.txt
-rw-rw-r--   1 icrmbd   icdatacr    1055 May  7 12:39 Dev-LicenseReport.txt
drwxrwxr-x   3 iccavd   icdatacr     512 May 19 16:34 direcciones
-rw-rw-r--   1 icgavd   icdatacr     558 Sep  2  2013 DTCBLQ.lst
-rw-r--r--   1 1395     icdatacr   30312 Dec 13 15:26 DTCCON
-rw-r--r--   1 1395     icdatacr    9216 Dec 13 15:26 DTCCON.idx
-rw-rw-r--   1 icdgd    icdatacr    7396 Apr 22 17:45 env.txt
-rw-rw-r--   1 icdgd    icdatacr      64 May  7 10:39 errs.txt
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 11 08:58 especiales
-rw-rw-r--   1 icgjcd   icdatacr   13840 Feb 20 10:33 extfh-450.cfg
-rw-rw-r--   1 icgjcd   icdatacr   13642 Sep 12  2012 extfh-pes.cfg
-rw-rw-r--   1 iccavd   icdatacr   14913 Dec 13 11:09 extfh-pva.cfg
-rw-rw-r--   1 icgjcd   icdatacr   14766 Dec  2 16:55 extfh-pva201311.cfg
-rwxrwxr-x   1 iccavd   icdatacr   10360 May 26 10:17 extfh.cfg
-rw-rw-r--   1 icjaad   icdatacr   10339 Oct 19  2012 extfh.cfg-20121108
-rwxrwxr-x   1 iccavd   icdatacr   10360 Feb 20 10:14 extfh.cfg.20140320
-rwxrwxrwx   1 icrgd    icdatacr   81725 Jun 12  2013 f0028.zipp
-rw-rw-r--   1 icgjcd   icdatacr 1333268 Sep  6  2013 facturacion1-5sept.txt
-rw-rw-r--   1 icjamd   icdatacr       0 Feb 18 16:15 file.txt.2014-02-18
drwxrwxr-x  19 icgjcd   icdatacr  307712 May 27 11:24 fuentes
-rw-rw-rw-   1 root     root     15886660 Mar 11  2013 fuentes-especiales.zip
-rw-rw-rw-   1 root     root     11160192 Mar 11  2013 fuentes-linea.zip
-rw-rw-r--   1 icgjcd   icdatacr     132 Jan 14  2013 gj1
drwxr-xr-x   7 icbuild  icprodd      512 Apr 10 17:33 Hello_Word
-rw-rw-r--   1 icimsd   icdatacr    9007 Feb 18  2013 hs_err_pid19424.log
-rw-rw-r--   1 icjdld   icdatacr    6893 Nov 23  2012 hs_err_pid20875.log
-rw-rw-r--   1 icnudd   icdatacr    8552 May 16  2013 hs_err_pid27175.log
-rw-rw-r--   1 iccavd   icdatacr    5239 Apr 16  2012 hs_err_pid5611.log
-rw-r--r--   1 1395     icdatacr  137940 Dec 13 15:26 ICBCON
-rw-r--r--   1 1395     icdatacr   41984 Dec 13 15:26 ICBCON.idx
-rw-r--r--   1 1395     icdatacr  268392 May  2  2013 iceprecol493.cbl
-rw-rw-r--   1 icimsd   icdatacr     931 Feb 27 17:04 icestd65vc-reloaded.aif
-rw-rw-r--   1 iccavd   icdatacr 17188213 May 27 11:25 ICGCON-CV.20140527.core
-rw-rw-r--   1 iccavd   icdatacr    1289 Dec  2 11:59 ICGCPL-CAV.aif
-rw-rw-r--   1 icimsd   icdatacr    2881 Oct 11  2013 ICGD12.aif
-rw-rw-r--   1 icjdld   icdatacr    1155 Feb 18 21:44 ICGD12V54.aif
-rw-rw-r--   1 icjdld   icdatacr    1022 Nov 14  2013 ICGD22V37.aif
-rw-rw-r--   1 icjdld   icdatacr    1019 Aug 12  2013 ICGD25.aif
-rw-rw-r--   1 icjdld   icdatacr    1019 Aug 12  2013 ICGD27.aif
-rw-rw-r--   1 icjdld   icdatacr    1019 Aug 12  2013 ICGD40.aif
-rw-rw-r--   1 icjdld   icdatacr    1155 Jul 11  2013 ICGD60V12.aif
-rw-rw-r--   1 icrgd    icdatacr  435702 May 17 23:39 ICGD61D.CBL
-rw-r--r--   1 1395     icdatacr    9010 Jul 12  2012 ICGD67D.ipf
-rw-rw-r--   1 1395     icdatacr   20678 Jul 12  2012 ICGD67D.prf
-rw-rw-r--   1 icjdld   icdatacr    1022 Mar 11 16:08 ICGD89V02.aif
-rw-rw-r--   1 icfard   icdatacr    1418 Apr 22 17:41 ICGDI2.aif
-rw-rw-r--   1 icvhfd   icdatacr     888 Mar 27 14:34 ICGFPRPB.aif
-rw-rw-r--   1 icfard   icdatacr     886 Dec  4 10:06 ICGFRR.aif
-rw-rw-r--   1 icimsd   icdatacr   12590 Apr 10 11:25 ICGKAR.aif
-rw-rw-r--   1 icimsd   icdatacr    1819 Apr 10 11:36 ICGKARPB.aif
-rw-rw-r--   1 icimsd   icdatacr   35496 Oct 30  2013 ICGKARPB.eje
-rw-rw-r--   1 icimsd   icdatacr     918 Oct 10  2013 ICGS07.aif
-rw-rw-r--   1 icjcld   icdatacr 57998797 May 22 16:47 ICGSSO.20140522.core
-rw-rw-r--   1 icimsd   icdatacr     504 Jan  3  2013 ICMCREBANK.201301.log
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 12 11:08 icregis
-rw-rw-r--   1 icrgd    icdatacr  703196 Jul 15  2012 icrgd
drwxr-sr-x   2 1473     icdatacr     512 Dec 19 13:43 icrpgd
-rw-rw-r--   1 icjdld   icdatacr      26 Jun 19  2013 ides-dario
-rw-rw-r--   1 icimsd   icdatacr    2074 Jun 15  2012 IMSG-01.prn.log
-rwxr-xr-x   1 icjamd   icdatacr 48207793 Dec 21  2012 install_stb.sh
drwxrwxr-x  12 icgjcd   icdatacr    2560 Apr 22 11:07 jars
-rw-r--r--   1 icrmbd   icdatacr  453508 Mar 20 10:09 journal.txt.001
-rw-rw-r--   1 icrmbd   icdatacr  453338 Mar 20 08:13 journal.txt.010
-rw-rw-r--   1 ichlgd   icdatacr      18 May 26 23:05 lista-usu
drwxrwxr-x   2 iccavd   icdatacr    3584 May  5 15:52 listados
-rw-rw-r--   1 icjamd   icdatacr      24 Nov  8  2013 listbatch.txt
-rw-rw-r--   1 icjamd   icdatacr      24 Mar 31 14:54 listdemo.txt
-rw-------   1 icjamd   icdatacr      98 Jul 10  2013 listservers.txt
-rw-r--r--   1 icjjpd   icdatacr  410388 Feb 21 10:05 LOG-STRN-TIMESRV-20140221
-rw-rw-r--   1 icgjcd   icdatacr       0 Mar  7  2013 LOGTRANS-20130307-003
-rw-rw-r--   1 icrmbd   icdatacr       0 Mar 19  2013 LOGTRANS-20130319-001
-rw-rw-r--   1 icgjcd   icdatacr    1929 May  9  2013 LOGTRANS-20130509-001
-rw-rw-r--   1 icrmbd   icdatacr   17843 May 27  2013 LOGTRANS-20130527-001
-rw-rw-r--   1 icgjcd   icdatacr    7192 Jun  7  2013 LOGTRANS-20130607-001
-rw-rw-r--   1 icjdld   icdatacr   11515 Jun 25  2013 LOGTRANS-20130625-001
-rw-rw-r--   1 icjdld   icdatacr    8192 Jun 26  2013 LOGTRANS-20130626-001
-rw-rw-r--   1 icrmbd   icdatacr       0 Jul 23  2013 LOGTRANS-20130723-001
-rw-rw-r--   1 icgjcd   icdatacr       0 Aug  9  2013 LOGTRANS-20130809-001
-rw-rw-r--   1 iccavd   icdatacr 43855219 Mar 26 17:58 LOGTRANS-20130823-001
-rw-rw-r--   1 icrmbd   icdatacr    9844 Jan 23 15:26 LOGTRANS-20140123-001
-rw-rw-r--   1 icrmbd   icdatacr     188 Jan 23 09:03 LOGTRANS-20140123-002
-rw-rw-r--   1 icgjcd   icdatacr     298 Mar 26 15:04 LOGTRANS-20140326-001
drwxrwxr-x   7 icgjcd   icdatacr  106496 May 27 10:38 macros
-rw-rw-rw-   1 root     root     2914148 Mar 11  2013 macros-linea.zip
-rw-------   1 icjamd   icdatacr    2059 Apr 10 23:07 mbox.icjamd
-rw-rw-r--   1 1395     icdatacr     920 Sep  9  2013 METPAS01.aif
-rw-rw-r--   1 icvhfd   icdatacr   62037 Mar  8  2013 mfpoll-172.24.2.206.txt
-rw-rw-r--   1 icrmbd   icdatacr   93609 May  7 12:39 mfpoll.txt
drwxr-xr-x   2 icjapd   root         512 Mar 17  2012 monitoreo
drwxrwxr-x   4 iccavd   icdatacr   79872 May 27 11:07 objetos
-rw-rw-r--   1 icjamd   icdatacr      33 Dec 30 23:56 ori
-rw-rw-r--   1 iclagd   icdatacr    1883 Apr  4 08:09 p15805-bbog.val-201404040809
-rw-rw-r--   1 iclagd   icdatacr    1883 Apr  4 08:10 p15805-bbog.val-201404040810
-rw-r--r--   1 root     root     44742442 Mar  5  2013 p15929580_72_SOLARIS64.zip
-rwxrwxr-x   1 icjamd   icdatacr     510 Mar 11  2013 pasa-archivos.sh
-rw-rw-r--   1 iclagd   icdatacr      26 Feb  4 19:57 pglbs-2
-rw-rw-r--   1 iclagd   icdatacr     852 Feb  4 19:58 pglbs-2-GLBLS-2
-rw-rw-r--   1 iclagd   icdatacr     109 Nov  1  2013 pPER48.LOG
-rw-rw-r--   1 icjjmd   icdatacr  588777 Jan 21 17:06 ppppp
-rw-rw-r--   1 icjamd   icdatacr      33 Dec 30 23:57 prb
-rw-rw-r--   1 icjamd   icdatacr      40 Jun  6  2013 prb.file
-rw-rw-r--   1 iclagd   icdatacr    3838 Mar  7 12:19 pru10.val-20140307
-rw-rw-r--   1 iclagd   icdatacr       0 Mar  7 12:19 pru10.valcontrol
-rw-rw-r--   1 iclagd   icdatacr    3838 Mar  7 17:46 pru101.val-201403071746
-rw-rw-r--   1 ichdd    icdatacr   75586 May 21 10:59 prualan.txt
-rw-rw-r--   1 ichdd    icdatacr   75346 May 20 10:43 prualert.txt
-rw-rw-r--   1 ichdd    icdatacr   66426 May 15 11:02 prualertas.txt
-rwxrwxrwx   1 icbuild  icprodd        0 Oct  3  2013 prueba_desa
drwxrwxr-x   6 icgjcd   icdatacr    1024 Apr  8 13:50 rai
-rw-rw-r--   1 icgjcd   icdatacr 5181534 Feb 28 18:43 Requerimiento-camaras.zip
drwxr-xr-x   2 icgjcd   icdatacr     512 Feb 10 19:19 restore20140210
-rw-rw-r--   1 icrmbd   icdatacr    3187 Mar 19  2013 rmbA
-rw-rw-r--   1 icrmbd   icdatacr 6993617 Mar 20 09:55 RMBSERVCCITCP.20140320.core.001
-rw-rw-r--   1 icrmbd   icdatacr 6993617 Mar 20 08:10 RMBSERVCCITCP.20140320.core.010
-rw-rw-r--   1 icvhfd   icdatacr    2732 Nov  1  2013 salida.txt
-rw-rw-r--   1 icvhfd   icdatacr    1755 Nov  1  2013 salida3.txt
-rw-rw-r--   1 icrgd    icdatacr  121235 May 19 10:36 script1
-rw-r--r--   1 icjamd   icdatacr   62088 Mar 11  2013 secretstuff
-rw-r--r--   1 icjaad   icdatacr 430580042 Mar  5 10:54 setup_visualcobol_deveclipse_2.1_suse_x86_64
drwxrwxr-x   9 icfactur icdatacr     512 May 13 17:13 sf
drwxrwxr-x   5 icjcld   icdatacr     512 May  5 17:15 SGID
-rwxrwxrwx   1 icgasd   icdatacr     270 Jul 30  2013 sh-CambioLeyendas.sh
-rw-rw-r--   1 icllsd   icdatacr   11951 Mar  6 08:55 sh-CARACTNEW
-rw-rw-r--   1 1473     icdatacr  323275 Dec 12 17:37 sh-ConsultaCamaras.log
-rw-r--r--   1 1395     icdatacr    2078 Apr  2  2013 sh-MERCADO-COLMENA-CONS
-rwxrwxr-x   1 icjlud   icdatacr     116 May 23 17:46 shtest
-rw-r--r--   1 icjamd   icdatacr 1630720 Feb 13  2012 sol9-bfagent-7.1.1.3-0-0041-sparc-opt
drwx------   6 icjcld   icdatacr     512 May 14 21:08 stt
-rw-rw-r--   1 icjapd   icdatacr 45801030 Jul 16  2013 sxsecuritypack51.09_00_dev.tar.encr
-rwxrw-r--   1 icjapd   icdatacr 45801033 Jul 16  2013 sxsecuritypack51.09_00_server.tar.encr
drwxr-xr-x  24 icbuild  icprodd     1536 Apr  1  2013 Tablas_Parametros
drwxr-xr-x   6 icbuild  icprodd      512 Aug  1  2013 Tablas_Parametros_Produccion
-rw-rw-r--   1 icrgd    icdatacr  502758 Jun  3  2012 TBL-USER-UNICOS.TXT
drwxrwxr-x 171 iccavd   icdatacr   28672 May 27 11:33 temporales
-rw-rw-r--   1 icjaad   icdatacr    6500 Nov 29 12:01 TERAEN0
drwxrwxr-x   2 iccavd   icdatacr    1536 May 27 11:33 terminales
-rwxrwxr-x   1 icjamd   icdatacr     276 Jul  4  2012 testsftp.sh
drwxrwxr-x   7 iccavd   icdatacr     512 Mar 31 10:47 trabajo
-rw-rw-r--   1 icjapd   icdatacr 11006446 May  7  2013 truss-969-icgcon
drwxrwxr-x   3 iccavd   icdatacr     512 Apr 28 10:24 usuarios
drwxrwxr-x   3 icgjcd   icdatacr    4608 Mar 13 15:24 utiles
-rw-rw-rw-   1 root     root      101425 Mar 11  2013 utiles-linea.zip
-rw-rw-r--   1 icvhfd   icdatacr      84 Mar  5 15:48 UTLESTACT.fecha
-rw-r--r--   1 icfacd   icdatacr    4849 Jul 15  2012 utlucorcre.gnt
-rw-rw-r--   1 icgjcd   icdatacr   17616 May 28  2013 UTLULONGITUDES.CBL
-rwxrwxrwx   1 icdgd    icdatacr    1098 May 23 16:51 viset
-rw-rw-r--   1 icvhfd   icdatacr     259 May 20 18:40 XFHLOG
-rw-rw-r--   1 iclagd   icdatacr      28 Apr 23 08:55 xxyy.log
/d/iccol/desarrollo>^[[A  /d/iccol/desarrollo>
/d/iccol/desarrollo>^[  /d/iccol/desarrollo>ls -lls -l | grep ^d
drwxrwxr-x   2 icrgd    icdatacr     512 Jul 15  2013 20130715Formulario_0004
drwxrwxr-x   2 1472     icdatacr    1024 Apr 30 08:36 27
drwxrwxr-x   7 iccavd   icdatacr     512 Mar  3 17:17 actualizacion
drwxrwxrwx   3 icrgd    icdatacr     512 Feb 23 23:33 analistas
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 11 08:54 animator
drwxrwxr-x   2 iccavd   icdatacr     512 May 27 11:34 archtemp
drwxrwxr-x   2 icejvd   icdatacr     512 May 19 15:11 artefactos_Portal_20140519
drwxrwxrwx   2 root     root         512 May 19 17:08 artefactos_tomcat_19_05_2014
drwxrwxr-x   2 iccavd   icdatacr     512 May  2 07:50 auditor
drwxrwxr-x   2 icgjcd   icdatacr    4096 Apr 28 17:12 binds
drwxrwxr-x  10 icgjcd   icdatacr   94208 May 27 11:17 copys
drwxrwxr-x   5 iccavd   icdatacr    7680 May 27 11:32 database
drwxrwxr-x   4 iccavd   icdatacr   11264 May 27 10:41 datos
drwxr-xr-x  26 icbuild  icprodd     2560 Apr 24 14:15 Desinstalar
drwxrwxr-x 188 icbuild  icprodd    20480 May 23 15:37 Desplegar
drwxrwxr-x   5 icbuild  icprodd      512 Jun 11  2013 Desplegar_pruebas
drwxr-xr-x  19 icbuild  icprodd     1024 Apr 21 17:23 Despliegue_Fallido
drwxrwxr-x   3 iccavd   icdatacr     512 May 19 16:34 direcciones
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 11 08:58 especiales
drwxrwxr-x  19 icgjcd   icdatacr  307712 May 27 11:24 fuentes
drwxr-xr-x   7 icbuild  icprodd      512 Apr 10 17:33 Hello_Word
drwxrwxr-x   2 iccavd   icdatacr     512 Feb 12 11:08 icregis
drwxr-sr-x   2 1473     icdatacr     512 Dec 19 13:43 icrpgd
drwxrwxr-x  12 icgjcd   icdatacr    2560 Apr 22 11:07 jars
drwxrwxr-x   2 iccavd   icdatacr    3584 May  5 15:52 listados
drwxrwxr-x   7 icgjcd   icdatacr  106496 May 27 10:38 macros
drwxr-xr-x   2 icjapd   root         512 Mar 17  2012 monitoreo
drwxrwxr-x   4 iccavd   icdatacr   79872 May 27 11:07 objetos
drwxrwxr-x   6 icgjcd   icdatacr    1024 Apr  8 13:50 rai
drwxr-xr-x   2 icgjcd   icdatacr     512 Feb 10 19:19 restore20140210
drwxrwxr-x   9 icfactur icdatacr     512 May 13 17:13 sf
drwxrwxr-x   5 icjcld   icdatacr     512 May  5 17:15 SGID
drwx------   6 icjcld   icdatacr     512 May 14 21:08 stt
drwxr-xr-x  24 icbuild  icprodd     1536 Apr  1  2013 Tablas_Parametros
drwxr-xr-x   6 icbuild  icprodd      512 Aug  1  2013 Tablas_Parametros_Produccion
drwxrwxr-x 171 iccavd   icdatacr   28672 May 27 11:33 temporales
drwxrwxr-x   2 iccavd   icdatacr    1536 May 27 11:34 terminales
drwxrwxr-x   7 iccavd   icdatacr     512 Mar 31 10:47 trabajo
drwxrwxr-x   3 iccavd   icdatacr     512 Apr 28 10:24 usuarios
drwxrwxr-x   3 icgjcd   icdatacr    4608 Mar 13 15:24 utiles
/d/iccol/desarrollo>cd macros
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>cd macrosls -l | grep ^dls -l          ls -l | less
total 109458
-rw-rw-r--   1 icrgd    icdatacr    8414 Apr  3  2012 :wq
-rw-rw-r--   1 icnudd   icdatacr       0 Aug 12  2013 *.*
-rw-rw-r--   1 1366     icdatacr       0 Sep 12  2008 000007
-rw-rw-r--   1 1366     icdatacr       0 Sep 12  2008 000017
-rw-rw-r--   1 1366     icdatacr       0 Sep 12  2008 001809
-rw-rw-r--   1 icgjcd   icdatacr       0 Dec  7  2011 030102.20111031-005-c
-rw-rw-r--   1 icjdld   icdatacr    3303 Apr 20  2010 1
-rw-rw-r--   1 icjaad   icdatacr       0 Aug 29  2011 2
-rwxrwxr-x   1 227      icdatacr    1127 Mar 21  2007 42-prbessi
-rw-rw-r--   1 icimsd   icdatacr     465 Feb 11  2013 800153993-EstCSV-00000000-99999999.log
-rwxrwxr-x   1 227      icdatacr    7088 Mar 21  2007 a.out
-rw-rw-r--   1 icjdld   icdatacr    2490 May 24  2012 a1
-rw-rw-r--   1 1360     icdatacr       0 Aug 29  2009 actualizacion
-rwxrwxr-x   1 1396     icdatacr    3296 Jun 17  2009 ah-VIPS-FINANCIERO
-rwxrwxr-x   1 icjdld   icdatacr   37539 Feb 25 17:06 algo
-rw-rw-r--   1 icjdld   icdatacr      22 May 23  2007 algo.sed
-rwxrwxr-x   1 icjdld   icdatacr     751 May 25  2012 algo1
-rw-rw-r--   1 icjdld   icdatacr       0 Oct 11  2011 algo2
-rwxrwxr-x   1 227      icdatacr    2371 Mar 21  2007 alguna
-rwxrwxr-x   1 icvhfd   icdatacr      15 Mar 21  2007 amb
-rwxrwxr-x   1 227      icdatacr     853 Mar 21  2007 ambi
-rwxrwxr-x   1 227      icdatacr    1068 Mar 21  2007 ambiente
-rw-rw-r--   1 icrmbd   icdatacr      79 Sep 20  2011 ANDRES.ENT
-rwxrwxr-x   1 227      icdatacr      22 Mar 21  2007 ansi
-rw-rw-r--   1 icjdld   icdatacr      15 Jul 17  2008 archivo
-rwxrwxr-x   1 icjcld   icdatacr    3303 Aug  3  2009 awk-frared-rmb
-rwxrwxr-x   1 icjcld   icdatacr    3303 Nov 23  2010 awk-frared01
-rwxrwxr-x   1 icvhfd   icdatacr      89 Mar 21  2007 awk-novedat
-rwxrwxr-x   1 icvhfd   icdatacr      68 Mar 21  2007 awk-scovisa
-rwxrwxr-x   1 icvhfd   icdatacr     296 Mar 21  2007 awk-tb-modifica
-rwxrwxr-x   1 icgjcd   icdatacr     121 Mar 21  2007 awkgj
-rwxrwxr-x   1 icgjcd   icdatacr     195 Mar 21  2007 awkgj1
-rwxrwxr-x   1 icvhfd   icdatacr     156 Mar 21  2007 awkvhf
-rwxrwxr-x   1 227      icdatacr   11107 Jul 30  2012 b
-rwxrwxr-x   1 icgjcd   icdatacr    4690 May  3  2012 backup-desarrollo
-rwxrwxr-x   1 icgjcd   icdatacr    4337 Aug 10  2011 backup-desarrollo-20110810
-rwxrwxr-x   1 icgjcd   icdatacr    4641 May  3  2012 backup-desarrollo-20120503
-rwxrwxr-x   1 icgjcd   icdatacr    3804 Sep 18  2008 backup-desarrollo.20101028
-rwxrwxr-x   1 icgjcd   icdatacr    2947 Mar 21  2007 backup-desarrollo.ant
-rwxrwxr-x   1 icgjcd   icdatacr    3282 Mar 21  2007 backup-icdb
-rwxrwxr-x   1 icgjcd   icdatacr     444 Mar 21  2007 backup-icdb.ant
-rwxrwxr-x   1 227      icdatacr     158 Mar 21  2007 bajsitio
-rw-rw-r--   1 1360     icdatacr    2102 Dec 18  2007 baseid.ESTADI
-rw-rw-r--   1 icjaad   icdatacr     773 Apr 10  2012 BASURA.tmp
-rw-rw-r--   1 icnudd   icdatacr     750 Aug 14  2013 BDIEGARJ.log
-rwxrwxr-x   1 227      icdatacr   10462 Mar 21  2007 bdinanom
-rwxrwxr-x   1 227      icdatacr   10831 Mar 21  2007 BDINANOM
-rwxrwxr-x   1 227      icdatacr   10157 Mar 21  2007 BDINANOM.ANT1
:-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 BDINREG
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 BDINREG.idx
-rw-rw-r--   1 icfard   icdatacr   41809 Sep 11  2012 BDLDI2.WS
-rw-rw-r--   1 1395     icdatacr     605 Nov  9  2009 BDLPART
-rw-rw-r--   1 1395     icdatacr    4096 Nov  9  2009 BDLPART.idx
-rwxrwxr-x   1 227      icdatacr    3953 Mar 21  2007 BDUCACT
-rwxrwxr-x   1 icgjcd   icdatacr    5450 Mar 21  2007 BDUCACT-PARM
-rwxrwxr-x   1 227      icdatacr      84 Mar 21  2007 BDUCACT.LOGsh-actarev
-rwxrwxr-x   1 227      icdatacr     646 Mar 21  2007 BDUCACT.ORI
-rwxrwxr-x   1 227      icdatacr    3443 Mar 21  2007 BDUCVAL
-rwxrwxr-x   1 icgjcd   icdatacr    5092 Mar 21  2007 BDUCVAL-PARM
-rw-rw-r--   1 1368     icdatacr    9884 Jul 23  2012 borra
-rwxrwxr-x   1 icgjcd   icdatacr    1647 Mar 21  2007 busque-cadena.sh
-rwxrwxr-x   1 227      icdatacr     270 Mar 21  2007 c
-rwxrwxr-x   1 227      icdatacr     358 Mar 21  2007 c-c
-rwxrwxr-x   1 icgjcd   icdatacr    1033 Jul 13  2010 c-cbl
-rw-rw-r--   1 icgjcd   icdatacr      24 Jun  6  2013 c-cbl.err
-rwxrwxr-x   1 icgjcd   icdatacr    3272 Jan 22  2013 c-cbldb2
-rwxrwxr-x   1 icgjcd   icdatacr     813 Jul 13  2010 c-cbljv
-rwxrwxr-x   1 227      icdatacr     594 Mar 21  2007 c-cla
-rw-rw-r--   1 icgjcd   icdatacr    3212 Jun 13  2013 c-cobdb2
-rwxrwx--x   1 icgjcd   icdatacr    3212 May 31  2013 c-cobdb2-20130531
-rwxrwx--x   1 icvhfd   icdatacr    3212 Mar  4  2011 c-cobdb2-8
-rwxrwxr-x   1 icvhfd   icdatacr    3270 Nov 12  2010 c-cobdb2-97
-rwxrwxr-x   1 icvhfd   icdatacr    3362 Mar  8  2008 c-cobdb2-act
-rwxrwx--x   1 icgjcd   icdatacr    3826 Sep  2  2013 c-cobdb2-globant
-rwxrwxr-x   1 icvhfd   icdatacr    3329 Mar  8  2008 c-cobdb2-ley
-rw-rw----   1 icvhfd   icdatacr    3210 Nov 12  2010 c-cobdb2-v8
-rwxrwxr-x   1 icvhfd   icdatacr    3809 Mar  4  2011 c-cobdb2-v97
-rwxrwxr-x   1 1360     icdatacr    3211 Sep 28  2010 c-cobdb2.avh
-rw-rw----   1 icvhfd   icdatacr    3596 Nov 17  2010 c-cobdb2.demo
-rwxrwxr-x   1 icvhfd   icdatacr    3212 Nov 12  2010 c-cobdb2.ok
-rwxrwxr-x   1 icvhfd   icdatacr    1209 Mar 21  2007 c-cobdb2.rmb
-rwxrwxr-x   1 icnudd   icdatacr    1809 Nov 11  2011 c-cobhijo
-rw-rw-r--   1 icgjcd   icdatacr    1295 Aug 26  2013 c-cobjava
-rwxrwxr-x   1 icgjcd   icdatacr     768 May 31  2013 c-cobjava-20130531
-rwxrwxr-x   1 icvhfd   icdatacr    4119 Mar 21  2007 c-cobsql
-rwxrwxr-x   1 icvhfd   icdatacr    2463 Mar 21  2007 c-cobsql-ant
-rwxrwxr-x   1 icgjcd   icdatacr    4197 Mar 21  2007 c-cobsql-bound
-rwxrwxr-x   1 icvhfd   icdatacr    3679 Mar 21  2007 c-cobsql-pru
-rwxrwxr-x   1 icvhfd   icdatacr    3577 Mar 21  2007 c-cobsql.5
-rwxrwxr-x   1 icdlmd   icdatacr     240 Mar 21  2007 c-cobsql.dlm
-rwxrwxr-x   1 icvhfd   icdatacr     407 Mar 21  2007 c-csql
-rwxrwxr-x   1 227      icdatacr     358 Mar 21  2007 c-csun
-rwxrwxr-x   1 227      icdatacr     689 Mar 21  2007 c-e
-rw-rw-r--   1 icgjcd   icdatacr    1614 Aug 26  2013 c-ev
-rwxrwxr-x   1 icgjcd   icdatacr    1055 May 31  2013 c-ev-20130531
-rwxrwxr-x   1 icgjcd   icdatacr     299 Jan 26  2012 c-ev-aciertamas
-rwxrwxrwx   1 icgjcd   icdatacr     317 Nov  8  2011 c-ev-caracteristicas
:-rwxrwxr-x   1 icgjcd   icdatacr    1003 May 24  2010 c-ev-pes
-rwxrwxrwx   1 icgjcd   icdatacr     185 Apr  7  2011 c-ev-quanto
-rwxrwxrwx   1 1215     icdatacr     699 Nov 26  2009 c-ev-RGH
-rwxrwxr-x   1 iccavd   icdatacr    1074 Jan 12  2011 c-ev-salmin-2011
-rwxrwxrwx   1 icgjcd   icdatacr    1177 Dec 29  2011 c-ev-salmin-2012
-rwxrwxr-x   1 icgjcd   icdatacr    1119 Dec 27  2012 c-ev-salmin-2013
-rwxrwxr-x   1 iccavd   icdatacr    1067 Dec 30 16:40 c-ev-salmin-2014
-rwxrwxr-x   1 iccavd   icdatacr    1084 Dec 30 15:19 c-ev-salmin-2014-orig
-rwxrwxr-x   1 icgjcd   icdatacr    1144 Dec 31  2009 c-ev-scot16
-rwxrwxr-x   1 1395     icdatacr    1209 Jul 13  2012 c-ev64
-rwxrwxr-x   1 icvhfd   icdatacr      27 Mar 21  2007 c-hs
-rwxrwxr-x   1 227      icdatacr     691 Mar 21  2007 c-o
-rwxrwxr-x   1 227      icdatacr     692 Mar 21  2007 c-ov
-rwxrwx--x   1 icgavd   icdatacr    3773 Sep  3  2013 c-pepe
-rwxrwxr-x   1 icdlmd   icdatacr     219 Mar 21  2007 C-RTS32
-rwxrwxr-x   1 icvhfd   icdatacr      30 Mar 21  2007 c-ss
-rwxrwxr-x   1 icrmbd   icdatacr     162 Aug 22  2013 c-tera
-r--r--r--   1 icgjcd   icdatacr    1639 Aug 26  2013 c-v
-rwxrwxr-x   1 icgjcd   icdatacr    1186 May 31  2013 c-v-2013-05-31
-rwxrwxrwx   1 icgjcd   icdatacr     941 Jan 26  2012 c-v-aciertamas
-rwxrwxr-x   1 1360     icdatacr    1800 Mar  8  2008 c-v-act
-rwxrwxr-x   1 1360     icdatacr    1084 Mar  8  2008 c-v-act-ORI
-rwxrwxr-x   1 icgjcd   icdatacr     880 Nov  8  2011 c-v-caracteristicas
-rw-rw-r--   1 icgjcd   icdatacr   57117 Jun 14  2011 c-v-caracteristicas-sal
-rwxrwxr-x   1 icjdld   icdatacr    3989 Apr 20  2010 c-v-CONdb2
-rwxrwxrwx   1 icjdld   icdatacr    3889 Mar  9  2010 c-v-CONdb2-OK1
-rwxrwxr-x   1 icjdld   icdatacr    1267 Apr 20  2010 c-v-CONjav
-rwxrwxr-x   1 icjdld   icdatacr    1160 Mar 10  2010 c-v-CONjav-OK1
-rwxrwxr-x   1 icjdld   icdatacr    1876 Apr 20  2010 c-v-CONVER
-rwxrwxrwx   1 icjdld   icdatacr    1769 Mar  9  2010 c-v-CONVER-OK1
-rwxrwxr-x   1 icjdld   icdatacr    1862 Apr 20  2010 c-v-CONVEResp
-rwxrwxr-x   1 icjdld   icdatacr    1755 Mar 11  2010 c-v-CONVEResp-OK1
-rw-rw-r--   1 icjdld   icdatacr    1186 Sep 30  2008 c-v-DAR
-rwxrwxr-x   1 icnudd   icdatacr     855 Mar 21  2007 c-v-exe
-rwxrwxr-x   1 icnudd   icdatacr     861 Mar 21  2007 c-v-gnt
-rwxrwxr-x   1 icjdld   icdatacr    1064 Feb 19  2008 c-v-hoy
-rwxrwxr-x   1 icjdld   icdatacr    1754 Mar  8  2008 c-v-ley
-rwxrwxr-x   1 1360     icdatacr    1599 Mar  8  2008 c-v-ley-esp
-rw-rw-r--   1 icjdld   icdatacr    1064 Mar  7  2008 c-v-ley-ORI
-rwxrwxr-x   1 icgjcd   icdatacr    1351 May 24  2010 c-v-pes
-rwxrwxr-x   1 icgjcd   icdatacr    1189 Nov 11  2011 c-v-pru
-rwxrwxr-x   1 icgjcd   icdatacr     954 Mar 21  2007 c-v-pruebas
-rwxrwxrwx   1 icgjcd   icdatacr     441 Apr  7  2011 c-v-quanto
-rwxrwxrwx   1 icgjcd   icdatacr    1569 Jan 12  2011 c-v-salmin-2011
-rwxrwxrwx   1 icgjcd   icdatacr    2464 Dec 29  2011 c-v-salmin-2012
-rwxrwxr-x   1 icgjcd   icdatacr    1794 Dec 27  2012 c-v-salmin-2013
-rwxrwxr-x   1 iccavd   icdatacr    1551 Dec 30 16:38 c-v-salmin-2014
-rwxrwxr-x   1 iccavd   icdatacr    1700 Dec 30 15:40 c-v-salmin-2014-orig
-rwxrwxr-x   1 icgjcd   icdatacr     873 Dec 31  2009 c-v-scot16
:-rwxrwxrwx   1 icgjcd   icdatacr     805 Dec 31  2009 c-v-scot16.txt
-rwxrwxr-x   1 icvhfd   icdatacr    1193 Mar 21  2007 c-v-usr
-rwxrwxr-x   1 227      icdatacr     839 Mar 21  2007 c-v32
-rwxrwxrwx   1 1395     icdatacr    1394 Jul 13  2012 c-v64
-rwxrwxrwx   1 1215     icdatacr    1259 Nov 26  2009 c-vRG
-rwxrwxr-x   1 227      icdatacr     272 Mar 21  2007 c32
-rw-rw-r--   1 icjdld   icdatacr     641 Feb 16  2009 cam-long-00.awk
-rw-rw-r--   1 227      icdatacr      49 May 17  2007 cambio-1.sed
-rw-rw-r--   1 icjdld   icdatacr     113 Jan 23  2008 cambio-10.sed
-rw-rw-r--   1 icjdld   icdatacr     241 Jan 23  2008 cambio-11.sed
-rw-rw-r--   1 icjdld   icdatacr     112 Jan 23  2008 cambio-12.sed
-rw-rw-r--   1 icjdld   icdatacr     113 Jan 23  2008 cambio-13.sed
-rw-rw-r--   1 icjdld   icdatacr     239 Jan 23  2008 cambio-14.sed
-rw-rw-r--   1 icjdld   icdatacr     105 Jan 23  2008 cambio-15.sed
-rw-rw-r--   1 icjdld   icdatacr     108 Jan 23  2008 cambio-16.sed
-rw-rw-r--   1 227      icdatacr      52 May 17  2007 cambio-2.sed
-rw-rw-r--   1 icjdld   icdatacr      50 Jan 16  2008 cambio-3.sed
-rw-rw-r--   1 icjdld   icdatacr      52 May 17  2007 cambio-4.sed
-rw-rw-r--   1 icjdld   icdatacr     346 Feb 21  2008 cambio-5.sed
-rw-rw-r--   1 icjdld   icdatacr     246 Jan 30  2008 cambio-5.sed-OK
-rw-rw-r--   1 icjdld   icdatacr     196 Jan 29  2008 cambio-5.sed-ORI
-rw-rw-r--   1 icjdld   icdatacr     196 Jan 23  2008 cambio-6.sed
-rw-rw-r--   1 icjdld   icdatacr     105 Jan 23  2008 cambio-7.sed
-rw-rw-r--   1 icjdld   icdatacr     108 Jan 23  2008 cambio-8.sed
-rw-rw-r--   1 icjdld   icdatacr     112 Jan 23  2008 cambio-9.sed
-rwxrwxrwx   1 icjdld   icdatacr    5094 Jul 30  2008 cargue-EMPLEDAVI.sh
-rwxrwxr-x   1 icjdld   icdatacr    4698 Mar 28  2007 cargue-NODESEADOS.sh
-rw-rw-r--   1 icgjcd   icdatacr   22214 Nov 22  2011 CARTERA-TOTAL-HSBC-a
-rw-rw-r--   1 icgjcd   icdatacr     313 Nov 22  2011 CARTERA-TOTAL-HSBC-a.log
-rwxrwxr-x   1 ichlgd   icdatacr    5094 Jun 27  2012 catalogar.sh
-rwxrwxr-x   1 227      icdatacr    3119 Mar 21  2007 catcgi
-rwxrwxr-x   1 227      icdatacr    3463 Mar 21  2007 cathtml
-rwxrwxr-x   1 227      icdatacr    3162 Mar 21  2007 catproxy
-rwxrwxr-x   1 227      icdatacr     628 Mar 21  2007 cblc
-rwxrwxr-x   1 icvhfd   icdatacr     448 Mar 21  2007 cc-obj
-rw-rw-r--   1 icgjcd   icdatacr     111 May 27 10:38 CCI.INI
-rw-rw-r--   1 icgjcd   icdatacr   80000 May 27 10:38 CCI.WRK
-rw-rw-r--   1 icehad   icdatacr    2921 Apr 22 10:47 ccierr.log
-rwxrwxr-x   1 227      icdatacr     837 Mar 21  2007 ce-v
-rw-rw-r--   1 icfgcd   icdatacr  375986 Jul 22  2013 cedulas.txt
-rw-rw-r--   1 icfgcd   icdatacr    1204 Jul 22  2013 cedulasExtranjeria.txt
-rwxrwxr-x   1 iccigd   icdatacr    2935 Feb 21  2012 cig
-rwxrwxrwx   1 iccigd   icdatacr     319 Jan 31  2012 cig-ex
-rwxrwxrwx   1 iccigd   icdatacr      19 Nov 24  2010 cigd-prueba
-rwxrwxr-x   1 icvhfd   icdatacr     131 Mar 21  2007 circular
-rw-rw-r--   1 icjdld   icdatacr       0 Mar  5  2013 CITICLIFERIA-ARR
-rwxrwxr-x   1 227      icdatacr     469 Mar 21  2007 claveunica
-rw-rw-r--   1 icjjmd   icdatacr       0 Jan 10 17:05 cls
-rwxrwxr-x   1 227      icdatacr     837 Mar 21  2007 co-v
:-rw-rw-r--   1 1381     icdatacr       0 Dec 20  2008 cobr860034313
-rw-rw-r--   1 1381     icdatacr       0 Apr  1  2009 cobr860034313.SALSEG2
-rw-rw-r--   1 1360     icdatacr      20 Dec 21  2008 cobranza.param
-rwxrwxr-x   1 227      icdatacr     692 Mar 21  2007 com
-rwxrwxr-x   1 227      icdatacr     751 Mar 21  2007 com-2000
-rwxrwxr-x   1 227      icdatacr     657 Mar 21  2007 com-utl
-rwxrwxr-x   1 227      icdatacr     647 Mar 21  2007 com2
-rwxrwxr-x   1 227      icdatacr     562 Mar 21  2007 com3
-rwxrwxr-x   1 icfacd   icdatacr     416 Mar 21  2007 comp-rangonits
-rwxrwxr-x   1 icfacd   icdatacr     226 Mar 21  2007 comp-regloc
-rwxrwxr-x   1 icfacd   icdatacr     885 Mar 21  2007 comp-scot16
-rwxrwxr-x   1 icfacd   icdatacr     730 Mar 21  2007 comp-valnom
-rwxrwxr-x   1 227      icdatacr     837 Mar 21  2007 comp-verif
-rwxrwxrwx   1 1368     icdatacr     141 Aug  6  2007 compila-asigna
-rwxrwxr-x   1 227      icdatacr     563 Mar 21  2007 compilar
-rwxrwxr-x   1 227      icdatacr    1177 Mar 21  2007 compilar-cla-sus
-rwxrwxr-x   1 227      icdatacr     360 Mar 21  2007 compilar-icbcla
-rwxrwxr-x   1 227      icdatacr     533 Mar 21  2007 compilar1
-rwxrwxr-x   1 227      icdatacr     565 Mar 21  2007 compilar32
-rwxrwxr-x   1 227      icdatacr      19 Mar 21  2007 comprimir
-rwxrwxr-x   1 227      icdatacr     493 Mar 21  2007 consultas
-rwxrwxr-x   1 227      icdatacr     506 Mar 21  2007 CONSULTAS
-rwxrwxr-x   1 227      icdatacr    2132 Mar 21  2007 copia.cos
-rwxrwxr-x   1 227      icdatacr     382 Mar 21  2007 copiaicf
-rwxrwxr-x   1 icjdld   icdatacr      86 Apr 24  2008 corte.awk
-rwxrwxr-x   1 227      icdatacr     546 Mar 21  2007 cpfiles
-rw-rw-r--   1 icjdld   icdatacr 6921745 Apr 29 18:04 CTLCOPYCRE.20140429.core
-rw-rw-r--   1 icjaad   icdatacr    4264 Aug 18  2011 cuales.txt
-rwxrwxr-x   1 227      icdatacr     609 Mar 21  2007 cuenta-tco
-rwxrwxr-x   1 icnudd   icdatacr    1779 Mar 21  2007 d-cobc
-rwxrwxr-x   1 icvhfd   icdatacr    3721 Dec  5 06:33 d-cobdb2
-rwxrwxr-x   1 1360     icdatacr    3714 Mar  9  2008 d-cobdb2-ley
-rwxrwxr-x   1 icjcld   icdatacr    3587 Aug 20  2013 d-cobdb2.ok
-rwxrwxr-x   1 227      icdatacr    3374 Mar 21  2007 d-cobsql
-rwxrwxr-x   1 iccigd   icdatacr    4883 Aug  2  2012 dar
-rwxrwxr-x   1 icjdld   icdatacr    3908 Apr 24  2012 dar-1
-rwxrwxr-x   1 icjdld   icdatacr    3229 Apr 24  2012 dar-O
-rwxrwxr-x   1 icjdld   icdatacr    2868 May  4  2012 dar-OK1
-rw-rw-r--   1 1391     icdatacr       0 Jan 29  2009 data
-rw-rw-r--   1 227      icdatacr       0 Nov  1  2008 datval159.awk
-rwxrwxr-x   1 icvhfd   icdatacr      13 Mar 21  2007 dba
-rwxrwxr-x   1 icvhfd   icdatacr     409 Mar 21  2007 dd_REGIS
-rw-rw-r--   1 icvhfd   icdatacr    5750 Apr 22 10:53 deborrar
-rwxrwxr-x   1 icvhfd   icdatacr      76 May 30  2008 delay_vhf
-rwxrwx--x   1 icgjcd   icdatacr    3212 Jun 14  2013 des-c-cobdb2
-rwxrwxr-x   1 icgjcd   icdatacr    1326 Aug 26  2013 des-c-cobjava
-rwxrwxr-x   1 icgjcd   icdatacr    1644 Aug 26  2013 des-c-ev
-rwxrwxr-x   1 iccavd   icdatacr    1268 Dec 30 15:44 des-c-ev-salmin-2014
-rwxrwxr-x   1 icgjcd   icdatacr    1671 Aug 26  2013 des-c-v
:-rwxrwxr-x   1 iccavd   icdatacr    2009 Dec 30 15:44 des-c-v-salmin-2014
-rwxrwxr-x   1 icrmbd   icdatacr    1671 Aug 20  2013 des-c-v-x
-rwxrwxr-x   1 icgjcd   icdatacr    1186 Jul 25  2013 des32-c-v
-rwxrwxr-x   1 227      icdatacr      33 Mar 21  2007 desfrag
-rwxrwxr-x   1 227      icdatacr     322 Mar 21  2007 dif-fu
-rwxrwxr-x   1 227      icdatacr     510 Mar 21  2007 dif-icn31
-rw-rw-r--   1 icjaad   icdatacr     928 Sep  2  2011 diferenciaversion.txt
-rw-rw-r--   1 icjaad   icdatacr   56699 Nov 24  2011 DIFF_SHELLV2-1.txt
-rw-rw-r--   1 iclagd   icdatacr    1173 Sep  9  2012 diff-CQ6455
-rw-rw-r--   1 1381     icdatacr    1155 Jan 27  2011 diff1178
-rw-rw-r--   1 1381     icdatacr   13711 Jun  3  2011 diff1903
-rw-rw-r--   1 iclagd   icdatacr    1805 Oct 26  2012 diff6455
-rw-rw-r--   1 iclagd   icdatacr     706 Oct 22  2012 diff7686
-rw-rw-r--   1 iclagd   icdatacr    3323 Sep 20  2012 diffbog
-rw-rw-r--   1 1396     icdatacr       0 May 20  2010 director.tmp
-rwxrwxr-x   1 227      icdatacr    1844 Mar 21  2007 Directorio
-rwxrwxr-x   1 icjaad   icdatacr    1768 Mar 10 14:39 dj
-rwxrwxr-x   1 icvhfd   icdatacr      17 Mar 21  2007 doc
drwxrwxr-x   3 227      icdatacr   12288 Mar 13 14:25 documentacion
-rwxrwxr-x   1 227      icdatacr      17 Mar 21  2007 dos
-rwxrwxr-x   1 icvhfd   icdatacr    4182 Mar 21  2007 DTCVERIF
-rwxrwxr-x   1 227      icdatacr    1659 Mar 21  2007 DTR003
-rwxrwxr-x   1 227      icdatacr     273 Mar 21  2007 DTRUAPET
-rwxrwxr-x   1 227      icdatacr     100 Mar 21  2007 ejeawk
-rwxrwxr-x   1 227      icdatacr     747 Mar 21  2007 elim_regs
-rwxrwxr-x   1 icgjcd   icdatacr    1639 Jun 30  2010 elimi-dth.awk
-rw-rw-r--   1 1368     icdatacr       0 Jan  5  2009 endeudact
-rwxrwxr-x   1 227      icdatacr     345 Mar 21  2007 espacio
drwxrwxr-x   2 1215     icdatacr     512 Nov 18  2011 especiales
-rwxrwxr-x   1 icjdld   icdatacr    9603 Nov  6  2008 est-sem-comcel.awk
-rw-rw-r--   1 1366     icdatacr    5972 May 13  2008 extfh2007-DAR.cfg
-rw-rw-r--   1 icfacd   icdatacr    5972 Apr 23  2008 extfh2007.cfg
-rw-rw-r--   1 1366     icdatacr    5972 May 14  2008 extfh200804.cfg
-rw-rw-r--   1 1366     icdatacr    5972 May 13  2008 extfhxxxx-DAR.cfg
-rwxrwxr-x   1 227      icdatacr     567 Mar 21  2007 f1
-rwxrwxr-x   1 227      icdatacr     243 Mar 21  2007 f2
-rw-rw-r--   1 icgjcd   icdatacr      15 Dec  3  2012 FACFINSOPT.DAT
-rwxrwxr-x   1 227      icdatacr    2183 Mar 21  2007 factura-fast
-rwxrwxr-x   1 227      icdatacr    2548 Mar 21  2007 factura-fast.ant
-rwxrwxr-x   1 227      icdatacr    3106 Mar 21  2007 facturacion
-rwxrwxr-x   1 227      icdatacr    2651 Mar 21  2007 facturacion.ant
-rwxrwxr-x   1 227      icdatacr    2815 Mar 21  2007 facturacion.ant.1
-rwxrwxr-x   1 227      icdatacr    2652 Mar 21  2007 facturacion.desa
-rwxrwxr-x   1 icgjcd   icdatacr    3124 Mar 21  2007 facturacion.gj
-rwxrwxr-x   1 227      icdatacr     352 Mar 21  2007 FACUDCIFRA
-rw-rw-r--   1 icvhfd   icdatacr     168 Mar 27  2012 FACULIS.LOGDIA-20120327
-rwxrwxr-x   1 227      icdatacr     347 Mar 21  2007 FACUPRED
-rwxrwxr-x   1 227      icdatacr     828 Mar 21  2007 FACUSCOR
-rwxrwxr-x   1 227      icdatacr      32 Mar 21  2007 file-share
:-rwxrwxr-x   1 227      icdatacr      21 Mar 21  2007 formas
-rwxrwxr-x   1 icgjcd   icdatacr      49 Mar 21  2007 FRAEST.SORT
-rw-rw-r--   1 icvhfd   icdatacr       0 Nov 22  2007 FRALOG.200702
-rw-rw-r--   1 icfard   icdatacr       0 May  7  2012 FRALOG.ant
-rwxrwxr-x   1 227      icdatacr     469 Mar 21  2007 ftp-comunica
-rwxrwxr-x   1 icvhfd   icdatacr     471 Mar 21  2007 ftp-comunica-novedat
-rwxrwxr-x   1 icjdld   icdatacr     917 Nov 27  2013 ftp-dlm
-rw-rw-r--   1 icjdld   icdatacr     570 Sep 14  2010 fuentes-10.sed
-rw-rw-r--   1 icjdld   icdatacr     305 Sep  7  2010 fuentes-10.sed-OK1
-rw-rw-r--   1 icjdld   icdatacr     398 Nov 11  2010 fuentes-11.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Nov 11  2010 fuentes-12.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Jun  1  2007 fuentes-2.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Sep 17  2008 fuentes-3.sed
-rw-rw-r--   1 1215     icdatacr     398 Sep 17  2008 fuentes-3.sed-bk-2008-09-17
-rw-rw-r--   1 icjdld   icdatacr     398 Sep 17  2008 fuentes-4.sed
-rw-rw-r--   1 1215     icdatacr     398 Sep 17  2008 fuentes-4.sed-bk-2008-09-17
-rw-rw-r--   1 icjdld   icdatacr     398 Apr 20  2010 fuentes-5.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Apr 20  2010 fuentes-6.sed
-rw-rw-r--   1 icjdld   icdatacr     293 Apr 20  2010 fuentes-7.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Sep  7  2010 fuentes-8.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Sep  7  2010 fuentes-9.sed
-rw-rw-r--   1 icjdld   icdatacr     398 Jun  1  2007 fuentes.sed
-rwxrwxr-x   1 icgjcd   icdatacr      20 Mar 21  2007 fupru
-rwxrwxr-x   1 227      icdatacr     107 Mar 21  2007 ggsort
-rw-rw-r--   1 icgjcd   icdatacr   11378 Jan  3  2012 gj1
-rwxrwxr-x   1 icjdld   icdatacr     156 Dec  3  2008 graba-80.awk
-rwxrwxr-x   1 icgjcd   icdatacr     343 Jan 22 12:28 grace.awk
-rw-rw-r--   1 iclagd   icdatacr    7423 Dec 11 16:51 greppes
-rw-rw-r--   1 iclagd   icdatacr   33930 Dec 11 11:09 grepsan
-rw-rw-r--   1 227      icdatacr    2021 Oct 18  2011 grp-macros-des-20111018.txt
-rw-rw-r--   1 icjdld   icdatacr      71 Jul 13  2009 h-utlcre-vlr
-rwxrwxr-x   1 227      icdatacr    8840 Mar 21  2007 hd
-rwxrwxr-x   1 227      icdatacr      41 Mar 21  2007 hh
-rwxrwxr-x   1 227      icdatacr     110 Mar 21  2007 hijo-sock04.err
-rw-rw-r--   1 227      icdatacr    3306 May 18  2011 hs_err_pid13681.log
-rw-rw-r--   1 iccigd   icdatacr    3305 Apr 19  2011 hs_err_pid14008.log
-rw-rw-r--   1 icehad   icdatacr    3306 Aug  8  2011 hs_err_pid15871.log
-rw-rw-r--   1 227      icdatacr    3306 May 18  2011 hs_err_pid15939.log
-rw-rw-r--   1 227      icdatacr    3306 May 18  2011 hs_err_pid16534.log
-rw-rw-r--   1 227      icdatacr    3306 May 18  2011 hs_err_pid17149.log
-rw-rw-r--   1 227      icdatacr    3306 May 18  2011 hs_err_pid17392.log
-rw-rw-r--   1 icimsd   icdatacr    6836 Nov 27  2012 hs_err_pid18327.log
-rw-rw-r--   1 227      icdatacr    3307 Jul 21  2011 hs_err_pid18691.log
-rw-rw-r--   1 icimsd   icdatacr    7005 Nov  9  2012 hs_err_pid19381.log
-rw-rw-r--   1 icehad   icdatacr    3305 Oct 20  2010 hs_err_pid24950.log
-rw-rw-r--   1 icjdld   icdatacr    8895 May  9  2013 hs_err_pid4288.log
-rw-rw-r--   1 icimsd   icdatacr    5677 Nov 28  2012 hs_err_pid7815.log
-rw-rw-r--   1 icjaad   icdatacr    3306 Aug 31  2011 hs_err_pid7859.log
-rwxrwxr-x   1 227      icdatacr      92 Mar 21  2007 ICBEXTP.CT02
:-rwxrwxr-x   1 1360     icdatacr     181 Dec  3  2008 ICBTCO-sinfecha.awk
-rw-rw-r--   1 icimsd   icdatacr    1668 Nov  7  2013 iceprevis01.aif
-rw-rw-r--   1 icimsd   icdatacr  231939 Sep 18  2013 iceprevis01.cbl
-rw-rw-r--   1 icimsd   icdatacr     931 Mar  3 21:59 icestd65vc-reloaded.aif
-rw-rw-r--   1 icimsd   icdatacr     922 Mar 20 17:07 icestd65vc.aif
-rwxrwxr-x   1 icgjcd   icdatacr       0 Mar 21  2007 icgconcom1
-rw-rw-r--   1 icjdld   icdatacr       0 Nov  2  2011 ICGD22V23.SAL
-rw-rw-r--   1 icfard   icdatacr    1285 Nov 14  2013 ICGDI2.aif
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifbatc1
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifbatc2
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifbatch
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifmco
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifmdh
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifpco
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 icgdifpdh
-rw-rw-r--   1 icimsd   icdatacr    1684 May 23 09:16 ICGKAR.aif
-rw-rw-r--   1 icnudd   icdatacr   13056 Nov 11  2011 ICGSTRN02.int
-rwxrwxr-x   1 227      icdatacr       0 Mar 21  2007 ICINCOS
-rw-rw-r--   1 icehad   icdatacr     298 Nov 30  2010 ICMCREBANK.201010.log
-rw-rw-r--   1 icjcld   icdatacr     234 Jan 29 09:50 ICMCRECOPY.log
-rwxrwxr-x   1 227      icdatacr      97 Mar 21  2007 ICMEXT
-rwxrwxr-x   1 227      icdatacr      97 Mar 21  2007 ICMEXT.FINMES
-rwxrwxr-x   1 icfacd   icdatacr     401 Mar 21  2007 icmextp
-rwxrwxr-x   1 227      icdatacr     333 Mar 21  2007 ICMEXTP
-rwxrwxr-x   1 227      icdatacr      98 Mar 21  2007 ICMEXTP.BORR
-rwxrwxr-x   1 227      icdatacr     343 Mar 21  2007 ICMEXTP.FINMES
-rwxrwxr-x   1 227      icdatacr     822 Mar 21  2007 ICMEXTP.INIMES
-rwxrwxr-x   1 227      icdatacr     386 Mar 21  2007 ICMEXTP2
-rwxrwxr-x   1 icrmbd   icdatacr     335 Mar 21  2007 ICMEXTPNEW
-rwxrwxr-x   1 227      icdatacr      99 Mar 21  2007 ICMEXTPP
-rwxrwxr-x   1 227      icdatacr     115 Mar 21  2007 icmvie
-rwxrwxr-x   1 icgjcd   icdatacr     214 Mar 21  2007 iden-nom
-rwxrwxr-x   1 icjdld   icdatacr    1678 Sep 18  2012 indexar.sh
-rwxrwxrwx   1 icehad   icdatacr    1678 Nov 25  2011 indexar.sh-eha
-rw-rw-r--   1 1395     icdatacr     558 Nov  7  2012 infpesvno201211.log
-rwxrwxr-x   1 icjdld   icdatacr     502 May 16  2007 inserta-en-posicion.awk
-rwxrwxr-x   1 227      icdatacr     385 Mar 21  2007 INTGAMB
-rwxrwxr-x   1 227      icdatacr    3782 Mar 21  2007 INTGPUB
-rwxrwxr-x   1 227      icdatacr    2141 Mar 21  2007 INTPCGI
-rwxrwxr-x   1 227      icdatacr    2508 Mar 21  2007 INTPHTM
-rwxrwxr-x   1 227      icdatacr    2076 Mar 21  2007 INTRCGI
-rwxrwxr-x   1 227      icdatacr    2306 Mar 21  2007 INTRHTM
-rwxrwxr-x   1 icgjcd   icdatacr      37 Mar 21  2007 l-dir
-rwxrwxr-x   1 icgjcd   icdatacr     525 Mar 21  2007 l-sort
-rwxrwxr-x   1 icgjcd   icdatacr     525 Mar 21  2007 l-sort1
-rw-rw-r--   1 iccavd   icdatacr    2801 May  4  2009 lee-maestros-linea
drwxrwxrwx   3 1215     icdatacr     512 Nov  2  2009 ley
-rw-rw-r--   1 icfacd   icdatacr     388 Oct 30  2009 lista-macros-calidad
-rwxrwxr-x   1 icjdld   icdatacr    1181 Jan  6  2009 lista-scot16
:-rwxrwxr-x   1 icjdld   icdatacr    1536 Nov 12  2008 lista-scot16-DAR
-rw-rw-r--   1 icjdld   icdatacr    3691 Nov 11  2008 lista-scot16-ORI
-rwxrwxr-x   1 icjdld   icdatacr    1042 Nov 28  2008 lista-scot16-pe
-rwxrwxr-x   1 icjdld   icdatacr    1042 Nov 11  2008 lista-scot16-pe-DAR
-rw-rw-r--   1 icjdld   icdatacr    1042 Nov 11  2008 lista-scot16-pe-ORI
-rw-rw-r--   1 icjamd   icdatacr      45 Oct 12  2012 lista.txt
-rw-rw-r--   1 1395     icdatacr     488 Jun 14  2011 log_
-rw-rw-r--   1 1360     icdatacr      84 Mar  8  2008 log_ICSAC1
-rw-rw-r--   1 1395     icdatacr     493 Jul 19  2011 log_sh-bdlupmail.txt
-rw-rw-r--   1 1395     icdatacr     488 Jun 21  2011 log_sh-dirdoc.txt
-rw-rw-r--   1 icjdld   icdatacr      30 Jan 14  2010 LOG-CITIBUSINESS-20091230
-rwxrwxr-x   1 icfacd   icdatacr   50474 Mar 21  2007 log-macro
-rw-rw-r--   1 1381     icdatacr      84 Dec 19  2008 log.mnt-NIT
-rw-rw-r--   1 1368     icdatacr     261 Jul 10  2007 logscore
-rw-rw-r--   1 1360     icdatacr    3910 Mar 16  2011 logSinReinicio.log
-rwxrwxr-x   1 227      icdatacr      30 Mar 21  2007 lt
-rw-rw-r--   1 iclagd   icdatacr    1719 Mar  7 12:02 luis-15805
-rw-rw-r--   1 1381     icdatacr    8105 Jul 22  2010 luisvcp
-rwxrwxr-x   1 icfacd   icdatacr     564 Mar 21  2007 m-scot16
-rwxrwxr-x   1 icdlmd   icdatacr      20 Mar 21  2007 macdlm1
-rw-rw-r--   1 1414     icdatacr      37 Jul 28  2010 macro1.sh
-rw-rw-r--   1 1414     icdatacr      38 Jul 28  2010 macro2.sh
-rw-rw-r--   1 icbuild  icprodd       10 Feb 10  2011 MacroBF.sh
-rw-rw-r--   1 icbuild  icprodd       10 Feb 10  2011 MacroProdBF.sh
-rwxrwxr-x   1 icbuild  icprodd      172 Oct  9  2013 MACROPRUEBABF2013
-rwxrwxr-x   1 icbuild  icprodd       18 Nov 25  2013 macrorecompilacionBF
-rwxr-xr-x   1 icjdld   icdatacr    3991 Mar 19  2013 makeAdb.sh
-rw-rw-r--   1 icjdld   icdatacr    3930 Mar 19  2013 makeAdb.sh-BCK1
-rwxrwxr-x   1 icvhfd   icdatacr    4450 Mar 21  2007 MANFACFEB.DAT
-rwxrwxr-x   1 icgjcd   icdatacr      15 Mar 21  2007 mapru
-rw-rw-r--   1 icrgd    icdatacr     851 Oct 27  2013 md5-rgh
-rwxrwxr-x   1 1129     icdatacr    9739 Mar 21  2007 MD5.jar
-rw-rw-r--   1 icjdld   icdatacr      45 Oct 14  2010 mico
-rw-rw-r--   1 icjaad   icdatacr   15881 Jul 25  2011 mio.txt
-rw-rw-r--   1 1381     icdatacr     220 Dec 20  2008 mntlog.sg1
-rwxrwxr-x   1 icgjcd   icdatacr     760 Mar 21  2007 mover-archivos
-rwxrwxr-x   1 icfacd   icdatacr     563 Mar 21  2007 mover-archivos-bdi
-rwxrwxr-x   1 icfacd   icdatacr     828 Mar 21  2007 mover-archivos.20030530
-rw-rw-r--   1 icjdld   icdatacr       0 Jun 29  2010 N
-rw-rw-r--   1 1381     icdatacr       0 Dec 18  2008 NIT11111111111
-rw-rw-r--   1 icfgcd   icdatacr    1722 Jul 22  2013 nits.txt
drwxrwxr-x   2 icgjcd   icdatacr     512 Sep 24  2009 no-uso
-rw-------   1 icjcld   icdatacr     354 May  5 05:54 nohup.out
-rwxrwxr-x   1 icjdld   icdatacr       0 Aug 13  2013 nomarch_FD
-rwxrwxr-x   1 icjdld   icdatacr       0 Aug 13  2013 nomarch_FE
-rwxrwxr-x   1 icjdld   icdatacr       0 Aug 13  2013 nomarch_FJ
-rwxrwxr-x   1 icjdld   icdatacr       0 Aug 13  2013 nomarch_FN
-rwxrwxr-x   1 icjdld   icdatacr     147 Feb  1  2011 nose.awk
-rwxrwxr-x   1 227      icdatacr     390 Mar 21  2007 nuevas
:-rwxrwxr-x   1 227      icdatacr     107 Mar 21  2007 nuevops
-rwxrwxr-x   1 227      icdatacr      91 Mar 21  2007 numcbl
-rwxrwxr-x   1 icgjcd   icdatacr      20 Mar 21  2007 obpru
-rw-rw-r--   1 icjamd   icdatacr      66 Oct  4  2013 ori
-rw-rw-r--   1 1395     icdatacr      70 Nov 17  2011 p
-rw-rw-r--   1 icfacd   icdatacr      14 Dec 11  2012 p8639.parm
-rwxrwxr-x   1 227      icdatacr    5800 Mar 21  2007 parametros
-rwxrwxr-x   1 icjdld   icdatacr     424 Nov 16  2011 parte-a-80.sh
-rw-rw-r--   1 iclagd   icdatacr 8773129 May 27 08:00 PESVNO.20140527.core
-rwxrwxr-x   1 icvhfd   icdatacr      66 Oct  4  2013 prb
-rw-rw-r--   1 icjamd   icdatacr    1386 Oct 12  2012 prb1
-rw-rw-r--   1 1381     icdatacr      43 Sep  9  2010 prba243.param
-rwxrwxr-x   1 227      icdatacr     665 Mar 21  2007 prn
-rwxrwx--x   1 icgjcd   icdatacr    3755 Jun 11  2013 pro-c-cobdb2
-rwxrwxr-x   1 icgjcd   icdatacr    1295 Jun 11  2013 pro-c-cobjava
-rwxrwxr-x   1 icgjcd   icdatacr    1614 Jun 11  2013 pro-c-ev
-rwxrwxr-x   1 icgjcd   icdatacr    1639 Jun 11  2013 pro-c-v
-rwxrwxr-x   1 227      icdatacr      39 Mar 21  2007 pru
-r-xrwxr-x   1 227      icdatacr    6244 May 23  2007 pru-acierta-M-II.sh
-r-xrwxr-x   1 227      icdatacr    5869 May 23  2007 pru-acierta-M.sh
-rwxrwxr-x   1 iccavd   icdatacr    1144 Aug  7  2010 pru-diezmil
-rwxrwxrwx   1 1368     icdatacr   18282 Aug 15  2007 pru-scovisa
-rw-rw-r--   1 1395     icdatacr       0 Sep  4  2013 pru01-1.dth.salida
-rw-rw-r--   1 1360     icdatacr       0 Sep 28  2007 prubcolMI
-rwxrwxrwx   1 icehad   icdatacr     348 Aug 16  2013 prueba
-rwxrwxr-x   1 icvhfd   icdatacr    7164 Mar 21  2007 prueba-001
-rwxrwxr-x   1 icvhfd   icdatacr      67 Jul 16  2007 prueba-tel
-rw-rw-r--   1 icjdld   icdatacr       0 Jul 29  2010 PRUEBA2
-rw-rw-r--   1 icehad   icdatacr     142 Jan 29  2010 pruebamkea
drwxrwxr-x   2 icvhfd   icdatacr     512 Aug 23  2010 pruebas
-rw-rw-r--   1 1395     icdatacr      14 Dec 11  2012 reco11.parm
-rwxrwxr-x   1 227      icdatacr    7267 Mar 21  2007 recomp
-rwxrwxr-x   1 227      icdatacr     878 Mar 21  2007 refval01
-rwxrwxr-x   1 1360     icdatacr     155 Feb  1  2011 registro1con2.awk
-rwxrwxr-x   1 227      icdatacr     878 Mar 21  2007 renidx
-rwxrwxr-x   1 227      icdatacr     270 Mar 21  2007 renomidx
-rw-rw-r--   1 icrgd    icdatacr  535577 May 21  2012 rgh.txt
-rw-rw-r--   1 icrgd    icdatacr  535577 May 19  2012 RGH.TXT
-rwxrwxr-x   1 icrmbd   icdatacr   16467 Mar 21  2007 rmb
-rw-rw-r--   1 icrmbd   icdatacr     332 May 23  2011 rmb111
-rwxrwxr-x   1 227      icdatacr     471 Mar 21  2007 run07f
-rwxrwxr-x   1 227      icdatacr     607 Mar 21  2007 run32f
-rwxrwxr-x   1 227      icdatacr     974 Mar 21  2007 run60f
-rwxrwxr-x   1 227      icdatacr      67 Mar 21  2007 runicg
-rw-rw-r--   1 icjdld   icdatacr       7 Aug 10  2012 RUTA
-rw-rw-r--   1 icjdld   icdatacr       0 Jun 29  2010 S
-rw-rw-r--   1 icjcmd   icdatacr     209 Aug  1  2013 SAL-YANBAL
-rw-rw-r--   1 icjaad   icdatacr       0 Aug 23  2011 SALIDA
-rwxrwxr-x   1 227      icdatacr    1127 Mar 21  2007 sc-arregla-maes
:-rwxrwxr-x   1 227      icdatacr     197 Mar 21  2007 sc-firma
-rwxrwxr-x   1 227      icdatacr      60 Mar 21  2007 sc-ftp-av
-rwxrwxr-x   1 227      icdatacr    6391 Mar 21  2007 SCODPP
-rwxrwxr-x   1 icvhfd   icdatacr   13226 Mar 21  2007 SCODVAL
-rwxrwxr-x   1 icvhfd   icdatacr   13226 Mar 21  2007 SCODVAL.sh
-rw-rw-r--   1 1366     icdatacr     126 Aug 29  2008 scohist1.par
-rw-rw-r--   1 1360     icdatacr       0 Nov  6  2007 scoremes.rec
-rw-rw-r--   1 icjdld   icdatacr       0 Nov 27  2012 SCOREXTR.DAT-WRK
-rwxrwxr-x   1 icgjcd   icdatacr    3181 Dec 28  2007 scot16.prn
-rw-rw-r--   1 icgjcd   icdatacr   52670 May 29  2007 scot16com
-rwxrwxr-x   1 icgjcd   icdatacr    1703 May 29  2007 scot16esp.prn
-rwxrwxr-x   1 icgjcd   icdatacr    1651 May  9  2007 scot16espgj.prn
-rwxrwxr-x   1 icgjcd   icdatacr     831 May  9  2007 scot16gj.prn
-rw-rw-r--   1 1360     icdatacr      26 Apr  7  2009 SCOTPARCOB
-rw-rw-r--   1 1360     icdatacr      86 Mar  8  2008 SCOVSCO.amn.act
-rwxrwxr-x   1 icvhfd   icdatacr       0 Mar 21  2007 SCOVTAR.INI.04051
-rwxrwxr-x   1 1381     icdatacr     139 Feb 10  2010 scr-AVV-2
-rwxrwx---   1 1381     icdatacr     188 Feb  9  2011 scr-dth
-rw-rw-r--   1 1381     icdatacr     191 Feb 16  2011 scr-monmov
-rw-rw-r--   1 1381     icdatacr     187 Feb 16  2011 scr-monmovlag
-rwxrwxrwx   1 1396     icdatacr      99 May 26  2009 scr-predicta
-rwxrwxr-x   1 icjdld   icdatacr    1625 Mar 21  2007 sel-cons-susc-prod.awk
-rwxrwxr-x   1 icjdld   icdatacr   11400 Mar 21  2007 sel-cons-susc-prod.sh
-rwxrwxr-x   1 icjdld   icdatacr    1331 Mar 21  2007 sel-consul-suscriptor.awk
-rwxrwxrwx   1 1368     icdatacr    2461 Mar 21  2007 sh-
-rwxrwxr-x   1 227      icdatacr    4510 Mar 21  2007 sh-07ppru
-rwxrwxr-x   1 icgjcd   icdatacr     557 Mar 21  2007 sh-200312
-rw-rw-r--   1 icjdld   icdatacr     558 Nov 10  2008 sh-200809
-rwxrwxr-x   1 227      icdatacr    1347 Mar 21  2007 sh-31s
-rwxrwxrwx   1 1368     icdatacr    2591 Mar 21  2007 sh-31s.old
-rwxrwxr-x   1 icvhfd   icdatacr     984 Feb 26 18:56 sh-450
-rwxrwxr-x   1 icfacd   icdatacr     475 Mar 21  2007 sh-450-bdi
-rwxrwxr-x   1 icrmbd   icdatacr     561 Mar 21  2007 sh-450-d
-rwxrwxr-x   1 1360     icdatacr     843 Mar 16  2009 sh-450-lag
-rwxrwxr-x   1 icjdld   icdatacr     888 Mar  9  2008 sh-450-ley
-rwxrwxr-x   1 icvhfd   icdatacr    1168 Jan 26  2011 sh-450-PRE
-rwxrwxr-x   1 icfacd   icdatacr     662 Mar 21  2007 sh-450.20030530
-rwxrwxr-x   1 1366     icdatacr     853 Oct 10  2007 sh-450J
-rwxrwxr-x   1 icgjcd   icdatacr     653 Mar 21  2007 sh-450truco
-rwxrwxr-x   1 icjaad   icdatacr    3688 Aug  8  2011 sh-583
-rwxrwxrwx   1 1215     icdatacr     277 Sep  2  2009 sh-aam
-rwxrwxrwx   1 1368     icdatacr    4387 Nov 30  2011 sh-acierta
-rwxrwxrwx   1 1368     icdatacr    3527 Mar 21  2007 sh-acierta-2000
-rwxrwxrwx   1 1368     icdatacr    3527 Mar 21  2007 sh-acierta-2001
-rwxrwxrwx   1 1368     icdatacr    3527 Mar 21  2007 sh-acierta-2002
-rwxrwxrwx   1 1368     icdatacr    3527 Mar 21  2007 sh-acierta-2003
-rwxrwxrwx   1 1368     icdatacr    3520 Mar 21  2007 sh-acierta-2004
-rwxrwxr-x   1 icjdld   icdatacr    3324 Oct 16  2008 sh-acierta-aciertaM
-rwxrwxrwx   1 1368     icdatacr    4010 Mar 21  2007 sh-acierta-acii
:-rwxrwxrwx   1 1368     icdatacr    3448 Mar 21  2007 sh-acierta-acii-hist
-rwxrwxrwx   1 1368     icdatacr    2972 Mar 21  2007 sh-acierta-bdant
-rwxrwxrwx   1 1368     icdatacr   10861 Mar 21  2007 sh-acierta-bdant1
-rwxrwxr-x   1 1381     icdatacr    5910 Mar 29  2011 sh-acierta-c-batch
-rwxrwxr-x   1 1381     icdatacr    3524 Nov  7  2008 sh-acierta-c-batch-V01
-rwxrwxrwx   1 1368     icdatacr    1570 Mar 21  2007 sh-acierta-citibank-wap
-rwxrwxrwx   1 1368     icdatacr    3077 Nov  6  2007 sh-acierta-his
-rwxrwxrwx   1 1366     icdatacr    4364 Nov  6  2007 sh-acierta-M
-rwxrwxrwx   1 1368     icdatacr    4266 Mar 21  2007 sh-acierta-nits
-rwxrwxrwx   1 1368     icdatacr    4048 Mar 21  2007 sh-acierta-plastico
-rwxrwxrwx   1 1368     icdatacr    3009 Mar 21  2007 sh-acierta-prueba
-rwxrwx--x   1 icvhfd   icdatacr    9741 Nov 30  2010 sh-act-bd-reconocer
-rwxrwxr-x   1 227      icdatacr      40 Mar 21  2007 sh-act-bdu
-rwxrwxr-x   1 227      icdatacr    2376 Dec 18  2009 sh-actarev
-rwxrwxr-x   1 227      icdatacr    2006 Mar 21  2007 sh-actarev-ayer
-rwxrwxr-x   1 iccavd   icdatacr    4713 Jan 20  2010 sh-actarev-nhc
-rwxrwxr-x   1 iccavd   icdatacr    3032 Dec 18  2009 sh-actarev-nhc-20091218
-rwxrwxr-x   1 iccavd   icdatacr    1927 Dec 18  2009 sh-actarevcr
-rwxrwxr-x   1 1360     icdatacr    1927 Dec 18  2009 sh-actarevct
-rwxrwxr-x   1 icfacd   icdatacr    2064 Mar 21  2007 sh-actarevzzz
-rwxrwxr-x   1 icfacd   icdatacr    6953 Jan  4  2012 sh-actaval
-rwxrwxr-x   1 icfacd   icdatacr    6603 Mar 21  2007 sh-actaval-borr
-rwxrwxr-x   1 icgjcd   icdatacr    6712 Jan  3  2012 sh-actaval-gj
-rwxrwxr-x   1 iccavd   icdatacr    1319 Feb 26  2010 sh-actbdaprvtr
-rwxrwxr-x   1 iccavd   icdatacr    3870 Aug 27  2009 sh-actcln
-rwxrwxr-x   1 iccavd   icdatacr    7449 Aug 23  2009 sh-actcln-ant
-rwxrwxr-x   1 icimsd   icdatacr   10764 Feb  5 11:30 sh-activaciones
-rwxrwxr-x   1 iclagd   icdatacr    7459 Oct 29  2013 sh-activaciones-20131029
-rwxrwxr-x   1 icimsd   icdatacr   10200 Dec 20 15:44 sh-activaciones-20131220
-rwxrwxr-x   1 iclagd   icdatacr   10282 Feb  4 15:20 sh-activaciones-prb
-rwxrwxr-x   1 1381     icdatacr    9524 Oct  8  2010 sh-activaciones-v0
-rwxrwxr-x   1 icimsd   icdatacr    7459 Jan  2 11:16 sh-activaciones-V01
-rwxrwxr-x   1 icimsd   icdatacr   10279 Jan  2 11:16 sh-activaciones-V02
-rwxrwxr-x   1 1395     icdatacr   10764 Feb  5 17:27 sh-activaciones-V03
-rwxrwxr-x   1 1360     icdatacr    2492 Dec 18  2009 sh-actley
-rwxrwxr-x   1 iccavd   icdatacr    3455 Nov  6  2009 sh-actmedrp
-rwxrwxr-x   1 227      icdatacr     775 Mar 21  2007 sh-actmfre
-rwxrwxr-x   1 iccavd   icdatacr    3964 Feb 22  2010 sh-actmfre-lote
-rwxrwxr-x   1 iccavd   icdatacr    3870 Apr  1  2009 sh-actmfre-lote-48log
-rwxrwxr-x   1 icfacd   icdatacr    3603 Feb  4  2009 sh-actmfre-lote-prod
-rwxrwxr--   1 icfacd   icdatacr    3916 Jan  7  2010 sh-actmfre-tx
-rwxrwxrwx   1 1368     icdatacr     747 Mar 21  2007 sh-actmfre.old
-rwxrwxrwx   1 1396     icdatacr    3381 Oct  3  2010 sh-actu-ICBCLA
-rwxrwxrwx   1 1396     icdatacr    3381 Oct  3  2010 sh-actu-ICBSUS
-rwxrwxr-x   1 227      icdatacr   13839 Mar 21  2007 sh-actualiza
-rwxrwxrwx   1 1396     icdatacr    1309 Apr 29  2010 sh-actualiza-BBVA
-rwxrwxr-x   1 icimsd   icdatacr    3682 Dec 11  2012 sh-Actualiza-FNA
-rwxrwxr-x   1 227      icdatacr    9022 Mar 21  2007 sh-actualiza-par
-rwxrwxrwx   1 1368     icdatacr    6585 Mar 21  2007 sh-actualiza.19990325
:-rwxrwxrwx   1 1368     icdatacr    8650 Mar 21  2007 sh-actualiza.19990329
-rwxrwxrwx   1 1368     icdatacr   11043 Mar 21  2007 sh-actualiza.19990331
-rwxrwxr-x   1 227      icdatacr    8650 Mar 21  2007 sh-actualiza.guille
-rwxrwxr--   1 icvhfd   icdatacr    5366 Jul  9  2013 sh-actualizaBDSCORES
-rwxrwxr--   1 icvhfd   icdatacr    5366 Jul 21  2010 sh-actualizaBDSCORES.bk
-rwxrwxr-x   1 iccavd   icdatacr    2641 Mar 16  2011 sh-actualizacion
-rwxrwxrwx   1 1368     icdatacr    1269 Mar 21  2007 sh-actualizacion-ant
-rwxrwxr-x   1 227      icdatacr    1999 Mar 21  2007 sh-actualizacion-V0001
-rwxrwxr-x   1 iccavd   icdatacr     808 Mar 16  2011 sh-actualizar
-rwxrwxr-x   1 227      icdatacr     809 Mar 21  2007 sh-actualizar-ANT
-rwxrwxr-x   1 227      icdatacr    2396 Mar 21  2007 sh-actualizar-ftp
-rw-rw-r--   1 iccavd   icdatacr    1159 Mar 16  2011 sh-actualizar-V0010
-rwxrwxrwx   1 1396     icdatacr    1307 May 15  2010 sh-actupagos-BBVA
-rwxrwxrwx   1 1368     icdatacr    5071 Mar 21  2007 sh-actvalcert
-rwxrwxr-x   1 iccavd   icdatacr    5982 Apr  7  2010 sh-actvlcr
-rwxrwxr-x   1 iccavd   icdatacr    5988 Apr 17  2013 sh-actvlcr-cv
-rwxrwxr-x   1 iccavd   icdatacr    5383 Aug 26  2009 sh-actvlcr-V1
-rwxrwxr-x   1 icrmbd   icdatacr    6602 Oct  6  2011 sh-actvlcrrmb
-rwxrwxr-x   1 icjdld   icdatacr    5820 Apr 19  2010 sh-actvlct
-rwxrwxr-x   1 iccavd   icdatacr    5180 Dec 29  2009 sh-actvlct-V01
-rwxrwxr-x   1 icjdld   icdatacr    5820 Apr 19  2010 sh-actvlct-V02
-rwxrwxr-x   1 icjdld   icdatacr    5918 Apr 14  2010 sh-actvlct-V02-OK1
-rwxrwxr-x   1 icjdld   icdatacr    5918 Apr  9  2010 sh-actvlct-V02-OK2
-rwxrwxr-x   1 icrmbd   icdatacr    6407 Nov 28  2011 sh-actvlctrmb
-rwxrwxr-x   1 iclagd   icdatacr    1802 Mar  6 11:33 sh-administra-indexado
-rwxrwxr-x   1 icvhfd   icdatacr   42438 Jan 14 15:47 sh-Administracion
-rwxrwxr-x   1 1395     icdatacr    4093 May  3  2012 sh-agrario-cobranza
-rwxrwxr-x   1 1395     icdatacr    3476 Apr 10  2012 sh-agrario-cobranzaPV
-rwxrwxrwx   1 1368     icdatacr    4226 Aug 18  2011 sh-agrario-especial
-rwxrwxrwx   1 1368     icdatacr    7890 Aug 18  2011 sh-agrario-mercadeo
-rwxrwxr-x   1 1395     icdatacr    6666 Feb 14  2012 sh-agrario-monitor
-rwxrwxrwx   1 1368     icdatacr   10017 Aug 18  2011 sh-agrario-new
-rwxrwxrwx   1 1368     icdatacr    8291 Aug 18  2011 sh-agrario-OK
-rwxrwxr-x   1 1395     icdatacr    9889 Feb 14  2012 sh-agrario-param
-rwxrwxr-x   1 1381     icdatacr    7713 Nov  9  2009 sh-agrario-param-20090813
-rwxrwxr-x   1 1381     icdatacr    8557 Dec 30  2010 sh-agrario-param-20091117
-rwxrwxr-x   1 1395     icdatacr   12371 Oct  3  2012 sh-agrario-proc
-rwxrwxr-x   1 iccigd   icdatacr    6117 Mar 15  2011 sh-agrario-proc-20110315
-rwxrwxr-x   1 1381     icdatacr    5108 Aug 13  2009 sh-agrario-proc-nvo
-rwxrwxr-x   1 icjamd   icdatacr   12371 Oct  3  2012 sh-agrario-proc.20121012
-rwxrwxr-x   1 1395     icdatacr    8241 Apr 20  2012 sh-agrario-select
-rwxrwxr-x   1 iccigd   icdatacr    6584 Mar 18  2011 sh-agrario-selectV01
-rwxrwxr-x   1 iccigd   icdatacr    6592 Mar 18  2011 sh-agrario-selectV02
-rwxrwxrwx   1 1368     icdatacr    8901 Aug 18  2011 sh-agrario-tdc
-rwxrwxrwx   1 1381     icdatacr    3437 Nov  9  2009 sh-agrario-vepar
-rwxrwxr-x   1 iccavd   icdatacr     658 Sep  8  2010 sh-ahocifin
-rwxrwxr-x   1 icgjcd   icdatacr     583 Aug 29  2008 sh-ahocifin-orig
-rwxrwxrwx   1 1215     icdatacr   10598 Nov 19  2008 sh-alberto
-rwxrwxr-x   1 1395     icdatacr   10543 Feb  7  2012 sh-alertas-avvillas
:/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls -l | lesscd macros   ls -l | grep ^dls -l          ls -l | grep bella
-rwxrwxr-x   1 1381     icdatacr   10925 Apr 12  2010 sh-cobranza-falabella
-rwxrwxr-x   1 1368     icdatacr    2665 Dec 19  2008 sh-endeuda-falabella
-rwxrwxr-x   1 icjdld   icdatacr    3106 Mar 18  2009 sh-log-falabella
-rwxrwxrwx   1 1368     icdatacr    3729 Mar 21  2007 sh-monitor-falabella
-rwxrwxr-x   1 iclagd   icdatacr   14113 Nov 14  2012 sh-PE-Falabella-semestral
/d/iccol/desarrollo/macros>vi sh-PE-Ripley
"sh-PE-Ripley" 434 lines, 14113 characters #sh-PE-Falabella-semestral.V.1.0001.
#**********************************************************
#SHELL-ID:     sh-PE-Falabella-semestral
#DATE-WRITTEN: 2012/11/08*
#LAST UPDATE:  2012/11/08
#AUTHOR:DIRECCION PROCESOS ESPECIALES*
#**********************************************************
#**********************************************************

#***********************************************************************
#mostrar_parametros.*
#   Lee y muetra los parametros de ventacruzada para un suscriptor     *
#***********************************************************************
mostrar_parametros() {
  perams=`cat $cadena01.parm`
  base=`echo $perams  | cut -d ";" -f1`
  entfmt=`echo $perams  | cut -d ";" -f2`
  fecha=`echo $perams  | cut -d ";" -f3`
  echo "+-----------------------------------------------------------+"
  echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***|"
  echo "|Base (I=interna, E=externa)     :  " $base
  echo "|Formato(1=1-11,2=1-11-45):  " $entfmt
  echo "|Fecha de Proceso:  " $fecha
  echo "+-----------------------------------------------------------+"
  echo "Si desea modificar algun parametro digite S ---> \c"
  read modpard
  if test -z "$modpard"
   then
modpar="N"
  else
if [ $modpard == "s" ] || [ $modpard == "S" ]; then
modpar="S"
    else
modpar="N"
    fi
  fi
if [ $modpar == "S" ] || [ $modpar == "s" ]; thenmodificar_parametros
  fi
}

#***********************************************************************
#pedir_parametros*
#   Pide parametros y arma el archivo PEfalsemestral
#***********************************************************************
pedir_parametros() {
  regp=""
  echo "+--------------------------------------------------+"
  echo "| La base de entrada puede ser:|""sh-PE-Ripley" 434 lines, 14113 characters
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
434 lines deletedNo lines in bufferAPPEND MODE# /d/iccol/desarrollo/macros/sh-PE-Ripley

#sh-PE-Ripley.V.1.0001


#*******************************************************************************



#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
        raya="----------------------------------------------------------------------"
     ASCIIBanner="
         ######  #######    ######                               
         #     # #          #     # # #####  #      ###### #   # 
         #     # #          #     # # #    # #      #       # #  
         ######  #####      ######  # #    # #      #####    #   
         #       #          #   #   # #####  #      #        # 
  
         #       #          #    #  # #      #      #  
      #   
         #       #######    #     # # #      ##
#### ######   #   
 "
 
 # Valores iniciales de los parámetros
 #   "I": la lista de IDs es interna  "
C": provista x cliente 
     BASE="C"
 #       si BASE="C": archivo y est
ructura ("0": 1-11 o "1": 1-11-45)
         NOM_ARCHIVO=" "
         TIPO_ARCHIVO="1"
 #       si BASE="I
": "N": extracción x NIT  "C": por cod suscriptor
         TIPO_EXTRA
CT="N"
 #         
  si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
           
  ID_EXTRACT=" "
 
   #   Tipo de proceso "A": actual  "H": histórico
 
       TIPO_PROC="A"    TIPO_PROC="A"
 
       #       Si TIPO_PROC="H": la fecha de proceso    #       Si TIPO_PROC="H": la fecha de proceso
 
               FECHA_PROC=" "FECHA_PROC=" "
 
APPEND MODE
APPEND MODEreadBASE() {readBASE() {
APPEND MODE#*******************************************************************************#**
APPEND MODE# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
APPEND MODE#*******************************************************************************#**
APPEND MODE    loopEnd="0"loopEnd="0"
APPEND MODE    while [ loopEnd=="0" ]while [ loopEnd=="0" ]
APPEND MODE    dodo
APPEND MODE        echo " "echo " "
APPEND MODE#             ..........................................................
............#  ..
APPEND MODE        echo "                       ORIGEN DE LA BASE"echo "  ORIGEN DE LA BASE"
APPEND MODE        echo $rayaecho $raya
APPEND MODE        echo "      I) interna"echo "      I) interna"
APPEND MODE        echo "      C) Provista por el Cliente"echo "      C) Provista por el Cliente"
APPEND MODE        echo "      enter para cancelar"
echo "      enter para cancelar"

APPEND MODE        echo " "echo " "
APPEND MODE        echo "          
       BASE:\c" echo "  BASE:\c" 
APPEND MODE        read BAS
Enewread BASEn
ew
APPEND MODE          
if [ $BASEnew == "c" ]if
 [ $BASEnew == "c" ]
APPEND MODE        then    then
APPEND MODE            BASEnew="C"BASEnew="C"
APPEND MODE        fifi
APPEND MODE        if [ $BASEnew == "i" ]if [ $BASEnew == "i" ]
APPEND MODE        thenthen
APPEND MODE            BASEnew="I"BASEnew="I"
APPEND MODE        fifi
APPEND MODE        if [ $BASEnew=="C" || $BASEnew=="I
" ]if [ $BASEnew=="C" || $BASEnew=="I" ]

APPEND MODE        thenthen
APPEND MODE            BASE=$BASEnewBASE=$BASEnew
APPEND MODE            lo
opEnd="1"loopEn
d="1"
APPEND MODE       
      else  else
APPEND MODE            if [ $BASEnew == "" ]if [ $BASEnew == "" ]
APPEND MODE
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
67 fewer lines:ser noair: No such option - 'set all' gives all option valuesAPPEND MODE# /d/iccol/desarrollo/macros/sh-PE-Ripley

#sh-PE-Ripley.V.1.0001


#*******************************************************************************



#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
        raya="----------------------------------------------------------------------"
     ASCIIBanner="
         ######  #######    ######                               
         #     # #          #     # # #####  #      ###### #   # 
         #     # #          #     # # #    # #      #       # #  
         ######  #####      ######  # #    # #      #####    #   
         #       #          #   #   # #####  #      #        # 
  
         #       #          #    #  # #      #      #  
      #   
         #       #######    #     # # #      ##
#### ######   #   
 "
 
 # Valores iniciales de los parámetros
 #   "I": la lista de IDs es interna  "
C": provista x cliente 
     BASE="C"
 #       si BASE="C": archivo y est
ructura ("0": 1-11 o "1": 1-11-45)
         NOM_ARCHIVO=" "
         TIPO_ARCHIVO="1"
 #       si BASE="I
": "N": extracción x NIT  "C": por cod suscriptor
         TIPO_EXTRA
CT="N"
 #         
  si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
           
  ID_EXTRACT=" "
 
   #   Tipo de proceso "A": actual  "H": histórico
 
       TIPO_PROC="A"    TIPO_PROC="A"
 
       #       Si TIPO_PROC="H": la fecha de proceso    #       Si TIPO_PROC="H": la fecha de proceso
 
               FECHA_PROC=" "FECHA_PROC=" "
 
APPEND MODE
APPEND MODEreadBASE() {readBASE() {
APPEND MODE#*******************************************************************************#**
APPEND MODE# Lee el valor de BASE hasta que es OK {I|C}# Lee el valor de BASE hasta que es OK {I|C}
 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
38 fewer lines:set allautoindentnomodelinesshowmodeautoprintnonumbernoslowopennoautowritenonovicetabstop=4nobeautifynooptimizetaglength=0directory=/var/tmpparagraphs=IPLPPPQPP LIpplpipnppplpipbptags=tags /usr/lib/tagsnoedcompatibleprompttagstacknoerrorbellsnoreadonlyterm=vt220noexrcredrawnoterseflashremaptimeouthardtabs=8report=5ttytype=vt220ignorecasescroll=24warnnolispsections=NHSHH HUuhsh+cwindow=49nolistshell=/bin/kshnowrapscanmagicshiftwidth=4wrapmargin=0mesgshowmatchnowriteany[Hit return to continue] 
:set noai[Hit return to continue] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~:set allnoautoindentnomodelinesshowmodeautoprintnonumbernoslowopennoautowritenonovicetabstop=4nobeautifynooptimizetaglength=0directory=/var/tmpparagraphs=IPLPPPQPP LIpplpipnppplpipbptags=tags /usr/lib/tagsnoedcompatibleprompttagstacknoerrorbellsnoreadonlyterm=vt220noexrcredrawnoterseflashremaptimeouthardtabs=8report=5ttytype=vt220ignorecasescroll=24warnnolispsections=NHSHH HUuhsh+cwindow=49nolistshell=/bin/kshnowrapscanmagicshiftwidth=4wrapmargin=0mesgshowmatchnowriteany[Hit return to continue] 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~APPEND MODE# /d/iccol/desarrollo/macros/sh-PE-Ripley

#sh-PE-Ripley.V.1.0001


#*******************************************************************************



#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente 
    BASE="C"
#       si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="1"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha de proceso
        FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd=="0" ]
    do
        echo " "
#             ......................................................................
        echo "                       ORIGEN DE LA BASE"
        echo $raya
        echo "      I) interna"

        echo "      C) Provista por el Cliente"

APPEND MODE        echo "      enter para cancelar"

APPEND MODE        echo " "

APPEND MODE        echo "                 BASE:\c" 

APPEND MODE        read BASEnew

APPEND MODE        if [ $BASEnew == "c" ]

APPEND MODE        then

APPEND MODE            BASEnew="C"

APPEND MODE        fi

APPEND MODE        if [ $BASEnew == "i" ]

APPEND MODE        then

APPEND MODE            BASEnew="I"

APPEND MODE        fi

APPEND MODE        if [ $BASEnew=="C" || $BASEnew=="I" ]

APPEND MODE        then

APPEND MODE            BASE=$BASEnew

APPEND MODE            loopEnd="1"

APPEND MODE        else

APPEND MODE            if [ $BASEnew == "" ]

APPEND MODE            then

APPEND MODE                loopEnd="1"

APPEND MODE                exit

APPEND MODE            fi

APPEND MODE        fi

APPEND MODE    done

APPEND MODE}

APPEND MODE

APPEND MODE    paramsGet() {

APPEND MODE#*******************************************************************************

APPEND MODE# Lee los parámetros de la corrida anterior

APPEND MODE#*******************************************************************************

APPEND MODE#   asegura que exista el arch de parámetros general

APPEND MODE    [ ! -f $0.parm ] && touch $0.parm

APPEND MODE#   lee los parámetros

APPEND MODE    params=`cat $0.parm`

APPEND MODE    echo '>>>> params: ' "$params"

APPEND MODE#   separa los parámetros según su posición

APPEND MODE    BASE=`echo "$params" | cut -d ";" -f1`

APPEND MODE    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`

APPEND MODE    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`

APPEND MODE    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`

APPEND MODE    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`

APPEND MODE    TIPO_PROC=`echo "$params" | cut -d ";" -f6`

APPEND MODE    FECHA_PROC=`echo "$params" | cut -d ";" -f7`

APPEND MODE}

APPEND MODE

APPEND MODE    paramsPut() {

APPEND MODE#*******************************************************************************

APPEND MODE# Guarda los parámetros de la corrida en el archivo .parm

APPEND MODE#*******************************************************************************

APPEND MODE    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$FECHA_PROC >| 
$0.parm

APPEND MODE}

APPEND MODE

APPEND MODE    paramsPrint() {

APPEND MODE#*******************************************************************************

APPEND MODE# Muestra todos los parámetros, para pruebas

APPEND MODE#*******************************************************************************

APPEND MODE    echo "BASE="$BASE"<"

APPEND MODE    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"

APPEND MODE    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"

APPEND MODE    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"

APPEND MODE    echo "ID_EXTRACT="$ID_EXTRACT"<"

APPEND MODE    echo "TIPO_PROC="$TIPO_PROC"<"

APPEND MODE    echo "FECHA_PROC="$FECHA_PROC"<"

APPEND MODE}

APPEND MODE

APPEND MODE

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE#                                    MAIN

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE    clear

APPEND MODE    echo $raya

APPEND MODE    echo "$ASCIIBanner"

APPEND MODE#   banner "PE Ripley"

APPEND MODE    echo $raya

APPEND MODE

APPEND MODE    readBASE

APPEND MODE    paramsGet

APPEND MODE    paramsPrint

APPEND MODE    paramsPut

APPEND MODE    # DEBUG: termina acá

APPEND MODE    exit

APPEND MODE

APPEND MODE

APPEND MODE

APPEND MODEmostrar_parametros() {

APPEND MODE    #*******************************************************************************

APPEND MODE    #mostrar_parametros.

APPEND MODE    #   Lee y muestra los parametros de ventacruzada para un suscriptor

APPEND MODE    #*******************************************************************************

APPEND MODE    perams=`cat $cadena01.parm`

APPEND MODE    base=`echo $perams  | cut -d ";" -f1`

APPEND MODE    entfmt=`echo $perams  | cut -d ";" -f2`

APPEND MODE    fecha=`echo $perams  | cut -d ";" -f3`

APPEND MODE    echo "+-----------------------------------------------------------+"

APPEND MODE    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***         |"

APPEND MODE    echo '|       Base (I=interna, E=externa)     :  ' $base

APPEND MODE    echo '|       Formato(1=1-11,2=1-11-45)       :  ' $entfmt

APPEND MODE    echo "|       Fecha de Proceso                :  " $fecha

APPEND MODE    echo "+-----------------------------------------------------------+"

APPEND MODE    echo "Si desea modificar algun parametro digite S ---> \c"

APPEND MODE    read modpard

APPEND MODE    if test -z "$modpard"

APPEND MODE    then

APPEND MODE        modpar="N"

APPEND MODE    else

APPEND MODE        if [ $modpard == "s" ] || [ $modpard == "S" ]; then

APPEND MODE            modpar="S"

APPEND MODE        else

APPEND MODE            modpar="N"

APPEND MODE        fi

APPEND MODE    fi

APPEND MODE    if [ $modpar == "S" ] || [ $modpar == "s" ]; then

APPEND MODE        modificar_parametros

APPEND MODE    fi

APPEND MODE}

APPEND MODE

APPEND MODE#***********************************************************************

APPEND MODE#pedir_parametros

APPEND MODE#   Pide parametros y arma el archivo PEfalsemestral

APPEND MODE#***********************************************************************

APPEND MODEpedir_parametros() {

APPEND MODE    regp=""

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    echo "| La base de entrada puede ser:                    |"

APPEND MODE    echo '|         Interna Datacredito (I)                  |'

APPEND MODE    echo '|         o Externa           (E)                  |'

APPEND MODE    echo 'Digite tipo de base (I o E)   ---> \c'

APPEND MODE    read base

APPEND MODE    if test -z "$base"

APPEND MODE    then

APPEND MODE        base="I"

APPEND MODE    else

APPEND MODE        if [ $base = "E" ] || [ $base = "e" ]; then

APPEND MODE            base="E"

APPEND MODE        else

APPEND MODE            base="I"

APPEND MODE        fi

APPEND MODE    fi

APPEND MODE    reg=$regp$base";"

APPEND MODE    regp=$reg

APPEND MODE    #

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    if [ $base = "E" ]; then

APPEND MODE        echo "+--------------------------------------------------+"

APPEND MODE        echo "|El archivo de entrada puede tener formato:        |"

APPEND MODE        echo '|   1 - 11          (Digitar : 1)                  |'

APPEND MODE        echo '|   1 - 11 - 45     (Digitar : 2)                  |'

APPEND MODE        echo "Digite formato del archivo  ---> \c"

APPEND MODE        read entfmt

APPEND MODE        if test -z "$entfmt"

APPEND MODE        then

APPEND MODE            entfmt=1

APPEND MODE        else

APPEND MODE            if [ $entfmt -gt 2 ]; then

APPEND MODE                entfmt=2

APPEND MODE            else

APPEND MODE                if [ $entfmt -lt 1 ]; then

APPEND MODE                    entfmt=1

APPEND MODE                fi

APPEND MODE            fi

APPEND MODE        fi

APPEND MODE    else

APPEND MODE        entfmt=1

APPEND MODE    fi

APPEND MODE    reg=$regp$entfmt";"

APPEND MODE    regp=$reg

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    echo 'Si fecha de proceso no es la actual, digite fecha (AAAAMMDD) ---> \c'

APPEND MODE    read fechad

APPEND MODE    if test -z "$fechad"

APPEND MODE    then fecha=$fechah

APPEND MODE    else

APPEND MODE        if [ $fechah -gt $fechad ] || [ $fechah -eq $fechad ]; then

APPEND MODE            fecha=$fechad

APPEND MODE        else

APPEND MODE            echo "fecha digitada es invalida ... se asume fecha de hoy "

APPEND MODE            fecha=$fechah

APPEND MODE        fi

APPEND MODE    fi

APPEND MODE    reg=$regp$fecha";"

APPEND MODE    regp=$reg

APPEND MODE

APPEND MODE    fecha6=`echo $fecha  | cut -c1-6`

APPEND MODE    echo $reg >| $cadena01.parm

APPEND MODE    echo "Se grabo el registro de parametros"

APPEND MODE    echo $fecha

APPEND MODE    mostrar_parametros

APPEND MODE    #

APPEND MODE}

APPEND MODE

APPEND MODE#***********************************************************************

APPEND MODE#modificar_parametros

APPEND MODE#   Pide los parametros a modificar y graba el archivo ventacr$codsus  *

APPEND MODE#***********************************************************************

APPEND MODEmodificar_parametros() {

APPEND MODE    echo "Modificar parametros"

APPEND MODE    regp=""

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    echo "| La base de entrada puede ser:                    |"

APPEND MODE    echo '|         Interna Datacredito (I)                  |'

APPEND MODE    echo '|         o Externa           (E)                  |'

APPEND MODE    echo 'Digite tipo de base (I o E)   ---> \c'

APPEND MODE    read based

APPEND MODE    if test -z "$based"

APPEND MODE    then

APPEND MODE        reg=$regp$base";"

APPEND MODE        regp=$reg

APPEND MODE    else

APPEND MODE        if [ $based = "E" ] || [ $based = "e" ]; then

APPEND MODE            based="E"

APPEND MODE        else

APPEND MODE            based="I"

APPEND MODE        fi

APPEND MODE        reg=$regp$based";"

APPEND MODE        regp=$reg

APPEND MODE        base=$based

APPEND MODE    fi

APPEND MODE    #

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    if [ $base = "E" ]; then

APPEND MODE        echo "+--------------------------------------------------+"

APPEND MODE        echo "|El archivo de entrada puede tener formato:        |"

APPEND MODE        echo '|   1 - 11          (Digitar : 1)                  |'

APPEND MODE        echo '|   1 - 11 - 45     (Digitar : 2)                  |'

APPEND MODE        echo "Digite formato del archivo  ---> \c"

APPEND MODE        read entfmtd

APPEND MODE        if test -z "$entfmtd"

APPEND MODE        then

APPEND MODE            reg=$regp$entfmt";"

APPEND MODE            regp=$reg

APPEND MODE        else

APPEND MODE            if [ $entfmtd -gt 3 ]; then

APPEND MODE                entfmtd=3

APPEND MODE            else

APPEND MODE                if [ $entfmtd -lt 1 ]; then

APPEND MODE                    entfmtd=1

APPEND MODE                fi

APPEND MODE            fi

APPEND MODE            reg=$regp$entfmtd";"

APPEND MODE            regp=$reg

APPEND MODE            entfmt=$entfmtd

APPEND MODE        fi

APPEND MODE    else

APPEND MODE        entfmt=1

APPEND MODE        reg=$regp$entfmt";"

APPEND MODE        regp=$reg

APPEND MODE    fi

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    echo 'Si va a modificar fecha de proceso digite fecha (AAAAMMDD) ---> \c'

APPEND MODE    read fechad

APPEND MODE    if test -z "$fechad"

APPEND MODE    then

APPEND MODE        reg=$regp$fecha";"

APPEND MODE        regp=$reg

APPEND MODE    else

APPEND MODE        if [ $fechah -gt $fechad ]; then

APPEND MODE            fecha=$fechad

APPEND MODE        else

APPEND MODE            fecha=$fechah

APPEND MODE        fi

APPEND MODE        reg=$regp$fecha";"

APPEND MODE        regp=$reg

APPEND MODE    fi

APPEND MODE    fecha6=`echo $fecha  | cut -c1-6`

APPEND MODE

APPEND MODE    echo $reg >| $cadena01.parm

APPEND MODE    echo "Se modifico el registro de parametros"

APPEND MODE    mostrar_parametros

APPEND MODE    #

APPEND MODE}

APPEND MODE

APPEND MODE#***********************************************************************

APPEND MODE#ejecutar_extraccion

APPEND MODE# extrae registros por suscriptor del archivo ICMCRECOPY.DAT

APPEND MODE#***********************************************************************

APPEND MODEejecutar_extraccion() {

APPEND MODE    P_SERVER_DEV="172.24.6.154"

APPEND MODE    P_MAQUINA=`who am i | cut -c 39-50`

APPEND MODE    echo "MAQUINA: " $P_MAQUINA

APPEND MODE    if [ $P_MAQUINA == $P_SERVER_DEV ] ; then

APPEND MODE        echo "MAQUINA DE DESARROLLO" $P_MAQUINA

APPEND MODE        cd /despeciales

APPEND MODE    else

APPEND MODE        echo "MAQUINA DE PRODUCCION : " $P_MAQUINA

APPEND MODE        cd $ESPECIALES/ctlc

APPEND MODE    fi

APPEND MODE    grep "^A......[14].*"$NITSuscriptor".P$" ICMCRECOPY.DAT | cut -c8-19 | sort -u >| $cadena01           
         

APPEND MODE    numeroreg1=`wc -l < $cadena01`

APPEND MODE    mv $cadena01 $TEMPORALES/$cadena01

APPEND MODE    entfmt=1

APPEND MODE    cd $TEMPORALES

APPEND MODE    #

APPEND MODE}

APPEND MODE

APPEND MODE#PROGRAMA PRINCIPAL

APPEND MODE#Fecha de ejecución

APPEND MODEfechah=`date '+%Y%m%d'`

APPEND MODEfechah6=`echo $fechah  | cut -c1-6`

APPEND MODE#

APPEND MODE#*========================================================*

APPEND MODE#*                    PROCESO

APPEND MODE#*========================================================*

APPEND MODEecho "+--------------------------------------------------+"

APPEND MODEecho "| **      PROCESO FALABELLA SEMESTRAL       **     |"

APPEND MODEecho "+--------------------------------------------------+"

APPEND MODEecho

APPEND MODEecho "Digite nombre del archivo  ---> \c"

APPEND MODEread cadena01

APPEND MODEcadena00=$cadena01.prn

APPEND MODEcadena02=$cadena01.val

APPEND MODEcadena03=$cadena01.inc

APPEND MODEcadena04=$cadena01.txt

APPEND MODEcadena05=$cadena01.DATINF

APPEND MODEcadena06=$cadena01.ESTADI

APPEND MODEcadena07=$cadena01.QUANTO

APPEND MODEecho

APPEND MODE#cd $DATOS

APPEND MODE#if test -s $cadena01.parm

APPEND MODE# then

APPEND MODE#  mostrar_parametros

APPEND MODE#else

APPEND MODEpedir_parametros

APPEND MODE#fi

APPEND MODE#Fecha de Proceso

APPEND MODEecho "Fechas: " $fechah6 " - " $fecha6

APPEND MODEif [ $fechah6 -gt $fecha6 ]; then

APPEND MODE    #busca san_ata para la fecha historica

APPEND MODE    cd $DATOS

APPEND MODE    sanata=`grep $fecha6 ICSANATA.DAT | cut -c17-17`

APPEND MODE    echo "sanata para fecha " $fecha6 "  es " $sanata

APPEND MODE    if test -z "$sanata"

APPEND MODE    then

APPEND MODE        echo " !!!!   error buscando sanata para $fecha6 !!!  "

APPEND MODE        echo "Digite san_ata para fecha historica $fecha6  ---> \c"

APPEND MODE        read sanata

APPEND MODE    fi

APPEND MODEfi

APPEND MODEcadena12=$cadena01.icgs65

APPEND MODEcadena08=$cadena12.OK

APPEND MODEcadena09="LOG-ICGS65-"$fecha

APPEND MODEcadena10="LOG-ICGS65-PRB-"$fecha

APPEND MODEcadena13=$cadena01.par

APPEND MODEecho "Sigue el proceso .... "

APPEND MODEif [ $base = "I" ]; then

APPEND MODE    echo "Ejecutando extraccion   ...  "

APPEND MODE    ejecutar_extraccion

APPEND MODEfi

APPEND MODEcd $TEMPORALES

APPEND MODEif test -s $cadena01.log

APPEND MODEthen

APPEND MODE    rm $cadena01.log

APPEND MODEfi

APPEND MODEif [ $entfmt -eq 1 ]

APPEND MODEthen

APPEND MODE    if test -s $cadena00

APPEND MODE    then

APPEND MODE        rm $cadena00

APPEND MODE    fi

APPEND MODE    numero00=`wc -l < $cadena01`

APPEND MODE    echo "+-------------------------------------------------------------+"

APPEND MODE    echo "|           Registros a Procesar  --->  " $numero00

APPEND MODE    echo "+-------------------------------------------------------+"

APPEND MODE    nohup x CTL100 $cadena01 >| $cadena01.log

APPEND MODE    echo "+-------------------------------------------------------+"

APPEND MODE    echo

APPEND MODE    tail -10 $cadena01.log

APPEND MODE    entfmt=2

APPEND MODEfi

APPEND MODEecho

APPEND MODEif [ $entfmt -eq 2 ]; then

APPEND MODE    if test -s $cadena02

APPEND MODE    then

APPEND MODE        rm $cadena02

APPEND MODE    fi

APPEND MODE    if test -s $cadena03

APPEND MODE    then

APPEND MODE        rm $cadena03

APPEND MODE    fi

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    echo "|   Ejecucion Programa PESVNO => " $cadena00

APPEND MODE    echo "+--------------------------------------------------+"

APPEND MODE    #

APPEND MODE    nohup x PESVNO $cadena00 $cadena02 $cadena03 10 2 >| $cadena01.log

APPEND MODE    numero01=`wc -l < $cadena02`

APPEND MODE    numero02=`wc -l < $cadena03`

APPEND MODE    echo

APPEND MODE    head -10 $cadena01.log

APPEND MODE    echo

APPEND MODE    echo "+-------------------------------------------------------------+"

APPEND MODE    echo "|       ********** RESULTADOS DE VALIDACION *************     |"

APPEND MODE    echo '|                                                             |'

APPEND MODE    echo "|           Registros Validos    --->  " $numero01

APPEND MODE    echo "|           Registros Invalidos  --->  " $numero02

APPEND MODE    echo "+-------------------------------------------------------------+"

APPEND MODEfi

APPEND MODEif test -s $cadena02

APPEND MODEthen

APPEND MODE    echo

APPEND MODE    echo "Procesando archivo-----> "$cadena02

APPEND MODEelse

APPEND MODE    echo "!!!...Archivo $cadena02 no existe proceso termina ....!!!"

APPEND MODE    echo

APPEND MODE    exit

APPEND MODEfi

APPEND MODE#

APPEND MODE#CAMBIO DE SANATA SI SE REQUIERE

APPEND MODEif [ $fechah6 -gt $fecha6 ]; then

APPEND MODE    hist=/san_ata_$sanata/$fecha/extfh.cfg

APPEND MODE    dbhist=/san_ata_$sanata/$fecha/icdb

APPEND MODE    export EXTFH=$hist

APPEND MODE    export DATABASE=$dbhist

APPEND MODE    echo $EXTFH

APPEND MODE    echo $DATABASE

APPEND MODEfi

APPEND MODE#

APPEND MODEecho

APPEND MODEmv $cadena02  $cadena04

APPEND MODE#

APPEND MODE#*=======================================================*

APPEND MODE#*  EXECUTE PROGRAM: icestd81

APPEND MODE#*=======================================================*

APPEND MODE#

APPEND MODEecho "+----------------------------------------------+"

APPEND MODEecho '|  Programa icestd81  DATAINFORME              |'

APPEND MODEecho '|                                              |'

APPEND MODEecho '|  Procesando archivo --> '  $cadena04

APPEND MODEecho "+----------------------------------------------+"

APPEND MODEecho

APPEND MODEecho

APPEND MODEnohup x icestd81 $cadena04 $cadena03 >> $cadena01.log 2>> $cadena01.log

APPEND MODEtail -15 $cadena01.log

APPEND MODE#

APPEND MODE# ICGS65

APPEND MODEclave="12345678901"

APPEND MODEnawk -v codcla=$clave '{ printf("%s%s\n", codcla, $1) } ' $cadena04 >| $cadena12

APPEND MODEecho $cadena12 >| $cadena13

APPEND MODEnohup x ICGS65 BATCH $fecha < $cadena13

APPEND MODEx ic-inp-out-sco $cadena12

APPEND MODEcadena14=$cadena12.TODO

APPEND MODEnawk '{ printf("%s%s%s%s%s%s%s%s%s\n",substr($0,1,1),";",substr($0,2,11),";",substr($0,13,15),";",substr($
0,35,1)
,";",substr($0,36,50))
}
' $cadena12.TODO|sed -e "s/ 00000000/\;0000\;0000\;/g" >| $cadena12.ICGS65

APPEND MODE#*========================================================*

APPEND MODE#*       PARAMETROS CALCULO DE SCORE

APPEND MODE#*========================================================*

APPEND MODEformato="VAL"

APPEND MODEscoring=62

APPEND MODE#*========================================================*

APPEND MODEecho "+------------------------------------------------------+"

APPEND MODEecho '|  Ejecucion Programa      SCOTBATCH                   |'

APPEND MODEecho "+------------------------------------------------------+"

APPEND MODEecho '|  SCORE => QUANTO                                     |'

APPEND MODEecho "+------------------------------------------------------+"

APPEND MODEecho

APPEND MODEnohup x SCOTBATCH $fecha6 $scoring $formato $cadena04 >> $cadena01.log 2>>$cadena01.log

APPEND MODEtail -12 $cadena01.log

APPEND MODEecho

APPEND MODEarchivo=$cadena01.vec

APPEND MODEcut -c1-12 $cadena04 >| $archivo

APPEND MODEcodsus=999999

APPEND MODEopcion="A"

APPEND MODEvector=48

APPEND MODEecho "+-------------------------------------------------------+"

APPEND MODEecho '| Ejecucion Programa  icestdatVEC-NORMAL-TOT => '

APPEND MODEecho "+-------------------------------------------------------+"

APPEND MODEnohup x icestdatVEC-NORMAL-FAL $archivo $fecha6 $codsus $opcion $vector >> $cadena01.log

APPEND MODEecho

APPEND MODEtail -12 $cadena01.log

APPEND MODEcadena11=$archivo.$fecha6.VEC-TOT

APPEND MODEnumero11=`wc -l < $cadena11`

APPEND MODEecho

APPEND MODE#datainforme

APPEND MODEecho "+----------------------------------------------------------+"

APPEND MODEecho '|       ***  Archivos resultados Datainforme  ***          |'

APPEND MODEecho "+----------------------------------------------------------+"

APPEND MODEecho '|                                                          |'

APPEND MODEecho '| Archivo Informes     => ' $cadena05

APPEND MODEecho '|                                                          |'

APPEND MODEecho '| Archivo Estadisticas => ' $cadena06

APPEND MODEecho "+----------------------------------------------------------+"

APPEND MODE#ICGS65

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODEecho '|       ***  Archivos resultados ICGS65       ***          |'

APPEND MODEecho "+----------------------------------------------------------+"

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena08

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena09

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena10

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena12.TODO

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena12.ICGS65

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODE#QUANTO

APPEND MODEnumero07=`wc -l < $cadena07`

APPEND MODEnumero03=`wc -l < $cadena03`

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODEecho '|       ***  Archivos resultados QUANTO       ***          |'

APPEND MODEecho "+----------------------------------------------------------+"

APPEND MODEecho '| Archivo de salida del proceso:  ' $cadena07

APPEND MODEecho '| Archivo de inconsistencias   :  ' $cadena03

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODE#VEC-NORMAL

APPEND MODEecho

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODEecho '|     *********  RESULTADOS DEL PROCESO VECTOR *********      |'

APPEND MODEecho '|                                                             |'

APPEND MODEecho '|  Archivo De salida        : ' $cadena11    " Regs.:" $numero11

APPEND MODEecho "+-------------------------------------------------------------+"

APPEND MODEecho '        (ENTER) Continuar !!!  '

APPEND MODEread xxx

APPEND MODEexit

APPEND MODE

APPEND MODE

/execute programAddress search hit BOTTOM without matching pattern
/set ic?Address search hit BOTTOM without matching pattern
:set ic?ignorecase 
/Address search hit BOTTOM without matching pattern
/nohupAddress search hit BOTTOM without matching pattern
/Address search hit BOTTOM without matching pattern# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd=="0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"/cadena09="LOG-ICGS65-"$fecha
cadena10="LOG-ICGS65-PRB-"$fecha
cadena13=$cadena01.par
echo "Sigue el proceso .... "
if [ $base = "I" ]; then
    echo "Ejecutando extraccion   ...  "
    ejecutar_extraccion
fi
cd $TEMPORALES
if test -s $cadena01.log
then
rm $cadena01.log
fi
if [ $entfmt -eq 1 ]
then
if test -s $cadena00
    then
rm $cadena00
    fi
numero00=`wc -l < $cadena01`
    echo "+-------------------------------------------------------------+"
    echo "|Registros a Procesar  --->  " $numero00
    echo "+-------------------------------------------------------+"
    nohup x CTL100 $cadena01 >| $cadena01.log
    echo "+-------------------------------------------------------+"
    echo
tail -10 $cadena01.log
    entfmt=2
fi
echo
if [ $entfmt -eq 2 ]; then
    if test -s $cadena02
    then
rm $cadena02
    fi
if test -s $cadena03
    then
rm $cadena03
    fi
echo "+--------------------------------------------------+"
    echo "|   Ejecucion Programa PESVNO => " $cadena00
    echo "+--------------------------------------------------+"
    #
nohup x PESVNO $cadena00 $cadena02 $cadena03 10 2 >| $cadena01.log
    numero01=`wc -l < $cadena02`
    numero02=`wc -l < $cadena03`
    echo
head -10 $cadena01.log
    echo//if [ $fechah6 -gt $fecha6 ]; thenhist=/san_ata_$sanata/$fecha/extfh.cfg
    dbhist=/san_ata_$sanata/$fecha/icdb
    export EXTFH=$hist
    export DATABASE=$dbhist
    echo $EXTFH
    echo $DATABASE
fi
#
echo
mv $cadena02  $cadena04
#
#*=======================================================*
#*  EXECUTE PROGRAM: icestd81
#*=======================================================*
#
echo "+----------------------------------------------+"
echo '|  Programa icestd81  DATAINFORME|'
echo '||'
echo '|  Procesando archivo --> '  $cadena04
echo "+----------------------------------------------+"
echo
echo
nohup x icestd81 $cadena04 $cadena03 >> $cadena01.log 2>> $cadena01.log
tail -15 $cadena01.log
#
# ICGS65
clave="12345678901"
nawk -v codcla=$clave '{ printf("%s%s\n", codcla, $1) } ' $cadena04 >| $cadena12
echo $cadena12 >| $cadena13
nohup x ICGS65 BATCH $fecha < $cadena13
x ic-inp-out-sco $cadena12
cadena14=$cadena12.TODO
nawk '{ printf("%s%s%s%s%s%s%s%s%s\n",substr($0,1,1),";",substr($0,2,11),";",substr($0,13,15),";",substr($
0,35,1),";",substr($0,36,50))}' $cadena12.TODO|sed -e "s/ 00000000/\;0000\;0000\;/g" >| $cadena12.ICGS65
#*========================================================*
#*PARAMETROS CALCULO DE SCORE
#*========================================================*
formato="VAL"
scoring=62
#*========================================================*
echo "+------------------------------------------------------+"
echo '|  Ejecucion ProgramaSCOTBATCH|'
echo "+------------------------------------------------------+"
echo '|  SCORE => QUANTO|'
echo "+------------------------------------------------------+"
echo
nohup x SCOTBATCH $fecha6 $scoring $formato $cadena04 >> $cadena01.log 2>>$cadena01.log
tail -12 $cadena01.logINSERT MODE######### 
OPEN MODEecho "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"
echo "program not executed"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd=="0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd=="0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ $BASEnew == "" ]then
loopEnd="1"
exit
fi
fi
    done
}

   paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`


    
INSERT MODE  == :w"sh-PE-Ripley" 571 lines, 19221 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>sh-PE-Ripley
ksh: sh-PE-Ripley: cannot execute
/d/iccol/desarrollo/macros>chmod a+x sh-PE-Ripley
/d/iccol/desarrollo/macros>^[k  /d/iccol/desarrollo/macros>chmod a+x sh-PE-Ripleysh-PE-Ripley          
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
>>>> params:  
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ $BASEnew == "" ]then
loopEnd="1"
exit
fi
fi
    done
}

   paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`readBASE() {/readBASE# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit



mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
    base=`echo $perams  | cut -d ";" -f1`
    entfmt=`echo $perams  | cut -d ";" -f2`
    fecha=`echo $perams  | cut -d ";" -f3`
    echo "+-----------------------------------------------------------+"
    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***|"
    echo '|Base (I=interna, E=externa)     :  ' $base
    echo '|Formato(1=1-11,2=1-11-45):  ' $entfmt
    echo "|Fecha de Proceso:  " $fecha
    echo "+-----------------------------------------------------------+"
    echo "Si desea modificar algun parametro digite S ---> \c"
    read modpard?#     # ##     # # #####  ####### #   ##     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]/loopEnd//then
BASE=$BASEnew
loopEnd="1"
/else
if [ $BASEnew == "" ]
then
loopEnd="1"/
OPEN MODEecho "in readBASE()":w"sh-PE-Ripley" 572 lines, 19242 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
in readBASE()
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
echo "in readBASE()"
    while [ loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ $BASEnew == "" ]then
    $CHANGE MODEtestTT:w"sh-PE-Ripley" 572 lines, 19244 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
in readBASE()
sh-PE-Ripley[6]: tesT:  not found
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
echo "in readBASE()"
    while tesT loopEnd == "0"
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ $BASEnew == "" ]thenREPLACE 1 CHARt:w"sh-PE-Ripley" 572 lines, 19244 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
in readBASE()
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
echo "in readBASE()"
    while test loopEnd == "0"
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ $BASEnew == "" ]thenT    tes$CHANGE MODE[ APPEND MODE]    [ INSERT MODE$/\[///

/loopEnd="1"
exit
fi
fi
done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
[ ! -f $0.parm ] && touch $0.parm    
/

mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
    base=`echo $perams  | cut -d ";" -f1`
    entfmt=`echo $perams  | cut -d ";" -f2`
    fecha=`echo $perams  | cut -d ";" -f3`
    echo "+-----------------------------------------------------------+"
    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***|"
    echo '|Base (I=interna, E=externa)     :  ' $base
    echo '|Formato(1=1-11,2=1-11-45):  ' $entfmt
    echo "|Fecha de Proceso:  " $fecha
    echo "+-----------------------------------------------------------+"
    echo "Si desea modificar algun parametro digite S ---> \c"
    read modpard
    if test -z "$modpard"
    then
modpar="N"
    else
if [ $modpard == "s" ] || [ $modpard == "S" ]; thenmodpar="S"
else
modpar="N"
fi
    fi
if [ $modpar == "S" ] || [ $modpar == "s" ]; then
modificar_parametros
    fi
}

#***********************************************************************
#pedir_parametros
#   Pide parametros y arma el archivo PEfalsemestral
#***********************************************************************
pedir_parametros() {
    regp=""
    echo "+--------------------------------------------------+"
    echo "| La base de entrada puede ser:|"
    echo '|Interna Datacredito (I)|'
    echo '|o Externa(E)|'
    echo 'Digite tipo de base (I o E)   ---> \c'
    read base
    if test -z "$base"
    then
base="I"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
echo "in readBASE()"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"/:w"sh-PE-Ripley" 572 lines, 19243 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
in readBASE()
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
sh-PE-Ripley[18]: test: argument expected
sh-PE-Ripley[22]: test: argument expected
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: ==I:  not found
sh-PE-Ripley[31]: test: argument expected
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:C
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyfg          sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
in readBASE()
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: I==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:I
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: I==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleysh-PE-Ripleyfg          
vi sh-PE-Ripley
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
echo "in readBASE()"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"echo "C) Provista por el Cliente"echo "enter para cancelar"echo " "echo "BASE:\c"read BASEnewif [ $BASEnew == "c" ]then  BASEnew="C"fiif [ $BASEnew == "i" ]then  BASEnew="I"fiif [ $BASEnew=="C" || $BASEnew=="I" ]then  BASE=$BASEnew  loopEnd="1"else  if [ $BASEnew == "" ]  thenloopEnd="1"exit  fifidone

echo "in readBASE()"echo "$CHANGE MODEwas c"
 



echo "was c"eREPLACE 1 CHARici
  



echo "was i"was i$CHANGE MODEBASEnew:"$BASEnewfifidone}paramsGet() {
    if [ 
    
if [ INSERT MODE-z  $CHANGE MODE]



echo "BASEnew:"$BASEnew:$CHANGE MODE neither C nor I"


     w: $CHANGE MODEcheck forr C :w"sh-PE-Ripley" 575 lines, 19302 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
was i
BASEnew:I
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: I==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
sh-PE-Ripley[17]: test: argument expected
sh-PE-Ripley[22]: test: argument expected
BASEnew:
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: ==I:  not found
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
echo "was c"
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
echo "was i"
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
"sh-PE-Ripley" line 69 of 575 --12%-- [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
was c
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:C
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
echo "was c"
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
echo "was i"
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}paramsGet() {#*******************************************************************************# Lee los parámetros de la corrida anterior#*******************************************************************************#   asegura que exista el arch de parámetros general[ ! -f $0.parm ] && touch $0.parm#   lee los parámetrosparams=`cat $0.parm`echo '>>>> params: ' "$params"#   separa los parámetros según su posiciónBASE=`echo "$params" | cut -d ";" -f1`NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
TIPO_PROC=`echo "$params" | cut -d ";" -f6`
FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}
OPEN MODENothing in register +APPEND MODE----------------------------------------------------------------------
APPEND MODE      I) interna
APPEND MODE      C) Provista por el Cliente
APPEND MODE      enter para cancelar
APPEND MODE
APPEND MODE                 BASE:C
APPEND MODEBASEnew:C
APPEND MODEsh-PE-Ripley[28]: test: ] missing
APPEND MODEsh-PE-Ripley[28]: C==I:  not found
APPEND MODE
APPEND MODE                       ORIGEN DE LA BASE
APPEND MODE----------------------------------------------------------------------
APPEND MODE
[ ! -f $0.parm ] && touch $0.parm#   lee los parámetrosparams=`cat $0.parm`echo '>>>> params: ' "$params"#   separa los parámetros según su posiciónBASE=`echo "$params" | cut -d ";" -f1`NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnewBASEnew="C"fi
if [ $BASEnew == "i" ]
then
echo "was i"
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
----------------------------------------------------------------------BASE:C
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
----------------------------------------------------------------------paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

   paramsPut() {echo "was c"thenif [ $BASEnew == "c" ]read BASEnewecho "BASE:\c"echo " "echo "enter para cancelar"[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
was c
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
echo "was c"
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
echo "was i"
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
----------------------------------------------------------------------BASE:C
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
----------------------------------------------------------------------paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
was i
BASEnew:I
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: I==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
echo "was i"
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
----------------------------------------------------------------------BASE:C
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
----------------------------------------------------------------------paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`




ID_EXTRACT=`echo "$params" | cut -d ";" -f5`BASEnew

:w"sh-PE-Ripley" 579 lines, 19521 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
sh-PE-Ripley[77]: ----------------------------------------------------------------------:  not found
sh-PE-Ripley[78]: BASE:C:  not found
sh-PE-Ripley[79]: BASEnew:C:  not found
sh-PE-Ripley[80]: sh-PE-Ripley[28]::  not found
sh-PE-Ripley[81]: sh-PE-Ripley[28]::  not found
sh-PE-Ripley[82]: ----------------------------------------------------------------------:  not found
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
BASEnew:C
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: C==I:  not found
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:^C
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
echo "BASEnew:"$BASEnew
if [ $BASEnew=="C" || $BASEnew=="I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
----------------------------------------------------------------------BASE:C
BASEnew:C
sh-PE-Ripley[28]: test: ] missing
sh-PE-Ripley[28]: C==I:  not found
----------------------------------------------------------------------paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
OPEN MODEBASEnew:C
OPEN MODEsh-PE-Ripley[26]: test: ] missing
OPEN MODEsh-PE-Ripley[26]: C==I:  not found
OPEN MODE



NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`FECHA_PROC=`echo "$params" | cut -d ";" -f7`=$CHANGE MODE == =$ == == "C" |$CHANGE MODE] || [ :w"sh-PE-Ripley" 577 lines, 19481 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
sh-PE-Ripley[76]: ----------------------------------------------------------------------:  not found
sh-PE-Ripley[77]: BASEnew:C:  not found
sh-PE-Ripley[78]: sh-PE-Ripley[26]::  not found
sh-PE-Ripley[79]: sh-PE-Ripley[26]::  not found
sh-PE-Ripley[80]: ----------------------------------------------------------------------:  not found
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
BASEnew: check for C or I
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
echo "BASEnew: check for C or I"BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
loopEnd="1"
exit
fi
fi
    done
}
----------------------------------------------------------------------
BASEnew:C
sh-PE-Ripley[26]: test: ] missing
sh-PE-Ripley[26]: C==I:  not found
----------------------------------------------------------------------paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`

}


    

echo "BASEnew: check for C or I": $CHANGE MODEcancelled"

heck for C or I"cancelled"



}

   paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm:w"sh-PE-Ripley" 572 lines, 19253 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
sh-PE-Ripley[17]: test: argument expected
sh-PE-Ripley[21]: test: argument expected
sh-PE-Ripley[25]: test: argument expected
sh-PE-Ripley[25]: test: argument expected
BASEnew: cancelled
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
echo "BASEnew: cancelled"
loopEnd="1"
exit
fi
fi
    done
}

   paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

   paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm"sh-PE-Ripley" line 69 of 572 --12%-- :w"sh-PE-Ripley" 572 lines, 19253 characters "APPEND MODE [Modified] line 69 of 572 --12%-- [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
sh-PE-Ripley[17]: test: argument expected
sh-PE-Ripley[21]: test: argument expected
sh-PE-Ripley[25]: test: argument expected
sh-PE-Ripley[25]: test: argument expected
BASEnew: cancelled
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
if [ -z $BASEnew ]then
echo "BASEnew: cancelled"
loopEnd="1"
exit
fi
fi
    done
}

   paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

   paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parmecho "C) Provista por el Cliente"echo "I) interna"echo $rayaecho "ORIGEN DE LA BASE"#......................................................................echo " "    do


    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

   paramsPut() {
#*******************************************************************************
6 lines deleted

if [ -z $BASEnew ]
then
echo "BASEnew: cancelled"
loopEnd="1"
exit
fi6 more linesif [ -z $BASEnew ]
then

loopEnd="1"
exit
filines <<ed/else    TIPO_PROC=`echo "$params" | cut -d ";" -f6`

:w"sh-PE-Ripley" 571 lines, 19185 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:q
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
BASEnew: cancelled
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
echo "BASEnew: cancelled"
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
fi
    done
}

   paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`FECHA_PROC=`echo "$params" | cut -d ";" -f7`    while [ $loopEnd == "0" ]    loopEnd="0"#*******************************************************************************# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela#*******************************************************************************readBASE() {FECHA_PROC=" "

paramsGet() {/)()()/#   separa los parámetros según su posición
BASE=`echo "$params" | cut -d ";" -f1`
NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
TIPO_PROC=`echo "$params" | cut -d ";" -f6`
FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {paramsPut() {
/paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

   paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit



mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
    base=`echo $perams  | cut -d ";" -f1`



    

/paramsPrint() {
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit



mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
    base=`echo $perams  | cut -d ";" -f1`
    entfmt=`echo $perams  | cut -d ";" -f2`
    fecha=`echo $perams  | cut -d ";" -f3`
    echo "+-----------------------------------------------------------+"
    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***|"



    paramsPrint() {    paramsPrint() {:w"sh-PE-Ripley" 570 lines, 19146 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\033[0m"
-en  BASH BASH
/d/iccol/desarrollo/macros>^[[A  /d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\>/d/iccol/desarrollo/macros>
-en  BASH BASH
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\>/d/iccol/desarrollo/macros>echo -en "\033[s\033[7A
-en  BASH BASH
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo -en "\033[s\033[7A\033[1;34m BASH BASH\033[u\>/d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\/d/iccol/desarrollo/macros>
-en  BASH BASH
/d/iccol/desarrollo/macros>echo -en "\033[5a"
-en 
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo -en "\033[5a"echo -en "\033[5A
-en 
/d/iccol/desarrollo/macros>man echo
Reformatting page.  Please Wait... done

User Commands                                             echo(1)

NAME
     echo - echo arguments

SYNOPSIS
     /usr/bin/echo [string]...

DESCRIPTION
     The echo utility writes its arguments, separated  by  BLANKs
     and  terminated  by  a  NEWLINE,  to the standard output. If
     there are no arguments, only the NEWLINE character is  writ-
     ten.

     echo is useful for producing diagnostics in  command  files,
     for  sending  known data into a pipe, and for displaying the
     contents of environment variables.

     The C shell, the Korn shell, and the Bourne shell  all  have
     echo built-in commands, which, by default, is invoked if the
     user   calls   echo   without   a   full    pathname.    See
     shell_builtins(1).  sh's echo, ksh's echo, and /usr/bin/echo
     understand the back-slashed escape characters,  except  that
     sh's  echo does not understand \a as the alert character. In
     addition, ksh's echo does not have an -n option. sh's   echo
     and /usr/bin/echo have an -n option if the SYSV3 environment
     variable is set (see  ENVIRONMENT  VARIABLES  below).  csh's
     echo  and  /usr/ucb/echo,  on  the  other  hand,  have an -n
     option, but do not understand the back-slashed escape  char-
     acters.  sh and ksh determine whether /usr/ucb/echo is found
     first in the PATH and, if so, they adapt the behavior of the
     echo builtin to match /usr/ucb/echo.

OPERANDS
     The following operand is supported:

     string    A string to be written to standard output. If  any
               operand is "-n", it is treated as a string, not an
               option.  The  following  character  sequences   is
               recognized within any of the arguments:

               \a      Alert character.

               \b      Backspace.

               \c      Print line without new-line.  All  charac-
                       ters  following the \c in the argument are
--More--(25%)                       ignored.
--More--(25%)
--More--(25%)SunOS 5.10          Last change: 17 Jul 2006                    1
--More--(26%)
--More--(26%)User Commands                                             echo(1)
--More--(27%)
--More--(27%)               \f      Form-feed.
--More--(28%)
--More--(28%)               \n      New-line.
--More--(28%)
--More--(28%)               \r      Carriage return.
--More--(29%)
--More--(29%)               \t      Tab.
--More--(29%)
--More--(29%)               \v      Vertical tab.
--More--(29%)
--More--(29%)               \\      Backslash.
--More--(30%)
--More--(30%)               \0n     Where n is the 8-bit character whose ASCII
--More--(31%)                       code is the 1-, 2- or 3-digit octal number
--More--(32%)                       representing that character.
--More--(32%)
--More--(32%)USAGE
--More--(32%)     Portable applications should not use -n (as the first  argu-
--More--(33%)     ment) or escape sequences.
--More--(34%)
--More--(34%)     The printf(1) utility can be used portably to emulate any of
--More--(35%)     the traditional behaviors of the echo utility as follows:
--More--(35%)
--More--(35%)         o    The Solaris 2.6 operating environment or compatible
--More--(36%)              version's /usr/bin/echo is equivalent to:
--More--(37%)
--More--(37%)                printf "%b\n" "$*"
--More--(37%)
--More--(37%)         o    The /usr/ucb/echo is equivalent to:
--More--(38%)
--More--(38%)                if [ "X$1" = "X-n" ]
--More--(39%)
--More--(39%)                then
--More--(39%)
--More--(39%)                        shift
--More--(39%)
--More--(39%)                        printf "%s" "$*"

                else

                        printf "%s\n" "$*"

SunOS 5.10          Last change: 17 Jul 2006                    2

User Commands                                             echo(1)

                fi

     New applications are encouraged to  use  printf  instead  of
     echo.

EXAMPLES
     Example 1 Finding how far below root your current  directory
     is located

     You can use echo to determine how many subdirectories  below
     the  root  directory  (/) is your current directory, as fol-
     lows:

         o    Echo your  current-working-directory's  full  path-
              name.

         o    Pipe the output through tr to translate the  path's
              embedded slash-characters into space-characters.

         o    Pipe that output through wc -w for a count  of  the
              names in your path.

                example% /usr/bin/echo $PWD | tr '/' ' ' | wc -w

     See tr(1) and wc(1) for their functionality.

     Below are the different flavors for echoing a string without
     a NEWLINE:

     Example 2 /usr/bin/echo

       example% /usr/bin/echo "$USER's current directory is $PWD\c"

     Example 3 sh/ksh shells

       example$ echo "$USER's current directory is $PWD\c"

     Example 4 csh shell
--More--(56%)
--More--(56%)SunOS 5.10          Last change: 17 Jul 2006                    3
--More--(57%)
--More--(57%)User Commands                                             echo(1)
--More--(58%)
--More--(58%)       example% echo -n "$USER's current directory is $PWD"
--More--(59%)
--More--(59%)     Example 5 /usr/ucb/echo
--More--(59%)
--More--(59%)       example% /usr/ucb/echo -n "$USER's current directory is $PWD"
--More--(60%)
--More--(60%)ENVIRONMENT VARIABLES
--More--(60%)     See environ(5) for descriptions of the following environment
--More--(61%)     variables  that  affect the execution of echo: LANG, LC_ALL,
--More--(62%)     LC_CTYPE, LC_MESSAGES, and NLSPATH.
--More--(63%)
--More--(63%)     SYSV3    This environment variable is used to provide compa-
--More--(64%)              tibility  with INTERACTIVE UNIX System and SCO UNIX
--More--(64%)              installation scripts. It is intended  for  compati-
--More--(65%)              bility  only and should not be used in new scripts.
--More--(66%)              This variable is applicable only  for  Solaris  x86
--More--(67%)              platforms, not Solaris SPARC systems.
--More--(68%)
--More--(68%)EXIT STATUS
--More--(68%)     The following error values are returned:

     0     Successful completion.

     >0    An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

SunOS 5.10          Last change: 17 Jul 2006                    4

User Commands                                             echo(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|
    | Interface Stability         | Standard                    |
    |_____________________________|_____________________________|

SEE ALSO
     echo(1B),  printf(1),   shell_builtins(1),   tr(1),   wc(1),
     ascii(5), attributes(5), environ(5), standards(5)

NOTES
     When representing an 8-bit character  by  using  the  escape
     convention  \0n,  the n must always be preceded by the digit
     zero (0).

     For example, typing: echo 'WARNING:\07'  prints  the  phrase
     WARNING:  and sounds the "bell" on your terminal. The use of
     single (or double) quotes (or two backslashes)  is  required
     to protect the "\" that precedes the "07".

     Following the \0, up to three digits are used in  construct-
     ing  the  octal output character. If, following the \0n, you
     want to echo additional digits that  are  not  part  of  the
     octal  representation,  you must use the full 3-digit n. For
     example, if you want to echo "ESC 7" you must use the  three
     digits  "033" rather than just the two digits "33" after the
     \0.

       2 digits         Incorrect:      echo "\0337" | od -xc
                        produces:       df0a                     (hex)
--More--(94%)
...back 1 page

       example% /usr/ucb/echo -n "$USER's current directory is $PWD"

ENVIRONMENT VARIABLES
     See environ(5) for descriptions of the following environment
     variables  that  affect the execution of echo: LANG, LC_ALL,
     LC_CTYPE, LC_MESSAGES, and NLSPATH.

     SYSV3    This environment variable is used to provide compa-
              tibility  with INTERACTIVE UNIX System and SCO UNIX
              installation scripts. It is intended  for  compati-
              bility  only and should not be used in new scripts.
              This variable is applicable only  for  Solaris  x86
              platforms, not Solaris SPARC systems.

EXIT STATUS
     The following error values are returned:

     0     Successful completion.

     >0    An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

SunOS 5.10          Last change: 17 Jul 2006                    4

User Commands                                             echo(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|
    | Interface Stability         | Standard                    |
    |_____________________________|_____________________________|

SEE ALSO
     echo(1B),  printf(1),   shell_builtins(1),   tr(1),   wc(1),
     ascii(5), attributes(5), environ(5), standards(5)

NOTES
     When representing an 8-bit character  by  using  the  escape
     convention  \0n,  the n must always be preceded by the digit
     zero (0).

     For example, typing: echo 'WARNING:\07'  prints  the  phrase
--More--(85%)
...back 1 page


User Commands                                             echo(1)

       example% echo -n "$USER's current directory is $PWD"

     Example 5 /usr/ucb/echo

       example% /usr/ucb/echo -n "$USER's current directory is $PWD"

ENVIRONMENT VARIABLES
     See environ(5) for descriptions of the following environment
     variables  that  affect the execution of echo: LANG, LC_ALL,
     LC_CTYPE, LC_MESSAGES, and NLSPATH.

     SYSV3    This environment variable is used to provide compa-
              tibility  with INTERACTIVE UNIX System and SCO UNIX
              installation scripts. It is intended  for  compati-
              bility  only and should not be used in new scripts.
              This variable is applicable only  for  Solaris  x86
              platforms, not Solaris SPARC systems.

EXIT STATUS
     The following error values are returned:

     0     Successful completion.

     >0    An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

SunOS 5.10          Last change: 17 Jul 2006                    4

User Commands                                             echo(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|
    | Interface Stability         | Standard                    |
    |_____________________________|_____________________________|

SEE ALSO
     echo(1B),  printf(1),   shell_builtins(1),   tr(1),   wc(1),
     ascii(5), attributes(5), environ(5), standards(5)
--More--(82%)
...back 1 page


     Example 4 csh shell

SunOS 5.10          Last change: 17 Jul 2006                    3

User Commands                                             echo(1)

       example% echo -n "$USER's current directory is $PWD"

     Example 5 /usr/ucb/echo

       example% /usr/ucb/echo -n "$USER's current directory is $PWD"

ENVIRONMENT VARIABLES
     See environ(5) for descriptions of the following environment
     variables  that  affect the execution of echo: LANG, LC_ALL,
     LC_CTYPE, LC_MESSAGES, and NLSPATH.

     SYSV3    This environment variable is used to provide compa-
              tibility  with INTERACTIVE UNIX System and SCO UNIX
              installation scripts. It is intended  for  compati-
              bility  only and should not be used in new scripts.
              This variable is applicable only  for  Solaris  x86
              platforms, not Solaris SPARC systems.

EXIT STATUS
     The following error values are returned:

     0     Successful completion.

     >0    An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

SunOS 5.10          Last change: 17 Jul 2006                    4

User Commands                                             echo(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|
    | Interface Stability         | Standard                    |
    |_____________________________|_____________________________|
--More--(80%)
...back 1 page

     Example 3 sh/ksh shells

       example$ echo "$USER's current directory is $PWD\c"

     Example 4 csh shell

SunOS 5.10          Last change: 17 Jul 2006                    3

User Commands                                             echo(1)

       example% echo -n "$USER's current directory is $PWD"

     Example 5 /usr/ucb/echo

       example% /usr/ucb/echo -n "$USER's current directory is $PWD"

ENVIRONMENT VARIABLES
     See environ(5) for descriptions of the following environment
     variables  that  affect the execution of echo: LANG, LC_ALL,
     LC_CTYPE, LC_MESSAGES, and NLSPATH.

     SYSV3    This environment variable is used to provide compa-
              tibility  with INTERACTIVE UNIX System and SCO UNIX
              installation scripts. It is intended  for  compati-
              bility  only and should not be used in new scripts.
              This variable is applicable only  for  Solaris  x86
              platforms, not Solaris SPARC systems.

EXIT STATUS
     The following error values are returned:

     0     Successful completion.

     >0    An error occurred.

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

SunOS 5.10          Last change: 17 Jul 2006                    4

User Commands                                             echo(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
--More--(78%)    |_____________________________|_____________________________|
    | Interface Stability         | Standard                    |
    |_____________________________|_____________________________|

SEE ALSO
     echo(1B),  printf(1),   shell_builtins(1),   tr(1),   wc(1),
     ascii(5), attributes(5), environ(5), standards(5)

NOTES
     When representing an 8-bit character  by  using  the  escape
     convention  \0n,  the n must always be preceded by the digit
     zero (0).

     For example, typing: echo 'WARNING:\07'  prints  the  phrase
     WARNING:  and sounds the "bell" on your terminal. The use of
     single (or double) quotes (or two backslashes)  is  required
     to protect the "\" that precedes the "07".

     Following the \0, up to three digits are used in  construct-
     ing  the  octal output character. If, following the \0n, you
     want to echo additional digits that  are  not  part  of  the
     octal  representation,  you must use the full 3-digit n. For
     example, if you want to echo "ESC 7" you must use the  three
     digits  "033" rather than just the two digits "33" after the
     \0.

       2 digits         Incorrect:      echo "\0337" | od -xc
                        produces:       df0a                     (hex)
                                        337                      (ascii)
       3 digits         Correct:        echo "\00337" | od -xc
                        produces:       lb37 0a00                (hex)
                                        033 7                    (ascii)

     For the octal equivalents of each character, see ascii(5).

SunOS 5.10          Last change: 17 Jul 2006                    5

/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit



mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
    base=`echo $perams  | cut -d ";" -f1`
    entfmt=`echo $perams  | cut -d ";" -f2`
    fecha=`echo $perams  | cut -d ";" -f3`
    echo "+-----------------------------------------------------------+"
    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***|"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`OPEN MODE        else
OPEN MODE #   separa los parámetros según su posición:set ai
OPEN MODE    echo "\7"INSERT MODE\033[5a"
echo "\7\033[5a"7$CHANGE MODE"
33[REPLACE 1 CHAR8:w"sh-PE-Ripley" 573 lines, 19190 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgclearman echo
Reformatting page.  Please Wait... done

User Commands                                             echo(1)

NAME
     echo - echo arguments

SYNOPSIS
     /usr/bin/echo [string]...

DESCRIPTION
     The echo utility writes its arguments, separated  by  BLANKs
     and  terminated  by  a  NEWLINE,  to the standard output. If
     there are no arguments, only the NEWLINE character is  writ-
     ten.

     echo is useful for producing diagnostics in  command  files,
     for  sending  known data into a pipe, and for displaying the
     contents of environment variables.

     The C shell, the Korn shell, and the Bourne shell  all  have
     echo built-in commands, which, by default, is invoked if the
     user   calls   echo   without   a   full    pathname.    See
     shell_builtins(1).  sh's echo, ksh's echo, and /usr/bin/echo
     understand the back-slashed escape characters,  except  that
     sh's  echo does not understand \a as the alert character. In
     addition, ksh's echo does not have an -n option. sh's   echo
     and /usr/bin/echo have an -n option if the SYSV3 environment
     variable is set (see  ENVIRONMENT  VARIABLES  below).  csh's
     echo  and  /usr/ucb/echo,  on  the  other  hand,  have an -n
     option, but do not understand the back-slashed escape  char-
     acters.  sh and ksh determine whether /usr/ucb/echo is found
     first in the PATH and, if so, they adapt the behavior of the
     echo builtin to match /usr/ucb/echo.

OPERANDS
     The following operand is supported:

     string    A string to be written to standard output. If  any
               operand is "-n", it is treated as a string, not an
               option.  The  following  character  sequences   is
               recognized within any of the arguments:

               \a      Alert character.

               \b      Backspace.

               \c      Print line without new-line.  All  charac-
                       ters  following the \c in the argument are
--More--(25%)/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>man echofg      clearman echoecho -en "\033[5A"echo -en "\033[5a"echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\>/d/iccol/desarrollo/macros>echo -en "\033[s\033[7A\033[1;34m BASH BASH\033[u\/d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\/d/iccol/desarrollo/macros>echo -en "\033[s\033[7B\033[1;34m BASH BASH\033[u\/d/iccol/desarrollo/macros>fg                                                 /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
\7

 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
echo "\7"
echo "\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`INSERT MODE\
\:w"sh-PE-Ripley" 573 lines, 19192 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
\7

 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
echo "\\7"
echo "\\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`\
\:w"sh-PE-Ripley" 573 lines, 19194 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
\7
\033[8a
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
echo "\\\7"
echo "\\\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`ech$CHANGE MODEprintf
 ech$printff "\\\
:w"sh-PE-Ripley" 573 lines, 19196 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:x
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\\7"
printf "\\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`:w"sh-PE-Ripley" 573 lines, 19195 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\\7"
printf "\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`INSERT MODE\:w"sh-PE-Ripley" 573 lines, 19196 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:q
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\\7"
printf "\\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`:w"sh-PE-Ripley" 573 lines, 19195 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
printf "\\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
:w"sh-PE-Ripley" 573 lines, 19194 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
printf "\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
printf "\7"
printf "\7":w"sh-PE-Ripley" 575 lines, 19224 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
printf "\7"
printf "\7"
printf "\033[8a"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm#   lee los parámetros
    params=`cat $0.parm`echo '>>>> params: ' "$params"[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros> printf "\033[8a"
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> printf "\033[8a"
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> printf "\033[8a"                 
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> printf "\033[8a" printf "\\033[8a"
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> printf "\\033[8a" printf "\\033[5
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros> printf "\\033[5a"
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"


[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>man test
Reformatting page.  Please Wait... done

User Commands                                             test(1)

NAME
     test - evaluate condition(s)

SYNOPSIS
     /usr/bin/test [condition]

     [ [condition] ]

  sh
     test [condition]

     [ [condition] ]

  csh
     test [condition]

     [ [condition] ]

  ksh
     test [condition]

     [ [condition] ]

DESCRIPTION
     The test utility evaluates the condition and  indicates  the
     result  of the evaluation by its exit status. An exit status
     of zero indicates that the condition evaluated as  true  and
     an  exit  status of 1 indicates that the condition evaluated
     as false.

     In the first form of the utility shown using the SYNOPSIS:

       test [ condition ]

     the square brackets denote that  condition  is  an  optional
     operand and are not to be entered on the command line.

     In the second form of the utility shown using the SYNOPSIS:

SunOS 5.10          Last change: 23 Aug 2002                    1

User Commands                                             test(1)

       [ [ condition ] ]

--More--(5%)     the first open square bracket, [, is  the  required  utility
     name. condition is optional, as denoted by the inner pair of
     square brackets. The final close square  bracket,  ],  is  a
     required operand.

     See largefile(5) for the description of the behavior of test
     when  encountering  files  greater  than or equal to 2 Gbyte
     (2^31 bytes).

     The test and [ utilities evaluate  the  condition  condition
     and,  if its value is true, set exit status to 0. Otherwise,
     a non-zero (false) exit status is set. test and [ also set a
     non-zero exit status if there are no arguments. When permis-
     sions are tested, the effective user ID of  the  process  is
     used.

     All operators, flags, and brackets (brackets used  as  shown
     in  the  last  SYNOPSIS  line) must be separate arguments to
     these commands. Normally these arguments  are  separated  by
     spaces.

OPERANDS
     The primaries listed below with two elements of the form:

       -primary_operator  primary_operand

     are known as unary primaries. The primaries with three  ele-
     ments in either of the two forms:

       primary_operand  -primary_operator  primary_operand
       primary_operand  primary_operator   primary_operand

     are known as binary primaries.

     If any file operands except for -h and -L primaries refer to
     symbolic  links,  the symbolic link is expanded and the test
     is performed on the resulting file.

SunOS 5.10          Last change: 23 Aug 2002                    2

User Commands                                             test(1)

     If you test a file you own (the -r -w or -x tests), but  the
     permission  tested  does  not have the owner bit set, a non-
     zero (false) exit status will be returned  even  though  the
     file  may  have  the group or other bit set for that permis-
     sion.

--More--(14%)     The = and != primaries have a  higher  precedence  than  the
     unary  primaries. The = and != primaries always expect argu-
     ments; therefore, = and != cannot be used as an argument  to
     the unary primaries.

     The following primaries can be used to construct condition:

     -a file                     True if file exists. (Not avail-
                                 able in sh.)

     -b file                     True if file  exists  and  is  a
                                 block special file.

     -c file                     True if file  exists  and  is  a
                                 character special file.

     -d file                     True if file  exists  and  is  a
                                 directory.

     -e file                     True if file exists. (Not avail-
                                 able in sh.)

     -f file                     True if file  exists  and  is  a
                                 regular  file. Alternatively, if
                                 /usr/bin/sh    users     specify
                                 /usr/ucb   before   /usr/bin  in
                                 their PATH environment variable,
                                 then  test  will  return true if
                                 file     exists      and      is
                                 (not-a-directory).  The csh test
                                 and [ built-ins always use  this
                                 alternative behavior.

     -g file                     True if file exists and its  set
                                 group ID flag is set.

SunOS 5.10          Last change: 23 Aug 2002                    3

User Commands                                             test(1)

     -G file                     True  if  file  exists  and  its
                                 group   matches   the  effective
                                 group ID of this  process.  (Not
                                 available in sh.)

     -h file                     True if file  exists  and  is  a
                                 symbolic link.

--More--(24%)     -k file                     True if file exists and has  its
                                 sticky bit set.

     -L file                     True if file  exists  and  is  a
                                 symbolic link.

     -n string                   True if the length of string  is
                                 non-zero.

     -o option                   True if option named  option  is
                                 on.  (Not  available  in  csh or
                                 sh.)

     -O file                     True if file exists and is owned
                                 by the effective user ID of this
                                 process. (Not available in sh.)

     -p file                     True if file  is  a  named  pipe
                                 (FIFO).

     -r file                     True if file exists and is read-
                                 able.

     -s file                     True if file exists  and  has  a
                                 size greater than zero.

     -S file                     True if file  exists  and  is  a
                                 socket. (Not available in sh.)

     -t [file_descriptor]        True  if  the  file  whose  file
                                 descriptor       number       is
                                 file_descriptor is open  and  is
                                 associated  with  a terminal. If

SunOS 5.10          Last change: 23 Aug 2002                    4

User Commands                                             test(1)

                                 file_descriptor  is  not  speci-
                                 fied,  1  is  used  as a default
                                 value.

     -u file                     True  if  file  exists  and  its
                                 set-user-ID flag is set.

     -w file                     True if file exists and is writ-
                                 able.  True  will  indicate only
                                 that the write flag is  on.  The
--More--(34%)                                 file  will  not be writable on a
                                 read-only file  system  even  if
                                 this test indicates true.

     -x file                     True if file exists and is  exe-
                                 cutable. True will indicate only
                                 that the execute flag is on.  If
                                 file  is a directory, true indi-
                                 cates that file can be searched.

     -z string                   True if  the  length  of  string
                                 string is zero.

     file1 -nt file2             True  if  file1  exists  and  is
                                 newer than file2. (Not available
                                 in sh.)

     file1 -ot file2             True  if  file1  exists  and  is
                                 older than file2. (Not available
                                 in sh.)

     file1 -ef file2             True if file1  and  file2  exist
                                 and refer to the same file. (Not
                                 available in sh.)

     string                      True if the string string is not
                                 the null string.

     string1 = string2           True if the strings string1  and
                                 string2 are identical.

SunOS 5.10          Last change: 23 Aug 2002                    5

User Commands                                             test(1)

     string1 != string2          True if the strings string1  and
                                 string2 are not identical.

     n1 -eq n2                   True if the integers n1  and  n2
                                 are algebraically equal.

     n1 -ne n2                   True if the integers n1  and  n2
                                 are not algebraically equal.

     n1 -gt n2                   True if the integer n1 is  alge-
                                 braically   greater   than   the
                                 integer n2.

--More--(45%)     n1 -ge n2                   True if the integer n1 is  alge-
                                 braically  greater than or equal
                                 to the integer n2.

     n1 -lt n2                   True if the integer n1 is  alge-
                                 braically  less than the integer
                                 n2.

     n1 -le n2                   True if the integer n1 is  alge-
                                 braically  less than or equal to
                                 the integer n2.

     condition1 -a condition2    True if both condition1 and con-
                                 dition2  are true. The -a binary
                                 primary is left associative  and
                                 has  higher  precedence than the
                                 -o binary primary.

     condition1 -o condition2    True  if  either  condition1  or
                                 condition2   is   true.  The  -o
                                 binary primary is left  associa-
                                 tive.

     These primaries can be combined with  the  following  opera-
     tors:

     ! condition      True if condition is false.

SunOS 5.10          Last change: 23 Aug 2002                    6

User Commands                                             test(1)

     ( condition )    True if condition is true. The  parentheses
                      (  )  can  be used to alter the normal pre-
                      cedence and associativity. Notice also that
                      parentheses  are  meaningful  to  the shell
                      and, therefore, must be quoted.

     The algorithm for determining the precedence of  the  opera-
     tors and the return value that will be generated is based on
     the number of arguments presented to  test.  (However,  when
     using  the [...] form, the right-bracket final argument will
     not be counted in this algorithm.)

     In the following list, $1, $2, $3 and $4 represent the argu-
     ments  presented to test as a condition, condition1, or con-
     dition2.

--More--(56%)     0 arguments:    Exit false (1).

     1 argument:     Exit true (0) if $1 is not null.  Otherwise,
                     exit false.

     2 arguments:
                         o    If $1 is !,  exit  true  if  $2  is
                              null, false if $2 is not null.

                         o    If $1 is a unary primary, exit true
                              if the unary test is true, false if
                              the unary test is false.

                         o    Otherwise,   produce    unspecified
                              results.

     3 arguments:
                         o    If $2 is a binary primary,  perform
                              the binary test of $1 and $3.

                         o    If $1 is !, negate the two-argument
                              test of $2 and $3.

                         o    Otherwise,   produce    unspecified
                              results.

     4 arguments:
                         o    If  $1  is  !,  negate  the  three-
                              argument test of $2, $3, and $4.

SunOS 5.10          Last change: 23 Aug 2002                    7

User Commands                                             test(1)

                         o    Otherwise, the results are unspeci-
                              fied.

USAGE
     Scripts should be careful when  dealing  with  user-supplied
     input  that  could be confused with primaries and operators.
     Unless the application writer knows all the cases that  pro-
     duce input to the script, invocations like test "$1" -a "$2"
     should be written as test "$1" && test "$2" to  avoid  prob-
     lems  if  a  user supplied values such as $1 set to ! and $2
     set to the null string. That is, in cases where maximal por-
     tability  is  of  concern,  replace test expr1 -a expr2 with
     test expr1 && test expr2, and replace test  expr1  -o  expr2
     with  test expr1 || test expr2. But notice that, in test, -a
--More--(65%)/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"/==///:w"sh-PE-Ripley" 572 lines, 19170 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgman testfg       printf "\\033[5a" printf "\\033[5a" printf "\\033[8a" printf "\033[8a"  printf "\033[8a"fg               sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######                               
        #     # #          #     # # #####  #      ###### #   # 
        #     # #          #     # # #    # #      #       # #  
        ######  #####      ######  # #    # #      #####    #   
        #       #          #   #   # #####  #      #        #   
        #       #          #    #  # #      #      #        #   
        #       #######    #     # # #      ###### ######   #   

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:q
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
/d/iccol/desarrollo/macros>man operators
No manual entry for operators.
/d/iccol/desarrollo/macros>man shell
Reformatting page.  Please Wait... done

FMLI Commands                                           shell(1F)

NAME
     shell - run a command using shell

SYNOPSIS
     shell command [command] ...

DESCRIPTION
     The shell function  concatenate  its  arguments,  separating
     each by a space, and passes this string to the shell ($SHELL
     if set, otherwise /usr/bin/sh).

EXAMPLES
     Example 1: A sample output of shell command.

     Since the Form and Menu Language does not  directly  support
     background  processing,  the  shell  function  can  be  used
     instead.

     `shell "build prog > /dev/null &"`

     If you want the user to continue to be able to interact with
     the  application  while  the  background job is running, the
     output of an executable run by shell in the background  must
     be  redirected: to a file if you want to save the output, or
     to /dev/null if you don't want to save it (or if there is no
     output),  otherwise  your  application may appear to be hung
     until the background job finishes processing.

     shell can also be used to execute a  command  that  has  the
     same name as an FMLI built-in function.

NOTES
     The arguments to shell will  be  concatenate  using  spaces,
     which  may or may not do what is expected. The variables set
     in local environments will not  be  expanded  by  the  shell
     because "local" means "local to the current process."

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
--More--(90%)    |_____________________________|_____________________________|

SEE ALSO
     sh(1), attributes(5)

SunOS 5.10           Last change: 5 Jul 1990                    1

/d/iccol/desarrollo/macros>q man sh(1)
ksh: syntax error: `(' unexpected
/d/iccol/desarrollo/macros>man sh
Reformatting page.  Please Wait... done

User Commands                                               sh(1)

NAME
     sh, jsh - standard and job control shell and command  inter-
     preter

SYNOPSIS
     /usr/bin/sh [-acefhiknprstuvx] [argument]...

     /usr/xpg4/bin/sh [+ abCefhikmnoprstuvx]
         [+ o option]... [-c string] [arg]...

     /usr/bin/jsh [-acefhiknprstuvx] [argument]...

DESCRIPTION
     The /usr/bin/sh utility is a  command  programming  language
     that executes commands read from a terminal or a file.

     The /usr/xpg4/bin/sh utility is a standards compliant shell.
     This  utility  provides  all  the  functionality  of ksh(1),
     except in cases discussed in  ksh(1)  where  differences  in
     behavior exist.

     The jsh utility is an interface to the shell  that  provides
     all  of the functionality of sh and enables job control (see
     Job Control section below).

     Arguments to the shell are listed in the Invocation  section
     below.

  Definitions
     A blank is a tab or a space. A name is a sequence  of  ASCII
     letters,  digits, or underscores, beginning with a letter or
     an underscore. A parameter is a name, a digit, or any of the
     characters *, @, #, ?, -, $, and !.

USAGE
  Commands
     A simple-command is a sequence of non-blank words  separated
     by  blanks. The first word specifies the name of the command
     to be executed. Except as  specified  below,  the  remaining
     words  are  passed  as arguments to the invoked command. The
     command name is passed as  argument  0  (see  exec(2)).  The
     value  of  a  simple-command  is  its exit status if it ter-
     minates normally, or (octal)  200+status  if  it  terminates
     abnormally. See signal.h(3HEAD) for a list of status values.

--More--(3%)SunOS 5.10           Last change: 2 May 2008                    1

User Commands                                               sh(1)

     A pipeline is a sequence of one or more  commands  separated
     by  |.  The  standard output of each command but the last is
     connected by a pipe(2) to the standard  input  of  the  next
     command.  Each  command  is  run  as a separate process. The
     shell waits for the last command  to  terminate.   The  exit
     status  of a pipeline is the exit status of the last command
     in the pipeline.

     A list is a sequence of one or more pipelines  separated  by
     ;,  &,  &&,  or ||, and optionally terminated by ; or &.  Of
     these four symbols, ; and & have equal precedence, which  is
     lower  than  that  of  && and ||. The symbols && and || also
     have equal precedence. A  semicolon  (;)  causes  sequential
     execution  of  the  preceding  pipeline,  that is, the shell
     waits for the pipeline to finish before executing  any  com-
     mands following the semicolon. An ampersand (&) causes asyn-
     chronous execution of the preceding pipeline, that  is,  the
     shell  does not wait for that pipeline to finish. The symbol
     && (||) causes the list following it to be executed only  if
     the  preceding  pipeline  returns  a  zero  (non-zero)  exit
     status. An arbitrary number of  newlines  may  appear  in  a
     list, instead of semicolons, to delimit commands.

     A command is either a simple-command or one of  the  follow-
     ing.  Unless  otherwise stated, the value returned by a com-
     mand is that of the last simple-command executed in the com-
     mand.

     for name [ in word ... ] do list done

         Each time a for command is executed, name is set to  the
         next  word  taken  from the in word list. If in word ...
         is omitted, then the for command executes  the  do  list
         once  for  each  positional  parameter  that is set (see
         Parameter Substitution section  below).  Execution  ends
         when there are no more words in the list.

     case word in [ pattern [ | pattern ] ) list ;; ] ...  esac

         A case command executes the  list  associated  with  the
         first  pattern  that  matches word. The form of the pat-
         terns is the same as that used for file-name  generation
         (see File Name Generation section), except that a slash,
         a leading dot, or a dot immediately  following  a  slash
--More--(8%)         need not be matched explicitly.

SunOS 5.10           Last change: 2 May 2008                    2

User Commands                                               sh(1)

     if list ; then list [ elif list ; then list ; ] ...  [  else
     list ; ] fi

     The list following if is executed and, if it returns a  zero
     exit  status, the list following the first then is executed.
     Otherwise, the list following elif is executed and,  if  its
     value is zero, the list following the next then is executed.
     Failing that, the else list is executed. If no else list  or
     then  list  is  executed, then the if command returns a zero
     exit status.

     while list do list done    A while command  repeatedly  exe-
                                cutes  the while list and, if the
                                exit status of the  last  command
                                in the list is zero, executes the
                                do list; otherwise the loop  ter-
                                minates.   If  no commands in the
                                do list are  executed,  then  the
                                while command returns a zero exit
                                status;  until  may  be  used  in
                                place of while to negate the loop
                                termination test.

     (list)                     Execute list in a sub-shell.

     { list;}                   list is executed in  the  current
                                (that  is,  parent)  shell. The {
                                must be followed by a space.

     name (){ list;}            Define a function which is refer-
                                enced  by  name.  The body of the
                                function is the list of  commands
                                between  {  and  }. The { must be
                                followed by a space. Execution of
                                functions is described below (see
                                Execution section). The {  and  }
                                are  unnecessary  if  the body of
                                the  function  is  a  command  as
                                defined above, under Commands.

     The following words are only recognized as the first word of
     a command and when not quoted:
--More--(12%)
     if  then  else  elif  fi  case  esac  for  while  until   do
     done  {  }

SunOS 5.10           Last change: 2 May 2008                    3

User Commands                                               sh(1)

  Comments Lines
     A word beginning with # causes that word and all the follow-
     ing characters up to a newline to be ignored.

  Command Substitution
     The shell reads commands from the string between  two  grave
     accents (``) and the standard output from these commands may
     be used as all or part of a word. Trailing newlines from the
     standard output are removed.

     No interpretation is done on the string before the string is
     read,  except to remove backslashes (\) used to escape other
     characters. Backslashes may be used to escape a grave accent
     (`) or another backslash (\) and are removed before the com-
     mand string is read. Escaping grave  accents  allows  nested
     command  substitution.  If  the  command  substitution  lies
     within a pair of double  quotes  ("  ...`  ...`  ...  "),  a
     backslash  used  to  escape  a  double  quote  (\")  will be
     removed; otherwise, it will be left intact.

     If a backslash is used to escape a newline character  (\new-
     line),  both  the backslash and the newline are removed (see
     the later section on Quoting). In addition, backslashes used
     to  escape dollar signs (\$) are removed. Since no parameter
     substitution is done on the  command  string  before  it  is
     read,  inserting  a backslash to escape a dollar sign has no
     effect. Backslashes that precede characters other than \, `,
     ", newline, and $ are left intact when the command string is
     read.

  Parameter Substitution
     The character $ is used to introduce  substitutable  parame-
     ters. There are two types of parameters, positional and key-
     word. If parameter is a digit, it is a positional parameter.
     Positional parameters may be assigned values by set. Keyword
     parameters (also known as variables) may be assigned  values
     by writing:

     name=value [ name=value ] ...

--More--(16%)     Pattern-matching is not performed on value. There cannot  be
     a function and a variable with the same name.

     ${parameter}             The value, if any, of the parameter
                              is   substituted.  The  braces  are
                              required  only  when  parameter  is
                              followed  by  a  letter,  digit, or
                              underscore  that  is  not   to   be

SunOS 5.10           Last change: 2 May 2008                    4

User Commands                                               sh(1)

                              interpreted as part of its name. If
                              parameter is * or @, all the  posi-
                              tional  parameters,  starting  with
                              $1, are substituted  (separated  by
                              spaces).  Parameter  $0 is set from
                              argument zero  when  the  shell  is
                              invoked.

     ${parameter:-word}       Use Default Values. If parameter is
                              unset  or  null,  the  expansion of
                              word is substituted; otherwise, the
                              value of parameter is substituted.

     ${parameter:=word}       Assign Default Values. If parameter
                              is  unset or null, the expansion of
                              word is assigned to  parameter.  In
                              all   cases,  the  final  value  of
                              parameter  is   substituted.   Only
                              variables,  not  positional parame-
                              ters or special parameters, can  be
                              assigned in this way.

     ${parameter:?word}       If parameter is  set  and  is  non-
                              null,  substitute its value; other-
                              wise, print word and exit from  the
                              shell. If word is omitted, the mes-
                              sage "parameter null or not set" is
                              printed.

     ${parameter:+word}       If parameter is  set  and  is  non-
                              null,  substitute  word;  otherwise
                              substitute nothing.

     In the above, word is not evaluated unless it is to be  used
     as  the  substituted string, so that, in the following exam-
--More--(21%)     ple, pwd is executed only if d is not set or is null:

       echo  ${d:-`pwd`}

     If the colon (:) is omitted from the above expressions,  the
     shell only checks whether parameter is set or not.

SunOS 5.10           Last change: 2 May 2008                    5

User Commands                                               sh(1)

     The following parameters are automatically set by the shell.

     #       The number of positional parameters in decimal.

     -       Flags supplied to the shell on invocation or by  the
             set command.

     ?       The decimal value returned by the last synchronously
             executed command.

     $       The process number of this shell.

     !       The process number of the  last  background  command
             invoked.

     The following parameters are used by the shell. The  parame-
     ters  in  this  section  are also referred to as environment
     variables.

     HOME         The default argument (home directory)  for  the
                  cd  command,  set to the user's login directory
                  by  login(1)  from  the  password   file   (see
                  passwd(4)).

     PATH         The search path  for  commands  (see  Execution
                  section below).

     CDPATH       The search path for the cd command.

     MAIL         If this parameter is set to the name of a  mail
                  file  and  the  MAILPATH  parameter is not set,
                  the shell informs the user of  the  arrival  of
                  mail in the specified file.

     MAILCHECK    This parameter specifies how often (in seconds)
                  the shell will check for the arrival of mail in
                  the files specified by  the  MAILPATH  or  MAIL
--More--(24%)
...back 1 page

                              is  unset or null, the expansion of
                              word is assigned to  parameter.  In
                              all   cases,  the  final  value  of
                              parameter  is   substituted.   Only
                              variables,  not  positional parame-
                              ters or special parameters, can  be
                              assigned in this way.

     ${parameter:?word}       If parameter is  set  and  is  non-
                              null,  substitute its value; other-
                              wise, print word and exit from  the
                              shell. If word is omitted, the mes-
                              sage "parameter null or not set" is
                              printed.

     ${parameter:+word}       If parameter is  set  and  is  non-
                              null,  substitute  word;  otherwise
                              substitute nothing.

     In the above, word is not evaluated unless it is to be  used
     as  the  substituted string, so that, in the following exam-
     ple, pwd is executed only if d is not set or is null:

       echo  ${d:-`pwd`}

     If the colon (:) is omitted from the above expressions,  the
     shell only checks whether parameter is set or not.

SunOS 5.10           Last change: 2 May 2008                    5

User Commands                                               sh(1)

     The following parameters are automatically set by the shell.

     #       The number of positional parameters in decimal.

     -       Flags supplied to the shell on invocation or by  the
             set command.

     ?       The decimal value returned by the last synchronously
             executed command.

     $       The process number of this shell.

     !       The process number of the  last  background  command
             invoked.

     The following parameters are used by the shell. The  parame-
     ters  in  this  section  are also referred to as environment
--More--(22%)
...back 1 page


User Commands                                               sh(1)

                              interpreted as part of its name. If
                              parameter is * or @, all the  posi-
                              tional  parameters,  starting  with
                              $1, are substituted  (separated  by
                              spaces).  Parameter  $0 is set from
                              argument zero  when  the  shell  is
                              invoked.

     ${parameter:-word}       Use Default Values. If parameter is
                              unset  or  null,  the  expansion of
                              word is substituted; otherwise, the
                              value of parameter is substituted.

     ${parameter:=word}       Assign Default Values. If parameter
                              is  unset or null, the expansion of
                              word is assigned to  parameter.  In
                              all   cases,  the  final  value  of
                              parameter  is   substituted.   Only
                              variables,  not  positional parame-
                              ters or special parameters, can  be
                              assigned in this way.

     ${parameter:?word}       If parameter is  set  and  is  non-
                              null,  substitute its value; other-
                              wise, print word and exit from  the
                              shell. If word is omitted, the mes-
                              sage "parameter null or not set" is
                              printed.

     ${parameter:+word}       If parameter is  set  and  is  non-
                              null,  substitute  word;  otherwise
                              substitute nothing.

     In the above, word is not evaluated unless it is to be  used
     as  the  substituted string, so that, in the following exam-
     ple, pwd is executed only if d is not set or is null:

       echo  ${d:-`pwd`}

     If the colon (:) is omitted from the above expressions,  the
     shell only checks whether parameter is set or not.

SunOS 5.10           Last change: 2 May 2008                    5

User Commands                                               sh(1)

--More--(21%)
...back 1 page

     The character $ is used to introduce  substitutable  parame-
     ters. There are two types of parameters, positional and key-
     word. If parameter is a digit, it is a positional parameter.
     Positional parameters may be assigned values by set. Keyword
     parameters (also known as variables) may be assigned  values
     by writing:

     name=value [ name=value ] ...

     Pattern-matching is not performed on value. There cannot  be
     a function and a variable with the same name.

     ${parameter}             The value, if any, of the parameter
                              is   substituted.  The  braces  are
                              required  only  when  parameter  is
                              followed  by  a  letter,  digit, or
                              underscore  that  is  not   to   be

SunOS 5.10           Last change: 2 May 2008                    4

User Commands                                               sh(1)

                              interpreted as part of its name. If
                              parameter is * or @, all the  posi-
                              tional  parameters,  starting  with
                              $1, are substituted  (separated  by
                              spaces).  Parameter  $0 is set from
                              argument zero  when  the  shell  is
                              invoked.

     ${parameter:-word}       Use Default Values. If parameter is
                              unset  or  null,  the  expansion of
                              word is substituted; otherwise, the
                              value of parameter is substituted.

     ${parameter:=word}       Assign Default Values. If parameter
                              is  unset or null, the expansion of
                              word is assigned to  parameter.  In
                              all   cases,  the  final  value  of
                              parameter  is   substituted.   Only
                              variables,  not  positional parame-
                              ters or special parameters, can  be
                              assigned in this way.

     ${parameter:?word}       If parameter is  set  and  is  non-
                              null,  substitute its value; other-
                              wise, print word and exit from  the
                              shell. If word is omitted, the mes-
                              sage "parameter null or not set" is
--More--(20%)                              printed.

     ${parameter:+word}       If parameter is  set  and  is  non-
                              null,  substitute  word;  otherwise
                              substitute nothing.

     In the above, word is not evaluated unless it is to be  used
     as  the  substituted string, so that, in the following exam-
     ple, pwd is executed only if d is not set or is null:

       echo  ${d:-`pwd`}

     If the colon (:) is omitted from the above expressions,  the
     shell only checks whether parameter is set or not.

SunOS 5.10           Last change: 2 May 2008                    5

User Commands                                               sh(1)

     The following parameters are automatically set by the shell.

     #       The number of positional parameters in decimal.

     -       Flags supplied to the shell on invocation or by  the
             set command.

     ?       The decimal value returned by the last synchronously
             executed command.

     $       The process number of this shell.

     !       The process number of the  last  background  command
             invoked.

     The following parameters are used by the shell. The  parame-
     ters  in  this  section  are also referred to as environment
     variables.

     HOME         The default argument (home directory)  for  the
                  cd  command,  set to the user's login directory
                  by  login(1)  from  the  password   file   (see
                  passwd(4)).

     PATH         The search path  for  commands  (see  Execution
                  section below).

     CDPATH       The search path for the cd command.

--More--(23%)     MAIL         If this parameter is set to the name of a  mail
                  file  and  the  MAILPATH  parameter is not set,
                  the shell informs the user of  the  arrival  of
                  mail in the specified file.

     MAILCHECK    This parameter specifies how often (in seconds)
                  the shell will check for the arrival of mail in
                  the files specified by  the  MAILPATH  or  MAIL
                  parameters.  The  default  value is 600 seconds
                  (10 minutes). If set to 0, the shell will check
                  before each prompt.

SunOS 5.10           Last change: 2 May 2008                    6

User Commands                                               sh(1)

     MAILPATH     A colon-separated list of file names.  If  this
                  parameter is set, the shell informs the user of
                  the arrival of mail in  any  of  the  specified
                  files.  Each file name can be followed by % and
                  a message that will be printed when the modifi-
                  cation  time  changes.  The default message is,
                  you have mail.

     PS1          Primary prompt string, by default " $ ".

     PS2          Secondary prompt string, by default " > ".

     IFS          Internal field separators, normally space, tab,
                  and newline (see Blank Interpretation section).

     SHACCT       If this parameter is set to the name of a  file
                  writable  by  the user, the shell will write an
                  accounting record in the file  for  each  shell
                  procedure executed.

     SHELL        When  the  shell  is  invoked,  it  scans   the
                  environment (see Environment section below) for
                  this name.

     See environ(5) for descriptions of the following environment
     variables  that  affect  the  execution  of sh: LC_CTYPE and
     LC_MESSAGES.

     The shell gives default values to PATH, PS1, PS2, MAILCHECK,
     and  IFS.  Default  values  for  HOME  and  MAIL  are set by
     login(1).

--More--(27%)  Blank Interpretation
     After parameter and command  substitution,  the  results  of
     substitution  are scanned for internal field separator char-
     acters (those found in IFS) and split  into  distinct  argu-
     ments  where  such characters are found. Explicit null argu-
     ments ("" or  '')  are  retained.  Implicit  null  arguments
     (those  resulting  from  parameters that have no values) are
     removed.

  Input/Output Redirection
     A command's input and output may be redirected using a  spe-
     cial  notation  interpreted  by the shell. The following may

SunOS 5.10           Last change: 2 May 2008                    7

User Commands                                               sh(1)

     appear anywhere in a simple-command or may precede or follow
     a  command and are not passed on as arguments to the invoked
     command. Note: Parameter  and  command  substitution  occurs
     before word or digit is used.

     <word           Use  file  word  as  standard  input   (file
                     descriptor 0).

     >word           Use  file  word  as  standard  output  (file
                     descriptor  1).  If the file does not exist,
                     it is created; otherwise, it is truncated to
                     zero length.

     >>word          Use file word as  standard  output.  If  the
                     file  exists,  output  is  appended to it by
                     first seeking to  the  EOF.  Otherwise,  the
                     file is created.

     <>word          Open file word for reading  and  writing  as
                     standard input.

     <<[-]word       After parameter and command substitution  is
                     done  on word, the shell input is read up to
                     the first line that  literally  matches  the
                     resulting  word,  or to an EOF. If, however,
                     the hyphen (-) is appended to <<:

                         1.   leading tabs are stripped from word
                              before the shell input is read (but
                              after parameter and command substi-
                              tution is done on word);
--More--(31%)
                         2.   leading tabs are stripped from  the
                              shell  input  as  it  is  read  and
                              before each line is  compared  with
                              word; and

                         3.   shell input is read up to the first
                              line  that  literally  matches  the
                              resulting word, or to an EOF.
                     If any character  of  word  is  quoted  (see
                     Quoting  section  later), no additional pro-
                     cessing is done to the shell  input.  If  no
                     characters of word are quoted:

                         1.   parameter and command  substitution
                              occurs;

SunOS 5.10           Last change: 2 May 2008                    8

User Commands                                               sh(1)

                         2.   (escaped)  \newlines  are  removed;
                              and

                         3.   \ must be used to quote the charac-
                              ters \, $, and `.
                     The resulting document becomes the  standard
                     input.

     <&digit         Use the file associated with file descriptor
                     digit  as  standard input. Similarly for the
                     standard output using >&digit.

     <&-             The standard input is closed. Similarly  for
                     the standard output using >&-.

     If any of the  above  is  preceded  by  a  digit,  the  file
     descriptor  which  will  be associated with the file is that
     specified by the digit (instead of the default 0 or 1).  For
     example:

       ... 2>&1

     associates file descriptor 2 with the file currently associ-
     ated with file descriptor 1.

     The order in which redirections are  specified  is  signifi-
     cant.  The  shell  evaluates redirections left-to-right. For
--More--(34%)     example:

       ... 1>xxx 2>&1

     first associates file descriptor 1 with file xxx. It associ-
     ates  file  descriptor  2 with the file associated with file
     descriptor 1 (that is, xxx). If the  order  of  redirections
     were  reversed,  file  descriptor 2 would be associated with
     the terminal (assuming file descriptor 1 had been) and  file
     descriptor 1 would be associated with file xxx.

     Using the terminology introduced on the  first  page,  under
     Commands,  if  a  command  is  composed  of  several  simple

SunOS 5.10           Last change: 2 May 2008                    9

User Commands                                               sh(1)

     commands, redirection will be evaluated for the entire  com-
     mand  before  it  is evaluated for each simple command. That
     is, the shell evaluates redirection  for  the  entire  list,
     then each pipeline within the list, then each command within
     each pipeline, then each list within each command.

     If a command is followed by &, the  default  standard  input
     for the command is the empty file, /dev/null. Otherwise, the
     environment for the execution of a command contains the file
     descriptors   of   the   invoking   shell   as  modified  by
     input/output specifications.

  File Name Generation
     Before a command is executed, each command word  is  scanned
     for  the  characters *, ?, and [. If one of these characters
     appears the word is regarded  as  a  pattern.  The  word  is
     replaced  with  alphabetically  sorted file names that match
     the pattern. If no file name is found that matches the  pat-
     tern,  the  word  is  left unchanged. The character . at the
     start of a file name or immediately following a /,  as  well
     as the character / itself, must be matched explicitly.

     *            Matches any string, including the null string.

     ?            Matches any single character.

     [...]        Matches any one of the enclosed  characters.  A
                  pair  of  characters separated by - matches any
                  character   lexically   between    the    pair,
                  inclusive. If the first character following the
--More--(39%)                  opening [ is a !, any character not enclosed is
                  matched.

     Notice that  all  quoted  characters  (see  below)  must  be
     matched explicitly in a filename.

  Quoting
     The following characters have a special meaning to the shell
     and cause termination of a word unless quoted:

     ;  &  (  )  |  ^  <  >  newline  space  tab

     A character may be  quoted  (that  is,  made  to  stand  for
     itself) by preceding it with a backslash (\) or inserting it
     between a pair of quote marks ('' or ""). During processing,

SunOS 5.10           Last change: 2 May 2008                   10

User Commands                                               sh(1)

     the  shell may quote certain characters to prevent them from
     taking on a special meaning. Backslashes  used  to  quote  a
     single  character  are removed from the word before the com-
     mand is executed. The pair \newline is removed from  a  word
     before command and parameter substitution.

     All characters enclosed between a pair of single quote marks
     (''),  except  a  single  quote,  are  quoted  by the shell.
     Backslash has no special meaning inside  a  pair  of  single
     quotes. A single quote may be quoted inside a pair of double
     quote marks (for example, "'"), but a single quote  can  not
     be quoted inside a pair of single quotes.

     Inside a pair of double quote marks (""), parameter and com-
     mand substitution occurs and the shell quotes the results to
     avoid blank interpretation and file name generation.  If  $*
     is within a pair of double quotes, the positional parameters
     are substituted and quoted, separated by quoted spaces  ("$1
     $2  ..."). However, if $@ is within a pair of double quotes,
     the  positional  parameters  are  substituted  and   quoted,
     separated  by unquoted spaces ("$1""$2"  ... ). \ quotes the
     characters \, `, , (comma), and  $.  The  pair  \newline  is
     removed  before  parameter  and  command  substitution. If a
     backslash precedes characters other than \, `, , (comma), $,
     and  newline,  then  the  backslash  itself is quoted by the
     shell.

  Prompting
--More--(42%)     When used interactively, the shell prompts with the value of
     PS1  before  reading  a command. If at any time a newline is
     typed and further input is needed to complete a command, the
     secondary prompt (that is, the value of PS2) is issued.

  Environment
     The environment (see environ(5)) is  a  list  of  name-value
     pairs  that is passed to an executed program in the same way
     as a normal argument list.  The  shell  interacts  with  the
     environment  in several ways. On invocation, the shell scans
     the environment and creates a parameter for each name found,
     giving  it the corresponding value. If the user modifies the
     value of any of these parameters or creates new  parameters,
     none of these affects the environment unless the export com-
     mand is used to bind the shell's parameter to  the  environ-
     ment  (see also set -a). A parameter may be removed from the
     environment with the unset command. The environment seen  by
     any  executed  command  is  thus  composed of any unmodified
     name-value pairs originally inherited by  the  shell,  minus
     any  pairs removed by unset, plus any modifications or addi-
     tions, all of which must be noted in export commands.

SunOS 5.10           Last change: 2 May 2008                   11

User Commands                                               sh(1)

     The environment for any simple-command may be  augmented  by
     prefixing  it  with  one  or more assignments to parameters.
     Thus:

       TERM=450  command

     and

       (export TERM; TERM=450;   command

     are equivalent as far as the execution of  command  is  con-
     cerned  if command is not a Special Command. If command is a
     Special Command, then

       TERM=450   command

     will modify the TERM variable in the current shell.

     If the -k flag is set, all keyword arguments are  placed  in
     the  environment, even if they occur after the command name.
     The following example first prints a=b c and c:

--More--(46%)       echo a=b  c

       a=b  c

       set  -k

       echo a=b  c

       c

  Signals
     The INTERRUPT and QUIT signals for an  invoked  command  are
     ignored  if the command is followed by &. Otherwise, signals
     have the values inherited by the shell from its parent, with
     the  exception  of  signal 11 (but see also the trap command
     below).

SunOS 5.10           Last change: 2 May 2008                   12

User Commands                                               sh(1)

  Execution
     Each time a command is executed, the  command  substitution,
     parameter  substitution,  blank interpretation, input/output
     redirection, and filename generation listed above  are  car-
     ried  out. If the command name matches the name of a defined
     function, the function is  executed  in  the  shell  process
     (note  how  this  differs from the execution of shell script
     files, which require a sub-shell  for  invocation).  If  the
     command  name does not match the name of a defined function,
     but matches one of the Special Commands listed below, it  is
     executed in the shell process.

     The positional parameters $1, $2, ... are set to  the  argu-
     ments of the function. If the command name matches neither a
     Special Command nor the name of a defined  function,  a  new
     process  is  created  and  an attempt is made to execute the
     command via exec(2).

     The shell parameter PATH defines the  search  path  for  the
     directory  containing  the  command.  Alternative  directory
     names are separated by a colon  (:).  The  default  path  is
     /usr/bin.  The current directory is specified by a null path
     name, which can appear immediately  after  the  equal  sign,
     between  two  colon delimiters anywhere in the path list, or
     at the end of the path list. If the command name contains  a
     /  the search path is not used. Otherwise, each directory in
     the path is searched for an executable file.   If  the  file
--More--(49%)     has  execute  permission  but  is  not  an a.out file, it is
     assumed to be a file containing shell commands. A  sub-shell
     is  spawned to read it. A parenthesized command is also exe-
     cuted in a sub-shell.

     The location in the search path where a command was found is
     remembered  by  the  shell  (to help avoid unnecessary execs
     later). If the command was found in  a  relative  directory,
     its  location  must  be  re-determined  whenever the current
     directory changes. The shell forgets  all  remembered  loca-
     tions  whenever  the PATH variable is changed or the hash -r
     command is executed (see below).

  Special Commands
     Input/output redirection is now  permitted  for  these  com-
     mands.  File  descriptor  1  is the default output location.
     When Job Control is enabled, additional Special Commands are
     added  to  the  shell's environment (see Job Control section
     below).

     :

SunOS 5.10           Last change: 2 May 2008                   13

User Commands                                               sh(1)

         No effect; the command does nothing. A zero exit code is
         returned.

     . filename

         Read and execute commands from filename and return.  The
         search path specified by PATH is used to find the direc-
         tory containing filename.

     bg [%jobid ...]

         When Job Control is enabled, the bg command is added  to
         the  user's  environment to manipulate jobs. Resumes the
         execution of a stopped job in the background. If  %jobid
         is  omitted the current job is assumed. (See Job Control
         section below for more detail.)

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

--More--(53%)     cd [ argument ]

         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
         name  of  a  shell variable whose value starts with a /,
         change to the directory named by that value.

SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]

         The arguments are read as input to  the  shell  and  the
         resulting command(s) executed.

     exec [ argument ... ]

--More--(56%)         The command specified by the arguments  is  executed  in
         place  of  this  shell  without  creating a new process.
         Input/output arguments may appear and, if no other argu-
         ments  are  given,  cause  the  shell input/output to be
         modified.

     exit [ n ]

         Causes the calling shell or shell script  to  exit  with
         the exit status specified by n. If n is omitted the exit
         status is that of the last command executed (an EOF will
         also cause the shell to exit.)

     export [ name ... ]

         The given names are marked for automatic export  to  the
         environment  of  subsequently  executed  commands. If no
         arguments are  given,  variable  names  that  have  been
         marked  for  export during the current shell's execution
         are listed.  (Variable  names  exported  from  a  parent
         shell  are  listed only if they have been exported again
         during the current shell's  execution.)  Function  names
         are not exported.

     fg [%jobid ...]

         When Job Control is enabled, the fg command is added  to

SunOS 5.10           Last change: 2 May 2008                   15

User Commands                                               sh(1)

         the  user's environment to manipulate jobs. This command
         resumes the execution of a stopped job in the foreground
         and  also  moves  an  executing  background job into the
         foreground. If %jobid is omitted,  the  current  job  is
         assumed.   (See  Job  Control  section  below  for  more
         detail.)

     getopts

         Use in shell scripts to support command syntax standards
         (see  intro(1)).  This command parses positional parame-
         ters and checks for legal options.  See getoptcvt(1) for
         usage and description.

     hash [ -r ] [ name ... ]

--More--(60%)
...back 1 page

SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]

         The arguments are read as input to  the  shell  and  the
         resulting command(s) executed.

     exec [ argument ... ]

         The command specified by the arguments  is  executed  in
         place  of  this  shell  without  creating a new process.
         Input/output arguments may appear and, if no other argu-
         ments  are  given,  cause  the  shell input/output to be
         modified.

     exit [ n ]

         Causes the calling shell or shell script  to  exit  with
         the exit status specified by n. If n is omitted the exit
         status is that of the last command executed (an EOF will
         also cause the shell to exit.)

     export [ name ... ]

         The given names are marked for automatic export  to  the
         environment  of  subsequently  executed  commands. If no
         arguments are  given,  variable  names  that  have  been
         marked  for  export during the current shell's execution
         are listed.  (Variable  names  exported  from  a  parent
         shell  are  listed only if they have been exported again
         during the current shell's  execution.)  Function  names
         are not exported.

     fg [%jobid ...]

--More--(58%)
...back 1 page

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

     cd [ argument ]

         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
         name  of  a  shell variable whose value starts with a /,
         change to the directory named by that value.

SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]

         The arguments are read as input to  the  shell  and  the
--More--(56%)
...back 1 page


SunOS 5.10           Last change: 2 May 2008                   13

User Commands                                               sh(1)

         No effect; the command does nothing. A zero exit code is
         returned.

     . filename

         Read and execute commands from filename and return.  The
         search path specified by PATH is used to find the direc-
         tory containing filename.

     bg [%jobid ...]

         When Job Control is enabled, the bg command is added  to
         the  user's  environment to manipulate jobs. Resumes the
         execution of a stopped job in the background. If  %jobid
         is  omitted the current job is assumed. (See Job Control
         section below for more detail.)

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

     cd [ argument ]

         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
--More--(55%)
...back 1 page


     The shell parameter PATH defines the  search  path  for  the
     directory  containing  the  command.  Alternative  directory
     names are separated by a colon  (:).  The  default  path  is
     /usr/bin.  The current directory is specified by a null path
     name, which can appear immediately  after  the  equal  sign,
     between  two  colon delimiters anywhere in the path list, or
     at the end of the path list. If the command name contains  a
     /  the search path is not used. Otherwise, each directory in
     the path is searched for an executable file.   If  the  file
     has  execute  permission  but  is  not  an a.out file, it is
     assumed to be a file containing shell commands. A  sub-shell
     is  spawned to read it. A parenthesized command is also exe-
     cuted in a sub-shell.

     The location in the search path where a command was found is
     remembered  by  the  shell  (to help avoid unnecessary execs
     later). If the command was found in  a  relative  directory,
     its  location  must  be  re-determined  whenever the current
     directory changes. The shell forgets  all  remembered  loca-
     tions  whenever  the PATH variable is changed or the hash -r
     command is executed (see below).

  Special Commands
     Input/output redirection is now  permitted  for  these  com-
     mands.  File  descriptor  1  is the default output location.
     When Job Control is enabled, additional Special Commands are
     added  to  the  shell's environment (see Job Control section
     below).

     :

SunOS 5.10           Last change: 2 May 2008                   13

User Commands                                               sh(1)

         No effect; the command does nothing. A zero exit code is
         returned.

     . filename

         Read and execute commands from filename and return.  The
         search path specified by PATH is used to find the direc-
         tory containing filename.

     bg [%jobid ...]

         When Job Control is enabled, the bg command is added  to
         the  user's  environment to manipulate jobs. Resumes the
--More--(52%)
...back 1 page


SunOS 5.10           Last change: 2 May 2008                   12

User Commands                                               sh(1)

  Execution
     Each time a command is executed, the  command  substitution,
     parameter  substitution,  blank interpretation, input/output
     redirection, and filename generation listed above  are  car-
     ried  out. If the command name matches the name of a defined
     function, the function is  executed  in  the  shell  process
     (note  how  this  differs from the execution of shell script
     files, which require a sub-shell  for  invocation).  If  the
     command  name does not match the name of a defined function,
     but matches one of the Special Commands listed below, it  is
     executed in the shell process.

     The positional parameters $1, $2, ... are set to  the  argu-
     ments of the function. If the command name matches neither a
     Special Command nor the name of a defined  function,  a  new
     process  is  created  and  an attempt is made to execute the
     command via exec(2).

     The shell parameter PATH defines the  search  path  for  the
     directory  containing  the  command.  Alternative  directory
     names are separated by a colon  (:).  The  default  path  is
     /usr/bin.  The current directory is specified by a null path
     name, which can appear immediately  after  the  equal  sign,
     between  two  colon delimiters anywhere in the path list, or
     at the end of the path list. If the command name contains  a
     /  the search path is not used. Otherwise, each directory in
     the path is searched for an executable file.   If  the  file
     has  execute  permission  but  is  not  an a.out file, it is
     assumed to be a file containing shell commands. A  sub-shell
     is  spawned to read it. A parenthesized command is also exe-
     cuted in a sub-shell.

     The location in the search path where a command was found is
     remembered  by  the  shell  (to help avoid unnecessary execs
     later). If the command was found in  a  relative  directory,
     its  location  must  be  re-determined  whenever the current
     directory changes. The shell forgets  all  remembered  loca-
     tions  whenever  the PATH variable is changed or the hash -r
     command is executed (see below).

  Special Commands
     Input/output redirection is now  permitted  for  these  com-
     mands.  File  descriptor  1  is the default output location.
     When Job Control is enabled, additional Special Commands are
--More--(51%)
...back 1 page

     are equivalent as far as the execution of  command  is  con-
     cerned  if command is not a Special Command. If command is a
     Special Command, then

       TERM=450   command

     will modify the TERM variable in the current shell.

     If the -k flag is set, all keyword arguments are  placed  in
     the  environment, even if they occur after the command name.
     The following example first prints a=b c and c:

       echo a=b  c

       a=b  c

       set  -k

       echo a=b  c

       c

  Signals
     The INTERRUPT and QUIT signals for an  invoked  command  are
     ignored  if the command is followed by &. Otherwise, signals
     have the values inherited by the shell from its parent, with
     the  exception  of  signal 11 (but see also the trap command
     below).

SunOS 5.10           Last change: 2 May 2008                   12

User Commands                                               sh(1)

  Execution
     Each time a command is executed, the  command  substitution,
     parameter  substitution,  blank interpretation, input/output
     redirection, and filename generation listed above  are  car-
     ried  out. If the command name matches the name of a defined
     function, the function is  executed  in  the  shell  process
     (note  how  this  differs from the execution of shell script
     files, which require a sub-shell  for  invocation).  If  the
     command  name does not match the name of a defined function,
     but matches one of the Special Commands listed below, it  is
     executed in the shell process.

     The positional parameters $1, $2, ... are set to  the  argu-
     ments of the function. If the command name matches neither a
     Special Command nor the name of a defined  function,  a  new
     process  is  created  and  an attempt is made to execute the
--More--(48%)
...back 1 page


SunOS 5.10           Last change: 2 May 2008                   11

User Commands                                               sh(1)

     The environment for any simple-command may be  augmented  by
     prefixing  it  with  one  or more assignments to parameters.
     Thus:

       TERM=450  command

     and

       (export TERM; TERM=450;   command

     are equivalent as far as the execution of  command  is  con-
     cerned  if command is not a Special Command. If command is a
     Special Command, then

       TERM=450   command

     will modify the TERM variable in the current shell.

     If the -k flag is set, all keyword arguments are  placed  in
     the  environment, even if they occur after the command name.
     The following example first prints a=b c and c:

       echo a=b  c

       a=b  c

       set  -k

       echo a=b  c

       c

  Signals
     The INTERRUPT and QUIT signals for an  invoked  command  are
     ignored  if the command is followed by &. Otherwise, signals
     have the values inherited by the shell from its parent, with
     the  exception  of  signal 11 (but see also the trap command
     below).

SunOS 5.10           Last change: 2 May 2008                   12

User Commands                                               sh(1)

  Execution
--More--(47%)
...back 1 page

     The environment (see environ(5)) is  a  list  of  name-value
     pairs  that is passed to an executed program in the same way
     as a normal argument list.  The  shell  interacts  with  the
     environment  in several ways. On invocation, the shell scans
     the environment and creates a parameter for each name found,
     giving  it the corresponding value. If the user modifies the
     value of any of these parameters or creates new  parameters,
     none of these affects the environment unless the export com-
     mand is used to bind the shell's parameter to  the  environ-
     ment  (see also set -a). A parameter may be removed from the
     environment with the unset command. The environment seen  by
     any  executed  command  is  thus  composed of any unmodified
     name-value pairs originally inherited by  the  shell,  minus
     any  pairs removed by unset, plus any modifications or addi-
     tions, all of which must be noted in export commands.

SunOS 5.10           Last change: 2 May 2008                   11

User Commands                                               sh(1)

     The environment for any simple-command may be  augmented  by
     prefixing  it  with  one  or more assignments to parameters.
     Thus:

       TERM=450  command

     and

       (export TERM; TERM=450;   command

     are equivalent as far as the execution of  command  is  con-
     cerned  if command is not a Special Command. If command is a
     Special Command, then

       TERM=450   command

     will modify the TERM variable in the current shell.

     If the -k flag is set, all keyword arguments are  placed  in
     the  environment, even if they occur after the command name.
     The following example first prints a=b c and c:

       echo a=b  c

       a=b  c

       set  -k

       echo a=b  c
--More--(46%)
...back 1 page

     (''),  except  a  single  quote,  are  quoted  by the shell.
     Backslash has no special meaning inside  a  pair  of  single
     quotes. A single quote may be quoted inside a pair of double
     quote marks (for example, "'"), but a single quote  can  not
     be quoted inside a pair of single quotes.

     Inside a pair of double quote marks (""), parameter and com-
     mand substitution occurs and the shell quotes the results to
     avoid blank interpretation and file name generation.  If  $*
     is within a pair of double quotes, the positional parameters
     are substituted and quoted, separated by quoted spaces  ("$1
     $2  ..."). However, if $@ is within a pair of double quotes,
     the  positional  parameters  are  substituted  and   quoted,
     separated  by unquoted spaces ("$1""$2"  ... ). \ quotes the
     characters \, `, , (comma), and  $.  The  pair  \newline  is
     removed  before  parameter  and  command  substitution. If a
     backslash precedes characters other than \, `, , (comma), $,
     and  newline,  then  the  backslash  itself is quoted by the
     shell.

  Prompting
     When used interactively, the shell prompts with the value of
     PS1  before  reading  a command. If at any time a newline is
     typed and further input is needed to complete a command, the
     secondary prompt (that is, the value of PS2) is issued.

  Environment
     The environment (see environ(5)) is  a  list  of  name-value
     pairs  that is passed to an executed program in the same way
     as a normal argument list.  The  shell  interacts  with  the
     environment  in several ways. On invocation, the shell scans
     the environment and creates a parameter for each name found,
     giving  it the corresponding value. If the user modifies the
     value of any of these parameters or creates new  parameters,
     none of these affects the environment unless the export com-
     mand is used to bind the shell's parameter to  the  environ-
     ment  (see also set -a). A parameter may be removed from the
     environment with the unset command. The environment seen  by
     any  executed  command  is  thus  composed of any unmodified
     name-value pairs originally inherited by  the  shell,  minus
     any  pairs removed by unset, plus any modifications or addi-
     tions, all of which must be noted in export commands.

SunOS 5.10           Last change: 2 May 2008                   11

User Commands                                               sh(1)

     The environment for any simple-command may be  augmented  by
     prefixing  it  with  one  or more assignments to parameters.
--More--(45%)
...back 1 page


     Notice that  all  quoted  characters  (see  below)  must  be
     matched explicitly in a filename.

  Quoting
     The following characters have a special meaning to the shell
     and cause termination of a word unless quoted:

     ;  &  (  )  |  ^  <  >  newline  space  tab

     A character may be  quoted  (that  is,  made  to  stand  for
     itself) by preceding it with a backslash (\) or inserting it
     between a pair of quote marks ('' or ""). During processing,

SunOS 5.10           Last change: 2 May 2008                   10

User Commands                                               sh(1)

     the  shell may quote certain characters to prevent them from
     taking on a special meaning. Backslashes  used  to  quote  a
     single  character  are removed from the word before the com-
     mand is executed. The pair \newline is removed from  a  word
     before command and parameter substitution.

     All characters enclosed between a pair of single quote marks
     (''),  except  a  single  quote,  are  quoted  by the shell.
     Backslash has no special meaning inside  a  pair  of  single
     quotes. A single quote may be quoted inside a pair of double
     quote marks (for example, "'"), but a single quote  can  not
     be quoted inside a pair of single quotes.

     Inside a pair of double quote marks (""), parameter and com-
     mand substitution occurs and the shell quotes the results to
     avoid blank interpretation and file name generation.  If  $*
     is within a pair of double quotes, the positional parameters
     are substituted and quoted, separated by quoted spaces  ("$1
     $2  ..."). However, if $@ is within a pair of double quotes,
     the  positional  parameters  are  substituted  and   quoted,
     separated  by unquoted spaces ("$1""$2"  ... ). \ quotes the
     characters \, `, , (comma), and  $.  The  pair  \newline  is
     removed  before  parameter  and  command  substitution. If a
     backslash precedes characters other than \, `, , (comma), $,
     and  newline,  then  the  backslash  itself is quoted by the
     shell.

  Prompting
     When used interactively, the shell prompts with the value of
     PS1  before  reading  a command. If at any time a newline is
     typed and further input is needed to complete a command, the
--More--(43%)
...back 1 page

     is, the shell evaluates redirection  for  the  entire  list,
     then each pipeline within the list, then each command within
     each pipeline, then each list within each command.

     If a command is followed by &, the  default  standard  input
     for the command is the empty file, /dev/null. Otherwise, the
     environment for the execution of a command contains the file
     descriptors   of   the   invoking   shell   as  modified  by
     input/output specifications.

  File Name Generation
     Before a command is executed, each command word  is  scanned
     for  the  characters *, ?, and [. If one of these characters
     appears the word is regarded  as  a  pattern.  The  word  is
     replaced  with  alphabetically  sorted file names that match
     the pattern. If no file name is found that matches the  pat-
     tern,  the  word  is  left unchanged. The character . at the
     start of a file name or immediately following a /,  as  well
     as the character / itself, must be matched explicitly.

     *            Matches any string, including the null string.

     ?            Matches any single character.

     [...]        Matches any one of the enclosed  characters.  A
                  pair  of  characters separated by - matches any
                  character   lexically   between    the    pair,
                  inclusive. If the first character following the
                  opening [ is a !, any character not enclosed is
                  matched.

     Notice that  all  quoted  characters  (see  below)  must  be
     matched explicitly in a filename.

  Quoting
     The following characters have a special meaning to the shell
     and cause termination of a word unless quoted:

     ;  &  (  )  |  ^  <  >  newline  space  tab

     A character may be  quoted  (that  is,  made  to  stand  for
     itself) by preceding it with a backslash (\) or inserting it
     between a pair of quote marks ('' or ""). During processing,

SunOS 5.10           Last change: 2 May 2008                   10

User Commands                                               sh(1)

     the  shell may quote certain characters to prevent them from
--More--(40%)
...back 1 page


       ... 1>xxx 2>&1

     first associates file descriptor 1 with file xxx. It associ-
     ates  file  descriptor  2 with the file associated with file
     descriptor 1 (that is, xxx). If the  order  of  redirections
     were  reversed,  file  descriptor 2 would be associated with
     the terminal (assuming file descriptor 1 had been) and  file
     descriptor 1 would be associated with file xxx.

     Using the terminology introduced on the  first  page,  under
     Commands,  if  a  command  is  composed  of  several  simple

SunOS 5.10           Last change: 2 May 2008                    9

User Commands                                               sh(1)

     commands, redirection will be evaluated for the entire  com-
     mand  before  it  is evaluated for each simple command. That
     is, the shell evaluates redirection  for  the  entire  list,
     then each pipeline within the list, then each command within
     each pipeline, then each list within each command.

     If a command is followed by &, the  default  standard  input
     for the command is the empty file, /dev/null. Otherwise, the
     environment for the execution of a command contains the file
     descriptors   of   the   invoking   shell   as  modified  by
     input/output specifications.

  File Name Generation
     Before a command is executed, each command word  is  scanned
     for  the  characters *, ?, and [. If one of these characters
     appears the word is regarded  as  a  pattern.  The  word  is
     replaced  with  alphabetically  sorted file names that match
     the pattern. If no file name is found that matches the  pat-
     tern,  the  word  is  left unchanged. The character . at the
     start of a file name or immediately following a /,  as  well
     as the character / itself, must be matched explicitly.

     *            Matches any string, including the null string.

     ?            Matches any single character.

     [...]        Matches any one of the enclosed  characters.  A
                  pair  of  characters separated by - matches any
                  character   lexically   between    the    pair,
                  inclusive. If the first character following the
                  opening [ is a !, any character not enclosed is
                  matched.
--More--(39%)
     Notice that  all  quoted  characters  (see  below)  must  be
     matched explicitly in a filename.

  Quoting
     The following characters have a special meaning to the shell
     and cause termination of a word unless quoted:

     ;  &  (  )  |  ^  <  >  newline  space  tab

     A character may be  quoted  (that  is,  made  to  stand  for
     itself) by preceding it with a backslash (\) or inserting it
     between a pair of quote marks ('' or ""). During processing,

SunOS 5.10           Last change: 2 May 2008                   10

User Commands                                               sh(1)

     the  shell may quote certain characters to prevent them from
     taking on a special meaning. Backslashes  used  to  quote  a
     single  character  are removed from the word before the com-
     mand is executed. The pair \newline is removed from  a  word
     before command and parameter substitution.

     All characters enclosed between a pair of single quote marks
     (''),  except  a  single  quote,  are  quoted  by the shell.
     Backslash has no special meaning inside  a  pair  of  single
     quotes. A single quote may be quoted inside a pair of double
     quote marks (for example, "'"), but a single quote  can  not
     be quoted inside a pair of single quotes.

     Inside a pair of double quote marks (""), parameter and com-
     mand substitution occurs and the shell quotes the results to
     avoid blank interpretation and file name generation.  If  $*
     is within a pair of double quotes, the positional parameters
     are substituted and quoted, separated by quoted spaces  ("$1
     $2  ..."). However, if $@ is within a pair of double quotes,
     the  positional  parameters  are  substituted  and   quoted,
     separated  by unquoted spaces ("$1""$2"  ... ). \ quotes the
     characters \, `, , (comma), and  $.  The  pair  \newline  is
     removed  before  parameter  and  command  substitution. If a
     backslash precedes characters other than \, `, , (comma), $,
     and  newline,  then  the  backslash  itself is quoted by the
     shell.

  Prompting
     When used interactively, the shell prompts with the value of
     PS1  before  reading  a command. If at any time a newline is
--More--(43%)     typed and further input is needed to complete a command, the
     secondary prompt (that is, the value of PS2) is issued.

  Environment
     The environment (see environ(5)) is  a  list  of  name-value
     pairs  that is passed to an executed program in the same way
     as a normal argument list.  The  shell  interacts  with  the
     environment  in several ways. On invocation, the shell scans
     the environment and creates a parameter for each name found,
     giving  it the corresponding value. If the user modifies the
     value of any of these parameters or creates new  parameters,
     none of these affects the environment unless the export com-
     mand is used to bind the shell's parameter to  the  environ-
     ment  (see also set -a). A parameter may be removed from the
     environment with the unset command. The environment seen  by
     any  executed  command  is  thus  composed of any unmodified
     name-value pairs originally inherited by  the  shell,  minus
     any  pairs removed by unset, plus any modifications or addi-
     tions, all of which must be noted in export commands.

SunOS 5.10           Last change: 2 May 2008                   11

User Commands                                               sh(1)

     The environment for any simple-command may be  augmented  by
     prefixing  it  with  one  or more assignments to parameters.
     Thus:

       TERM=450  command

     and

       (export TERM; TERM=450;   command

     are equivalent as far as the execution of  command  is  con-
     cerned  if command is not a Special Command. If command is a
     Special Command, then

       TERM=450   command

     will modify the TERM variable in the current shell.

     If the -k flag is set, all keyword arguments are  placed  in
     the  environment, even if they occur after the command name.
     The following example first prints a=b c and c:

       echo a=b  c

--More--(46%)       a=b  c

       set  -k

       echo a=b  c

       c

  Signals
     The INTERRUPT and QUIT signals for an  invoked  command  are
     ignored  if the command is followed by &. Otherwise, signals
     have the values inherited by the shell from its parent, with
     the  exception  of  signal 11 (but see also the trap command
     below).

SunOS 5.10           Last change: 2 May 2008                   12

User Commands                                               sh(1)

  Execution
     Each time a command is executed, the  command  substitution,
     parameter  substitution,  blank interpretation, input/output
     redirection, and filename generation listed above  are  car-
     ried  out. If the command name matches the name of a defined
     function, the function is  executed  in  the  shell  process
     (note  how  this  differs from the execution of shell script
     files, which require a sub-shell  for  invocation).  If  the
     command  name does not match the name of a defined function,
     but matches one of the Special Commands listed below, it  is
     executed in the shell process.

     The positional parameters $1, $2, ... are set to  the  argu-
     ments of the function. If the command name matches neither a
     Special Command nor the name of a defined  function,  a  new
     process  is  created  and  an attempt is made to execute the
     command via exec(2).

     The shell parameter PATH defines the  search  path  for  the
     directory  containing  the  command.  Alternative  directory
     names are separated by a colon  (:).  The  default  path  is
     /usr/bin.  The current directory is specified by a null path
     name, which can appear immediately  after  the  equal  sign,
     between  two  colon delimiters anywhere in the path list, or
     at the end of the path list. If the command name contains  a
     /  the search path is not used. Otherwise, each directory in
     the path is searched for an executable file.   If  the  file
     has  execute  permission  but  is  not  an a.out file, it is
     assumed to be a file containing shell commands. A  sub-shell
--More--(50%)     is  spawned to read it. A parenthesized command is also exe-
     cuted in a sub-shell.

     The location in the search path where a command was found is
     remembered  by  the  shell  (to help avoid unnecessary execs
     later). If the command was found in  a  relative  directory,
     its  location  must  be  re-determined  whenever the current
     directory changes. The shell forgets  all  remembered  loca-
     tions  whenever  the PATH variable is changed or the hash -r
     command is executed (see below).

  Special Commands
     Input/output redirection is now  permitted  for  these  com-
     mands.  File  descriptor  1  is the default output location.
     When Job Control is enabled, additional Special Commands are
     added  to  the  shell's environment (see Job Control section
     below).

     :

SunOS 5.10           Last change: 2 May 2008                   13

User Commands                                               sh(1)

         No effect; the command does nothing. A zero exit code is
         returned.

     . filename

         Read and execute commands from filename and return.  The
         search path specified by PATH is used to find the direc-
         tory containing filename.

     bg [%jobid ...]

         When Job Control is enabled, the bg command is added  to
         the  user's  environment to manipulate jobs. Resumes the
         execution of a stopped job in the background. If  %jobid
         is  omitted the current job is assumed. (See Job Control
         section below for more detail.)

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

     cd [ argument ]

--More--(53%)         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
         name  of  a  shell variable whose value starts with a /,
         change to the directory named by that value.

SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]

         The arguments are read as input to  the  shell  and  the
         resulting command(s) executed.

     exec [ argument ... ]

         The command specified by the arguments  is  executed  in
         place  of  this  shell  without  creating a new process.
--More--(57%)
...back 1 page


User Commands                                               sh(1)

         No effect; the command does nothing. A zero exit code is
         returned.

     . filename

         Read and execute commands from filename and return.  The
         search path specified by PATH is used to find the direc-
         tory containing filename.

     bg [%jobid ...]

         When Job Control is enabled, the bg command is added  to
         the  user's  environment to manipulate jobs. Resumes the
         execution of a stopped job in the background. If  %jobid
         is  omitted the current job is assumed. (See Job Control
         section below for more detail.)

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

     cd [ argument ]

         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
         name  of  a  shell variable whose value starts with a /,
         change to the directory named by that value.
--More--(55%)
SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]

         The arguments are read as input to  the  shell  and  the
         resulting command(s) executed.

     exec [ argument ... ]

         The command specified by the arguments  is  executed  in
         place  of  this  shell  without  creating a new process.
         Input/output arguments may appear and, if no other argu-
         ments  are  given,  cause  the  shell input/output to be
         modified.

     exit [ n ]

         Causes the calling shell or shell script  to  exit  with
         the exit status specified by n. If n is omitted the exit
         status is that of the last command executed (an EOF will
         also cause the shell to exit.)

     export [ name ... ]

         The given names are marked for automatic export  to  the
         environment  of  subsequently  executed  commands. If no
         arguments are  given,  variable  names  that  have  been
         marked  for  export during the current shell's execution
         are listed.  (Variable  names  exported  from  a  parent
         shell  are  listed only if they have been exported again
         during the current shell's  execution.)  Function  names
         are not exported.

--More--(58%)
...back 1 page

         section below for more detail.)

     break [ n ]

         Exit from the enclosing for or while loop, if any. If  n
         is specified, break n levels.

     cd [ argument ]

         Change the current  directory  to  argument.  The  shell
         parameter HOME is the default argument. The shell param-
         eter CDPATH defines the search path  for  the  directory
         containing  argument.   Alternative  directory names are
         separated by a colon (:). The  default  path  is  <null>
         (specifying  the  current  directory). Note: The current
         directory is specified by a null path  name,  which  can
         appear  immediately  after the equal sign or between the
         colon delimiters anywhere else  in  the  path  list.  If
         argument  begins  with  a / the search path is not used.
         Otherwise, each directory in the path  is  searched  for
         argument.

     chdir [ dir ]

         chdir changes the shell's working directory to directory
         dir.  If no argument is given, change to the home direc-
         tory of the user. If dir  is  a  relative  pathname  not
         found  in  the  current directory, check for it in those
         directories listed in the CDPATH variable. If dir is the
         name  of  a  shell variable whose value starts with a /,
         change to the directory named by that value.

SunOS 5.10           Last change: 2 May 2008                   14

User Commands                                               sh(1)

     continue [ n ]

         Resume the next iteration of the enclosing for or  while
         loop.  If  n  is specified, resume at the n-th enclosing
         loop.

     echo [ arguments ... ]

         The words in arguments are written to the shell's  stan-
         dard  output, separated by space characters. See echo(1)
         for fuller usage and description.

     eval [ argument ... ]
--More--(56%)
         The arguments are read as input to  the  shell  and  the
         resulting command(s) executed.

     exec [ argument ... ]

         The command specified by the arguments  is  executed  in
         place  of  this  shell  without  creating a new process.
         Input/output arguments may appear and, if no other argu-
         ments  are  given,  cause  the  shell input/output to be
         modified.

     exit [ n ]

         Causes the calling shell or shell script  to  exit  with
         the exit status specified by n. If n is omitted the exit
         status is that of the last command executed (an EOF will
         also cause the shell to exit.)

     export [ name ... ]

         The given names are marked for automatic export  to  the
         environment  of  subsequently  executed  commands. If no
         arguments are  given,  variable  names  that  have  been
         marked  for  export during the current shell's execution
         are listed.  (Variable  names  exported  from  a  parent
         shell  are  listed only if they have been exported again
         during the current shell's  execution.)  Function  names
         are not exported.

     fg [%jobid ...]

         When Job Control is enabled, the fg command is added  to

SunOS 5.10           Last change: 2 May 2008                   15

User Commands                                               sh(1)

         the  user's environment to manipulate jobs. This command
         resumes the execution of a stopped job in the foreground
         and  also  moves  an  executing  background job into the
         foreground. If %jobid is omitted,  the  current  job  is
         assumed.   (See  Job  Control  section  below  for  more
         detail.)

     getopts

         Use in shell scripts to support command syntax standards
--More--(59%)         (see  intro(1)).  This command parses positional parame-
         ters and checks for legal options.  See getoptcvt(1) for
         usage and description.

     hash [ -r ] [ name ... ]

         For each name, the location in the search  path  of  the
         command  specified  by name is determined and remembered
         by the shell. The -r option causes the shell  to  forget
         all  remembered  locations.  If  no arguments are given,
         information about remembered commands is presented. Hits
         is the number of times a command has been invoked by the
         shell process. Cost is a measure of the work required to
         locate  a  command  in  the search path. If a command is
         found in a relative directory in the search path,  after
         changing  to that directory, the stored location of that
         command is recalculated. Commands for which this will be
         done  are  indicated  by an asterisk (*) adjacent to the
         hits information. Cost  will  be  incremented  when  the
         recalculation is done.

     jobs [-p|-l] [%jobid ...]
     jobs -x command [arguments]

         Reports all jobs that are stopped or  executing  in  the
         background.  If  %jobid  is  omitted,  all jobs that are
         stopped or running in the background will  be  reported.
         (See Job Control section below for more detail.)

     kill [ -sig ] %job ...
     kill -l

         Sends either the TERM (terminate) signal or  the  speci-
         fied  signal to the specified jobs or processes. Signals
         are either given by number or  by  names  (as  given  in
         signal.h(3HEAD)  stripped  of  the prefix "SIG" with the
         exception that SIGCHD is  named  CHLD).  If  the  signal
         being sent is TERM (terminate) or HUP (hangup), then the

SunOS 5.10           Last change: 2 May 2008                   16

User Commands                                               sh(1)

         job or process will be sent a CONT (continue) signal  if
         it is stopped. The argument job can be the process id of
         a process that is not a member  of  one  of  the  active
         jobs. See Job Control section below for a description of
         the format of job. In the second form, kill -l, the sig-
--More--(63%)         nal numbers and names are listed. (See kill(1)).

     login [ argument ... ]

         Equivalent to `exec login argument....' See login(1) for
         usage and description.

     newgrp [ argument ]

         Equivalent to exec newgrp argument.  See  newgrp(1)  for
         usage and description.

     pwd

         Print the current  working  directory.  See  pwd(1)  for
         usage and description.

     read name ...

         One line is read from the standard input and, using  the
         internal  field  separator, IFS (normally space or tab),
         to delimit word boundaries, the first word  is  assigned
         to  the  first name, the second word to the second name,
         and so forth, with leftover words assigned to  the  last
         name.  Lines can be continued using \newline. Characters
         other than newline can be quoted by preceding them  with
         a  backslash. These backslashes are removed before words
         are assigned to names, and no interpretation is done  on
         the  character  that  follows  the backslash. The return
         code is 0, unless an EOF is encountered.

     readonly [ name ... ]

         The given names are marked readonly and  the  values  of
         the these names may not be changed by subsequent assign-
         ment. If no arguments are given, a list of all  readonly
         names is printed.

     return [ n ]

         Causes  a  function  to  exit  with  the  return   value

SunOS 5.10           Last change: 2 May 2008                   17

User Commands                                               sh(1)

         specified  by  n.  If n is omitted, the return status is
         that of the last command executed.
--More--(67%)
     set [ -aefhkntuvx [ argument ... ] ]

         -a    Mark variables which are modified or  created  for
               export.

         -e    Exit immediately if a command exits  with  a  non-
               zero exit status.

         -f    Disable file name generation.

         -h    Locate and remember function commands as functions
               are   defined   (function  commands  are  normally
               located when the function is executed).

         -k    All keyword arguments are placed in  the  environ-
               ment  for  a  command, not just those that precede
               the command name.

         -n    Read commands but do not execute them.

         -t    Exit after reading and executing one command.

         -u    Treat unset variables as an error when  substitut-
               ing.

         -v    Print shell input lines as they are read.

         -x    Print commands and their  arguments  as  they  are
               executed.

         -     Do not change any of the flags; useful in  setting
               $1 to -.

         Using + rather than - causes these flags  to  be  turned
         off. These flags can also be used upon invocation of the
         shell. The current set of flags may be found in $-.  The
         remaining  arguments  are  positional parameters and are

SunOS 5.10           Last change: 2 May 2008                   18

User Commands                                               sh(1)

         assigned, in order, to $1, $2, ... If no  arguments  are
         given, the values of all names are printed.

     shift [ n ]

--More--(69%)
...back 1 page

     readonly [ name ... ]

         The given names are marked readonly and  the  values  of
         the these names may not be changed by subsequent assign-
         ment. If no arguments are given, a list of all  readonly
         names is printed.

     return [ n ]

         Causes  a  function  to  exit  with  the  return   value

SunOS 5.10           Last change: 2 May 2008                   17

User Commands                                               sh(1)

         specified  by  n.  If n is omitted, the return status is
         that of the last command executed.

     set [ -aefhkntuvx [ argument ... ] ]

         -a    Mark variables which are modified or  created  for
               export.

         -e    Exit immediately if a command exits  with  a  non-
               zero exit status.

         -f    Disable file name generation.

         -h    Locate and remember function commands as functions
               are   defined   (function  commands  are  normally
               located when the function is executed).

         -k    All keyword arguments are placed in  the  environ-
               ment  for  a  command, not just those that precede
               the command name.

         -n    Read commands but do not execute them.

         -t    Exit after reading and executing one command.

         -u    Treat unset variables as an error when  substitut-
               ing.

         -v    Print shell input lines as they are read.

         -x    Print commands and their  arguments  as  they  are
               executed.

         -     Do not change any of the flags; useful in  setting
--More--(68%)               $1 to -.
--More--(69%)
--More--(69%)         Using + rather than - causes these flags  to  be  turned
--More--(69%)         off. These flags can also be used upon invocation of the
--More--(69%)         shell. The current set of flags may be found in $-.  The
--More--(69%)         remaining  arguments  are  positional parameters and are
--More--(69%)
--More--(69%)SunOS 5.10           Last change: 2 May 2008                   18
--More--(69%)
--More--(69%)User Commands                                               sh(1)
--More--(69%)
--More--(69%)         assigned, in order, to $1, $2, ... If no  arguments  are
         given, the values of all names are printed.

     shift [ n ]

         The positional parameters from $n+1 ... are  renamed  $1
         ... . If n is not given, it is assumed to be 1.

     stop pid ...

         Halt execution of the process number pid. (see ps(1)).

     suspend

         Stops the execution of the current shell (but not if  it
         is the login shell).

     test

         Evaluate conditional expressions. See test(1) for  usage
         and description.

     times

         Print  the  accumulated  user  and  system   times   for
         processes run from the shell.

     trap [ argument n [ n2 ... ]]

         The command argument is to be read and executed when the
         shell receives numeric or symbolic signal(s) (n). (Note:
         argument is scanned once when the trap is set  and  once
         when  the  trap is taken.) Trap commands are executed in
         order of signal number or corresponding symbolic  names.
         Any  attempt  to set a trap on a signal that was ignored
         on entry to the current shell is ineffective. An attempt
         to  trap  on signal 11 (memory fault) produces an error.
         If argument is absent, all trap(s) n are reset to  their
         original  values.  If  argument is the null string, this
         signal is ignored by the shell and by  the  commands  it
         invokes.  If n is 0, the command argument is executed on
         exit from the shell. The trap command with no  arguments
         prints  a  list  of commands associated with each signal
         number.

SunOS 5.10           Last change: 2 May 2008                   19

User Commands                                               sh(1)
--More--(72%)
     type [ name ... ]

         For each name, indicate how it would be  interpreted  if
         used as a command name.

     ulimit [ [-HS] [-a | -cdfnstv] ]
     ulimit [ [-HS] [-c | -d | -f | -n | -s | -t | -v] ] limit

         ulimit prints or sets  hard  or  soft  resource  limits.
         These limits are described in getrlimit(2).

         If limit is not present,  ulimit  prints  the  specified
         limits. Any number of limits may be printed at one time.
         The -a option prints all limits.

         If limit is present, ulimit sets the specified limit  to
         limit.  The  string unlimited requests the largest valid
         limit. Limits may be set for  only  one  resource  at  a
         time.  Any  user may set a soft limit to any value below
         the hard limit. Any user may lower a hard limit. Only  a
         super-user may raise a hard limit. (See su(1M).)

         The -H option specifies a  hard  limit.  The  -S  option
         specifies  a soft limit. If neither option is specified,
         ulimit will set both limits and print the soft limit.

         The following options specify the resource whose  limits
         are to be printed or set. If no option is specified, the
         file size limit is printed or set.

         -c    maximum core file size (in 512-byte blocks)

         -d    maximum size of data segment or heap (in kbytes)

         -f    maximum file size (in 512-byte blocks)

         -n    maximum file descriptor plus 1

         -s    maximum size of stack segment (in kbytes)

         -t    maximum CPU time (in seconds)

         -v    maximum size of virtual memory (in kbytes)

         Run  the  sysdef(1M)  command  to  obtain  the   maximum

SunOS 5.10           Last change: 2 May 2008                   20
--More--(76%)
User Commands                                               sh(1)

         possible  limits  for  your system.  The values reported
         are in hexadecimal, but can be translated  into  decimal
         numbers using the bc(1) utility.  See swap(1M).)

         As an example of ulimit, to limit the  size  of  a  core
         file dump to 0 Megabytes, type the following:

           ulimit -c 0

     umask [ nnn ]

         The  user  file-creation  mask  is  set  to   nnn   (see
         umask(1)).  If  nnn is omitted, the current value of the
         mask is printed.

     unset [ name ... ]

         For each name,  remove  the  corresponding  variable  or
         function value. The variables PATH, PS1, PS2, MAILCHECK,
         and IFS cannot be unset.

     wait [ n ]

         Wait for your background process whose process id  is  n
         and  report its termination status. If n is omitted, all
         your shell's currently active background  processes  are
         waited for and the return code will be zero.

  Invocation
     If the shell is invoked through exec(2) and the first  char-
     acter  of  argument  zero  is -, commands are initially read
     from /etc/profile and from  $HOME/.profile,  if  such  files
     exist.  Thereafter,  commands  are  read as described below,
     which is  also  the  case  when  the  shell  is  invoked  as
     /usr/bin/sh. The flags below are interpreted by the shell on
     invocation only. Note: Unless the -c or -s  flag  is  speci-
     fied, the first argument is assumed to be the name of a file
     containing commands, and the remaining arguments are  passed
     as positional parameters to that command file:

     -c string      If the -c flag is present commands  are  read
                    from string.

     -i             If the -i flag is present  or  if  the  shell
                    input  and output are attached to a terminal,
--More--(79%)
SunOS 5.10           Last change: 2 May 2008                   21

User Commands                                               sh(1)

                    this shell is interactive. In this case, TER-
                    MINATE  is  ignored  (so that kill 0 does not
                    kill an interactive shell) and  INTERRUPT  is
                    caught and ignored (so that wait is interrup-
                    tible). In all cases, QUIT is ignored by  the
                    shell.

     -p             If the -p flag is present, the shell will not
                    set  the  effective user and group IDs to the
                    real user and group IDs.

     -r             If the -r flag is present the shell is a res-
                    tricted shell (see rsh(1M)).

     -s             If the -s flag is present or if no  arguments
                    remain,  commands  are read from the standard
                    input. Any remaining  arguments  specify  the
                    positional  parameters.  Shell output (except
                    for Special  Commands)  is  written  to  file
                    descriptor 2.

     The remaining flags and arguments are  described  under  the
     set command above.

  Job Control (jsh)
     When the shell is invoked as jsh, Job Control is enabled  in
     addition  to  all  of the functionality described previously
     for sh. Typically, Job Control is enabled for  the  interac-
     tive  shell  only.  Non-interactive  shells typically do not
     benefit from the added functionality of Job Control.

     With Job Control enabled, every command or pipeline the user
     enters  at  the  terminal is called a job. All jobs exist in
     one of the  following  states:  foreground,  background,  or
     stopped. These terms are defined as follows:

         1.   A job in the foreground has read and  write  access
              to the controlling terminal.

         2.   A job in the background is denied read  access  and
              has  conditional  write  access  to the controlling
              terminal (see stty(1)).

--More--(83%)         3.   A stopped job is a job that has been  placed  in  a
              suspended  state,  usually as a result of a SIGTSTP
              signal (see signal.h(3HEAD)).

SunOS 5.10           Last change: 2 May 2008                   22

User Commands                                               sh(1)

     Every job that the  shell  starts  is  assigned  a  positive
     integer,  called  a job number which is tracked by the shell
     and will be used as an identifier  to  indicate  a  specific
     job.  Additionally, the shell keeps track of the current and
     previous jobs. The current job is the most recent job to  be
     started  or  restarted.  The  previous job is the first non-
     current job.

     The acceptable syntax for a Job Identifier is of the form:

     %jobid

     where jobid may be specified in any of  the  following  for-
     mats:

     % or +       For the current job.

     -            For the previous job.

     ?<string>    Specify the job  for  which  the  command  line
                  uniquely contains string.

     n            For job number n.

     pref         Where pref is a unique prefix  of  the  command
                  name.  For  example,  if the command ls -l name
                  were running in the  background,  it  could  be
                  referred  to as %ls. pref cannot contain blanks
                  unless it is quoted.

     When Job Control is  enabled,  the  following  commands  are
     added to the user's environment to manipulate jobs:

     bg [%jobid ...]

         Resumes the execution of a  stopped  job  in  the  back-
         ground. If %jobid is omitted the current job is assumed.

     fg [%jobid ...]

--More--(86%)
...back 1 page

                    input. Any remaining  arguments  specify  the
                    positional  parameters.  Shell output (except
                    for Special  Commands)  is  written  to  file
                    descriptor 2.

     The remaining flags and arguments are  described  under  the
     set command above.

  Job Control (jsh)
     When the shell is invoked as jsh, Job Control is enabled  in
     addition  to  all  of the functionality described previously
     for sh. Typically, Job Control is enabled for  the  interac-
     tive  shell  only.  Non-interactive  shells typically do not
     benefit from the added functionality of Job Control.

     With Job Control enabled, every command or pipeline the user
     enters  at  the  terminal is called a job. All jobs exist in
     one of the  following  states:  foreground,  background,  or
     stopped. These terms are defined as follows:

         1.   A job in the foreground has read and  write  access
              to the controlling terminal.

         2.   A job in the background is denied read  access  and
              has  conditional  write  access  to the controlling
              terminal (see stty(1)).

         3.   A stopped job is a job that has been  placed  in  a
              suspended  state,  usually as a result of a SIGTSTP
              signal (see signal.h(3HEAD)).

SunOS 5.10           Last change: 2 May 2008                   22

User Commands                                               sh(1)

     Every job that the  shell  starts  is  assigned  a  positive
     integer,  called  a job number which is tracked by the shell
     and will be used as an identifier  to  indicate  a  specific
     job.  Additionally, the shell keeps track of the current and
     previous jobs. The current job is the most recent job to  be
     started  or  restarted.  The  previous job is the first non-
     current job.

     The acceptable syntax for a Job Identifier is of the form:

     %jobid

     where jobid may be specified in any of  the  following  for-
     mats:
--More--(84%)
     % or +       For the current job.

     -            For the previous job.

     ?<string>    Specify the job  for  which  the  command  line
                  uniquely contains string.

     n            For job number n.

     pref         Where pref is a unique prefix  of  the  command
                  name.  For  example,  if the command ls -l name
                  were running in the  background,  it  could  be
                  referred  to as %ls. pref cannot contain blanks
                  unless it is quoted.

     When Job Control is  enabled,  the  following  commands  are
     added to the user's environment to manipulate jobs:

     bg [%jobid ...]

         Resumes the execution of a  stopped  job  in  the  back-
         ground. If %jobid is omitted the current job is assumed.

     fg [%jobid ...]

         Resumes the execution of a  stopped  job  in  the  fore-
         ground,  also moves an executing background job into the

SunOS 5.10           Last change: 2 May 2008                   23

User Commands                                               sh(1)

         foreground. If %jobid is  omitted  the  current  job  is
         assumed.

     jobs [-p|-l] [%jobid ...]
     jobs -x command [arguments]

         Reports all jobs that are stopped or  executing  in  the
         background.  If  %jobid  is  omitted,  all jobs that are
         stopped or running in the background will  be  reported.
         The  following options will modify/enhance the output of
         jobs:

         -l    Report the process group ID and working  directory
               of the jobs.

--More--(87%)         -p    Report only the process group ID of the jobs.

         -x    Replace any jobid found in  command  or  arguments
               with  the corresponding process group ID, and then
               execute command passing it arguments.

     kill [ -signal ] %jobid

         Builtin version of kill to provide the functionality  of
         the kill command for processes identified with a jobid.

     stop %jobid ...

         Stops the execution of a background job(s).

     suspend

         Stops the execution of the current shell (but not if  it
         is the login shell).

     wait [%jobid ...]

         wait builtin accepts a  job  identifier.  If  %jobid  is
         omitted  wait  behaves  as described above under Special
         Commands.

  Large File Behavior

SunOS 5.10           Last change: 2 May 2008                   24

User Commands                                               sh(1)

     See largefile(5) for the description of the behavior  of  sh
     and  jsh  when encountering files greater than or equal to 2
     Gbyte ( 2^31 bytes).

EXIT STATUS
     Errors detected by the shell, such as syntax  errors,  cause
     the  shell to return a non-zero exit status. If the shell is
     being used non-interactively execution of the shell file  is
     abandoned.  Otherwise,  the shell returns the exit status of
     the last command executed (see also the exit command above).

  jsh Only
     If the shell is invoked as jsh and an  attempt  is  made  to
     exit  the  shell  while  there  are  stopped jobs, the shell
     issues one warning:

--More--(90%)     There are stopped jobs.

     This is the only message. If another exit attempt  is  made,
     and  there are still stopped jobs they will be sent a SIGHUP
     signal from the kernel and the shell is exited.

FILES
     $HOME/.profile

     /dev/null

     /etc/profile

     /tmp/sh*

ATTRIBUTES
     See attributes(5) for descriptions of the  following  attri-
     butes:

  /usr/bin/sh, /usr/bin/jsh

SunOS 5.10           Last change: 2 May 2008                   25

User Commands                                               sh(1)

     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWcsu                     |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|

  /usr/xpg4/bin/sh
     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                | SUNWxcu4                    |
    |_____________________________|_____________________________|
    | CSI                         | Enabled                     |
    |_____________________________|_____________________________|

SEE ALSO
     intro(1), bc(1),  echo(1),  getoptcvt(1),  kill(1),  ksh(1),
     login(1),  newgrp(1),  pfsh(1),  pfexec(1),  ps(1),  pwd(1),
     set(1),  shell_builtins(1),  stty(1),   test(1),   umask(1),
     wait(1),  rsh(1M),  su(1M),  swap(1M),  sysdef(1M),  dup(2),
     exec(2),   fork(2),   getrlimit(2),   pipe(2),    ulimit(2),
--More--(93%)     setlocale(3C),   signal.h(3HEAD),   passwd(4),   profile(4),
     attributes(5), environ(5), largefile(5), XPG4(5)

WARNINGS
     The use of setuid shell scripts is strongly discouraged.

NOTES
     Words used for filenames in input/output redirection are not
     interpreted  for  filename generation (see File Name Genera-
     tion section above). For example, cat file1 >a* will  create
     a file named a*.

     Because commands in pipelines are run as separate processes,
     variables  set  in  a  pipeline have no effect on the parent
     shell.

     If the input or the output of  a  while  or  until  loop  is
     redirected, the commands in the loop are run in a sub-shell,
     and variables set or changed there have  no  effect  on  the
     parent process:

          lastline=
         while read line
         do

SunOS 5.10           Last change: 2 May 2008                   26

User Commands                                               sh(1)

                 lastline=$line
         done < /etc/passwd
         echo "lastline=$lastline"       # lastline is empty!

     In these cases, the input or output  can  be  redirected  by
     using exec, as in the following example:

          # Save standard input (file descriptor 0) as file
         # descriptor 3, and redirect standard input from the file
         /etc/passwd:

         exec 3<&0               # save standard input as fd 3
         exec </etc/passwd       # redirect input from file

         lastline=
         while read line
         do
                 lastline=$line
         done
--More--(96%)/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd = "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew = "c" ]
then
BASEnew="C"
fi
if [ $BASEnew = "i" ]
then
BASEnew="I"
fi
if [ $BASEnew = "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd = "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
572 lines deletedNo lines in bufferAPPEND MODE

# /d/iccol/desarrollo/macros/sh-PE-Ripley


#sh-PE-Ripley.V.1.0001



#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
        raya="----------------------------------------------------------------------"
     ASCIIBanner="
         ######  #######    ######
         #     # #          #     # # #####  #      ###### #   #
         #     # #          #     # # #    # #      #       # #
         ######  #####      ######  # #    # #      ##### 
   #
         #       #          #   #   # #####  #    
  #        #
         #       #          #    #  # #   
   #      #        #
         #       #######    #     
# # #      ###### ######   #
 "
 
 # Valores iniciales de lo
s parámetros
 #   "I": la lista de IDs 
es interna  "C": provista x cliente
     BASE="C"
 #       si BASE="C": 
archivo y estructura ("0": 1-11 o "1": 1-11-45)
         NOM_ARCHIVO="
 "
         TIPO_
ARCHIVO="1"
 #    
   si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
      
   TIPO_EXTRACT="N"
 
    #           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
 
                ID_EXTRACT=" "ID_EXTRACT=" "
 
  #   Tipo de proceso "A": actual  "H": histórico#   Tipo de proceso "A": actual  "H": histórico
 
 
     TIPO_PROC="A"TIPO_PROC="A"
APPEND MODE#       Si TIPO_PROC="H": la fecha de proceso#       Si TIPO_PROC="H": la fecha de proceso
APPEND MODE        FECHA_PROC=" "FECHA_PROC=" "
APPEND MODE
APPEND MODEreadNOM_ARCHIVO() {readNOM_ARCHIVO() {
APPEND MODE#*****************************************************************
**************#***
APPEND MODE# Lee el nombre del archivo de entrada y verifica que exista en $T
EMPORALES# Lee el nombre del archivo de entrada y verifica que exista en $TEMP
ORALES
APPEND MODE#*****************************************************************
**************#***
APPEND MODE    loopEnd="0"loopEnd="0"
APPEND MODE    while [ $loopEnd == "0" ]while [ $loopEnd == "0" ]
APPEND MODE    dodo
APPEND MODE        echo " "echo " "
APPEND MODE#             ................................
......................................#   ...

APPEND MODE        echo "                       NOMBRE DE
L ARCHIVO BASE"echo "   NOMBRE DEL A
RCHIVO BASE"
APPEND MODE        echo $rayaecho $raya
APPEND MODE        echo "      Ingrese el
 nombre del archivo base,"echo "      Ingrese el no
mbre del archivo base,"
APPEND MODE        echo "      en
ter para cancelar"echo "      enter
 para cancelar"
APPEND MODE        echo "
 "echo " "

APPEND MODE      
  echo "            ARCHIVO:\c"e
cho "   ARCHIVO:\c"
@
@
APPEND MODE@
          read NOM_ARCHIVOnew 
 
   read NOM_ARCHIVOnew
@
@
@
APPEND MODE@        if [ -z $NOM_ARCHIVOnew ] 
 
 if [ -z $NOM_ARCHIVOnew ]
@
@
@
APPEND MODE@        then 
 
 then
@
@
@
APPEND MODE@            loopEnd="1" 
 
 loopEnd="1"
@
@
@
APPEND MODE@            exit 
 
 exit
@
@
@
APPEND MODE@        fi 
 
 fi
@
@
@
APPEND MODE@        if [ ! -f $NOM_ARCHIVOnew ]
 
 
 if [ ! -f $NOM_ARCHIVOnew ]

@
@
@
APPEND MODE@            printf "\7" 
 
 printf "\7"
@
@
@
APPEND MODE@            ech
o "El archivo "$NOM_ARCHIVO " no se encuentra" 
 
 echo "El 
archivo "$NOM_ARCHIVO " no se encuentra"
@
@
@
APPEND MODE@   
     else 
 
 e
lse
@
@
@
APPEND MODE@
            if [ -d $NOM_ARCHIVOnew ] 
 
 
if [ -d $NOM_ARCHIVOnew ]
@
@
@
@
APPEND MODE@                printf "\7" 
 
 
 printf "\7"
@
@
@
@
APPEND MODE@                echo $NOM_ARCHIVO " es un nombre de director
io" 
 
 
 echo $NOM_ARCHIVO " es un nombre de directorio"

@
@
@
@
APPEND MODE@            else 
 
 
 else
@
@
@
@
APPEND MODE@                NOM_ARCHIVO=$NOM
_ARCHIVOnew 
 
 
 NOM_ARCHIVO=$NOM_ARCHIVOn
ew
@
@
@
@
APPEND MODE@                
loopEnd="1" 
 
 
 loopEnd="
1"
@
@
@
@
APPEND MODE@
            fi 
 
 
 
  fi
@
@
@
@
@
APPEND MODE@        fi 
 
 
 
 fi
@
@
@
@
@
APPEND MODE@    done 
 
 
 
 done
@
@
@
@
@
APPEND MODE@} 
 
 
 
 }

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
71 fewer lines:set noaiAPPEND MODE

# /d/iccol/desarrollo/macros/sh-PE-Ripley


#sh-PE-Ripley.V.1.0001



#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#       si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="1"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha de proceso
        FECHA_PROC=" "

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                       NOMBRE DEL ARCHIVO BASE"
        echo $raya

        echo "      Ingrese el nombre del archivo base,"

APPEND MODE        echo "      enter para cancelar"

APPEND MODE        echo " "

APPEND MODE        echo "            ARCHIVO:\c"

APPEND MODE        read NOM_ARCHIVOnew

APPEND MODE        if [ -z $NOM_ARCHIVOnew ]

APPEND MODE        then

APPEND MODE            loopEnd="1"

APPEND MODE            exit

APPEND MODE        fi

APPEND MODE        if [ ! -f $NOM_ARCHIVOnew ]

APPEND MODE            printf "\7"

APPEND MODE            echo "El archivo "$NOM_ARCHIVO " no se encuentra"

APPEND MODE        else

APPEND MODE            if [ -d $NOM_ARCHIVOnew ]

APPEND MODE                printf "\7"

APPEND MODE                echo $NOM_ARCHIVO " es un nombre de directorio"

APPEND MODE            else

APPEND MODE                NOM_ARCHIVO=$NOM_ARCHIVOnew

APPEND MODE                loopEnd="1"

APPEND MODE            fi

APPEND MODE        fi

APPEND MODE    done

APPEND MODE}

APPEND MODE

APPEND MODEreadBASE() {

APPEND MODE#*******************************************************************************

APPEND MODE# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela

APPEND MODE#*******************************************************************************

APPEND MODE    loopEnd="0"

APPEND MODE    while [ $loopEnd == "0" ]

APPEND MODE    do

APPEND MODE        echo " "

APPEND MODE#             ......................................................................

APPEND MODE        echo "                       ORIGEN DE LA BASE"

APPEND MODE        echo $raya

APPEND MODE        echo "      I) interna"

APPEND MODE        echo "      C) Provista por el Cliente"

APPEND MODE        echo "      enter para cancelar"

APPEND MODE        echo " "

APPEND MODE        echo "                 BASE:\c"

APPEND MODE        read BASEnew

APPEND MODE        if [ -z $BASEnew ]

APPEND MODE        then

APPEND MODE            loopEnd="1"

APPEND MODE            exit

APPEND MODE        fi

APPEND MODE        if [ $BASEnew == "c" ]

APPEND MODE        then

APPEND MODE            BASEnew="C"

APPEND MODE        fi

APPEND MODE        if [ $BASEnew == "i" ]

APPEND MODE        then

APPEND MODE            BASEnew="I"

APPEND MODE        fi

APPEND MODE        if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]

APPEND MODE        then

APPEND MODE            BASE=$BASEnew

APPEND MODE            loopEnd="1"

APPEND MODE        else

APPEND MODE            printf "\7"

APPEND MODE        fi

APPEND MODE    done

APPEND MODE}

APPEND MODE

APPEND MODEparamsGet() {

APPEND MODE#*******************************************************************************

APPEND MODE# Lee los parámetros de la corrida anterior

APPEND MODE#*******************************************************************************

APPEND MODE#   asegura que exista el arch de parámetros general

APPEND MODE    [ ! -f $0.parm ] && touch $0.parm

APPEND MODE#   lee los parámetros

APPEND MODE    params=`cat $0.parm`

APPEND MODE    echo '>>>> params: ' "$params"

APPEND MODE#   separa los parámetros según su posición

APPEND MODE    BASE=`echo "$params" | cut -d ";" -f1`

APPEND MODE    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`

APPEND MODE    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`

APPEND MODE    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`

APPEND MODE    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`

APPEND MODE    TIPO_PROC=`echo "$params" | cut -d ";" -f6`

APPEND MODE    FECHA_PROC=`echo "$params" | cut -d ";" -f7`

APPEND MODE}

APPEND MODE

APPEND MODEparamsPut() {

APPEND MODE#*******************************************************************************

APPEND MODE# Guarda los parámetros de la corrida en el archivo .parm

APPEND MODE#*******************************************************************************

APPEND MODE@

APPEND MODE    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F

APPEND MODEECHA_PROC >| $0.parm

APPEND MODE}

APPEND MODE

APPEND MODEparamsPrint() {

APPEND MODE#*******************************************************************************

APPEND MODE# Muestra todos los parámetros, para pruebas

APPEND MODE#*******************************************************************************

APPEND MODE    echo "BASE="$BASE"<"

APPEND MODE    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"

APPEND MODE    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"

APPEND MODE    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"

APPEND MODE    echo "ID_EXTRACT="$ID_EXTRACT"<"

APPEND MODE    echo "TIPO_PROC="$TIPO_PROC"<"

APPEND MODE    echo "FECHA_PROC="$FECHA_PROC"<"

APPEND MODE}

APPEND MODE

APPEND MODE

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE#                                    MAIN

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE    clear

APPEND MODE    echo $raya

APPEND MODE    echo "$ASCIIBanner"

APPEND MODE#   banner "PE Ripley"

APPEND MODE    echo $raya

APPEND MODE

APPEND MODE    readBASE

APPEND MODE    readNOM_ARCHIVO

APPEND MODE    paramsGet

APPEND MODE    paramsPrint

APPEND MODE    paramsPut

APPEND MODE    # DEBUG: termina acá

APPEND MODE    exit

APPEND MODE

APPEND MODE

APPEND MODE

APPEND MODE

APPEND MODE

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE

:w"sh-PE-Ripley" 182 lines, 6162 characters 
[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgman shman sh(1)man shellman operatorssh-PE-Ripley fg          sh-PE-Ripley
sh-PE-Ripley[38]: syntax error at line 63 : `else' unexpected
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    readNOM_ARCHIVO
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ ! -f $NOM_ARCHIVOnew ]printf "\7"
echo "El archivo "$NOM_ARCHIVO " no se encuentra"
else
if [ -d $NOM_ARCHIVOnew ]printf "\7"
echo $NOM_ARCHIVO " es un nombre de directorio"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
OPEN MODEthen    then    then
    


    
then    then    thenthen/   Address search hit BOTTOM without matching pattern?$CHANGE MODE    ?$    ?$    ?$    ?$    ?Address search hit TOP without matching pattern/Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 184 lines, 6192 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>ls
:wq
*.*
000007
000017
001809
030102.20111031-005-c
1
2
42-prbessi
800153993-EstCSV-00000000-99999999.log
a.out
a1
actualizacion
ah-VIPS-FINANCIERO
algo
algo.sed
algo1
algo2
alguna
amb
ambi
ambiente
ANDRES.ENT
ansi
archivo
awk-frared-rmb
awk-frared01
awk-novedat
awk-scovisa
awk-tb-modifica
awkgj
awkgj1
awkvhf
b
backup-desarrollo
backup-desarrollo-20110810
backup-desarrollo-20120503
backup-desarrollo.20101028
backup-desarrollo.ant
backup-icdb
backup-icdb.ant
bajsitio
baseid.ESTADI
BASURA.tmp
BDIEGARJ.log
bdinanom
BDINANOM
BDINANOM.ANT1
BDINREG
BDINREG.idx
BDLDI2.WS
BDLPART
BDLPART.idx
BDUCACT
BDUCACT-PARM
BDUCACT.LOGsh-actarev
BDUCACT.ORI
BDUCVAL
BDUCVAL-PARM
borra
busque-cadena.sh
c
c-c
c-cbl
c-cbl.err
c-cbldb2
c-cbljv
c-cla
c-cobdb2
c-cobdb2-20130531
c-cobdb2-8
c-cobdb2-97
c-cobdb2-act
c-cobdb2-globant
c-cobdb2-ley
c-cobdb2-v8
c-cobdb2-v97
c-cobdb2.avh
c-cobdb2.demo
c-cobdb2.ok
c-cobdb2.rmb
c-cobhijo
c-cobjava
c-cobjava-20130531
c-cobsql
c-cobsql-ant
c-cobsql-bound
c-cobsql-pru
c-cobsql.5
c-cobsql.dlm
c-csql
c-csun
c-e
c-ev
c-ev-20130531
c-ev-aciertamas
c-ev-caracteristicas
c-ev-pes
c-ev-quanto
c-ev-RGH
c-ev-salmin-2011
c-ev-salmin-2012
c-ev-salmin-2013
c-ev-salmin-2014
c-ev-salmin-2014-orig
c-ev-scot16
c-ev64
c-hs
c-o
c-ov
c-pepe
C-RTS32
c-ss
c-tera
c-v
c-v-2013-05-31
c-v-aciertamas
c-v-act
c-v-act-ORI
c-v-caracteristicas
c-v-caracteristicas-sal
c-v-CONdb2
c-v-CONdb2-OK1
c-v-CONjav
c-v-CONjav-OK1
c-v-CONVER
c-v-CONVER-OK1
c-v-CONVEResp
c-v-CONVEResp-OK1
c-v-DAR
c-v-exe
c-v-gnt
c-v-hoy
c-v-ley
c-v-ley-esp
c-v-ley-ORI
c-v-pes
c-v-pru
c-v-pruebas
c-v-quanto
c-v-salmin-2011
c-v-salmin-2012
c-v-salmin-2013
c-v-salmin-2014
c-v-salmin-2014-orig
c-v-scot16
c-v-scot16.txt
c-v-usr
c-v32
c-v64
c-vRG
c32
cam-long-00.awk
cambio-1.sed
cambio-10.sed
cambio-11.sed
cambio-12.sed
cambio-13.sed
cambio-14.sed
cambio-15.sed
cambio-16.sed
cambio-2.sed
cambio-3.sed
cambio-4.sed
cambio-5.sed
cambio-5.sed-OK
cambio-5.sed-ORI
cambio-6.sed
cambio-7.sed
cambio-8.sed
cambio-9.sed
cargue-EMPLEDAVI.sh
cargue-NODESEADOS.sh
CARTERA-TOTAL-HSBC-a
CARTERA-TOTAL-HSBC-a.log
catalogar.sh
catcgi
cathtml
catproxy
cblc
cc-obj
CCI.INI
CCI.WRK
ccierr.log
ce-v
cedulas.txt
cedulasExtranjeria.txt
cig
cig-ex
cigd-prueba
circular
CITICLIFERIA-ARR
claveunica
cls
co-v
cobr860034313
cobr860034313.SALSEG2
cobranza.param
com
com-2000
com-utl
com2
com3
comp-rangonits
comp-regloc
comp-scot16
comp-valnom
comp-verif
compila-asigna
compilar
compilar-cla-sus
compilar-icbcla
compilar1
compilar32
comprimir
consultas
CONSULTAS
copia.cos
copiaicf
corte.awk
cpfiles
CTLCOPYCRE.20140429.core
cuales.txt
cuenta-tco
d-cobc
d-cobdb2
d-cobdb2-ley
d-cobdb2.ok
d-cobsql
dar
dar-1
dar-O
dar-OK1
data
datval159.awk
dba
dd_REGIS
deborrar
delay_vhf
des-c-cobdb2
des-c-cobjava
des-c-ev
des-c-ev-salmin-2014
des-c-v
des-c-v-salmin-2014
des-c-v-x
des32-c-v
desfrag
dif-fu
dif-icn31
diferenciaversion.txt
DIFF_SHELLV2-1.txt
diff-CQ6455
diff1178
diff1903
diff6455
diff7686
diffbog
director.tmp
Directorio
dj
doc
documentacion
dos
DTCVERIF
DTR003
DTRUAPET
ejeawk
elim_regs
elimi-dth.awk
endeudact
espacio
especiales
est-sem-comcel.awk
extfh2007-DAR.cfg
extfh2007.cfg
extfh200804.cfg
extfhxxxx-DAR.cfg
f1
f2
FACFINSOPT.DAT
factura-fast
factura-fast.ant
facturacion
facturacion.ant
facturacion.ant.1
facturacion.desa
facturacion.gj
FACUDCIFRA
FACULIS.LOGDIA-20120327
FACUPRED
FACUSCOR
file-share
formas
FRAEST.SORT
FRALOG.200702
FRALOG.ant
ftp-comunica
ftp-comunica-novedat
ftp-dlm
fuentes-10.sed
fuentes-10.sed-OK1
fuentes-11.sed
fuentes-12.sed
fuentes-2.sed
fuentes-3.sed
fuentes-3.sed-bk-2008-09-17
fuentes-4.sed
fuentes-4.sed-bk-2008-09-17
fuentes-5.sed
fuentes-6.sed
fuentes-7.sed
fuentes-8.sed
fuentes-9.sed
fuentes.sed
fupru
ggsort
gj1
graba-80.awk
grace.awk
greppes
grepsan
grp-macros-des-20111018.txt
h-utlcre-vlr
hd
hh
hijo-sock04.err
hs_err_pid13681.log
hs_err_pid14008.log
hs_err_pid15871.log
hs_err_pid15939.log
hs_err_pid16534.log
hs_err_pid17149.log
hs_err_pid17392.log
hs_err_pid18327.log
hs_err_pid18691.log
hs_err_pid19381.log
hs_err_pid24950.log
hs_err_pid4288.log
hs_err_pid7815.log
hs_err_pid7859.log
ICBEXTP.CT02
ICBTCO-sinfecha.awk
iceprevis01.aif
iceprevis01.cbl
icestd65vc-reloaded.aif
icestd65vc.aif
icgconcom1
ICGD22V23.SAL
ICGDI2.aif
icgdifbatc1
icgdifbatc2
icgdifbatch
icgdifmco
icgdifmdh
icgdifpco
icgdifpdh
ICGKAR.aif
ICGSTRN02.int
ICINCOS
ICMCREBANK.201010.log
ICMCRECOPY.log
ICMEXT
ICMEXT.FINMES
icmextp
ICMEXTP
ICMEXTP.BORR
ICMEXTP.FINMES
ICMEXTP.INIMES
ICMEXTP2
ICMEXTPNEW
ICMEXTPP
icmvie
iden-nom
indexar.sh
indexar.sh-eha
infpesvno201211.log
inserta-en-posicion.awk
INTGAMB
INTGPUB
INTPCGI
INTPHTM
INTRCGI
INTRHTM
l-dir
l-sort
l-sort1
lee-maestros-linea
ley
lista-macros-calidad
lista-scot16
lista-scot16-DAR
lista-scot16-ORI
lista-scot16-pe
lista-scot16-pe-DAR
lista-scot16-pe-ORI
lista.txt
log_
log_ICSAC1
log_sh-bdlupmail.txt
log_sh-dirdoc.txt
LOG-CITIBUSINESS-20091230
log-macro
log.mnt-NIT
logscore
logSinReinicio.log
lt
luis-15805
luisvcp
m-scot16
macdlm1
macro1.sh
macro2.sh
MacroBF.sh
MacroProdBF.sh
MACROPRUEBABF2013
macrorecompilacionBF
makeAdb.sh
makeAdb.sh-BCK1
MANFACFEB.DAT
mapru
md5-rgh
MD5.jar
mico
mio.txt
mntlog.sg1
mover-archivos
mover-archivos-bdi
mover-archivos.20030530
N
NIT11111111111
nits.txt
no-uso
nohup.out
nomarch_FD
nomarch_FE
nomarch_FJ
nomarch_FN
nose.awk
nuevas
nuevops
numcbl
obpru
ori
p
p8639.parm
parametros
parte-a-80.sh
PESVNO.20140527.core
prb
prb1
prba243.param
prn
pro-c-cobdb2
pro-c-cobjava
pro-c-ev
pro-c-v
pru
pru-acierta-M-II.sh
pru-acierta-M.sh
pru-diezmil
pru-scovisa
pru01-1.dth.salida
prubcolMI
prueba
prueba-001
prueba-tel
PRUEBA2
pruebamkea
pruebas
reco11.parm
recomp
refval01
registro1con2.awk
renidx
renomidx
rgh.txt
RGH.TXT
rmb
rmb111
run07f
run32f
run60f
runicg
RUTA
S
SAL-YANBAL
SALIDA
sc-arregla-maes
sc-firma
sc-ftp-av
SCODPP
SCODVAL
SCODVAL.sh
scohist1.par
scoremes.rec
SCOREXTR.DAT-WRK
scot16.prn
scot16com
scot16esp.prn
scot16espgj.prn
scot16gj.prn
SCOTPARCOB
SCOVSCO.amn.act
SCOVTAR.INI.04051
scr-AVV-2
scr-dth
scr-monmov
scr-monmovlag
scr-predicta
sel-cons-susc-prod.awk
sel-cons-susc-prod.sh
sel-consul-suscriptor.awk
sh-
sh-07ppru
sh-200312
sh-200809
sh-31s
sh-31s.old
sh-450
sh-450-bdi
sh-450-d
sh-450-lag
sh-450-ley
sh-450-PRE
sh-450.20030530
sh-450J
sh-450truco
sh-583
sh-aam
sh-acierta
sh-acierta-2000
sh-acierta-2001
sh-acierta-2002
sh-acierta-2003
sh-acierta-2004
sh-acierta-aciertaM
sh-acierta-acii
sh-acierta-acii-hist
sh-acierta-bdant
sh-acierta-bdant1
sh-acierta-c-batch
sh-acierta-c-batch-V01
sh-acierta-citibank-wap
sh-acierta-his
sh-acierta-M
sh-acierta-nits
sh-acierta-plastico
sh-acierta-prueba
sh-act-bd-reconocer
sh-act-bdu
sh-actarev
sh-actarev-ayer
sh-actarev-nhc
sh-actarev-nhc-20091218
sh-actarevcr
sh-actarevct
sh-actarevzzz
sh-actaval
sh-actaval-borr
sh-actaval-gj
sh-actbdaprvtr
sh-actcln
sh-actcln-ant
sh-activaciones
sh-activaciones-20131029
sh-activaciones-20131220
sh-activaciones-prb
sh-activaciones-v0
sh-activaciones-V01
sh-activaciones-V02
sh-activaciones-V03
sh-actley
sh-actmedrp
sh-actmfre
sh-actmfre-lote
sh-actmfre-lote-48log
sh-actmfre-lote-prod
sh-actmfre-tx
sh-actmfre.old
sh-actu-ICBCLA
sh-actu-ICBSUS
sh-actualiza
sh-actualiza-BBVA
sh-Actualiza-FNA
sh-actualiza-par
sh-actualiza.19990325
sh-actualiza.19990329
sh-actualiza.19990331
sh-actualiza.guille
sh-actualizaBDSCORES
sh-actualizaBDSCORES.bk
sh-actualizacion
sh-actualizacion-ant
sh-actualizacion-V0001
sh-actualizar
sh-actualizar-ANT
sh-actualizar-ftp
sh-actualizar-V0010
sh-actupagos-BBVA
sh-actvalcert
sh-actvlcr
sh-actvlcr-cv
sh-actvlcr-V1
sh-actvlcrrmb
sh-actvlct
sh-actvlct-V01
sh-actvlct-V02
sh-actvlct-V02-OK1
sh-actvlct-V02-OK2
sh-actvlctrmb
sh-administra-indexado
sh-Administracion
sh-agrario-cobranza
sh-agrario-cobranzaPV
sh-agrario-especial
sh-agrario-mercadeo
sh-agrario-monitor
sh-agrario-new
sh-agrario-OK
sh-agrario-param
sh-agrario-param-20090813
sh-agrario-param-20091117
sh-agrario-proc
sh-agrario-proc-20110315
sh-agrario-proc-nvo
sh-agrario-proc.20121012
sh-agrario-select
sh-agrario-selectV01
sh-agrario-selectV02
sh-agrario-tdc
sh-agrario-vepar
sh-ahocifin
sh-ahocifin-orig
sh-alberto
sh-alertas-avvillas
sh-alertas-avvillasPV
sh-alertastempranas-pj
sh-alertastempranas-pj-des
sh-algo
sh-aliadas
sh-alicartera-macrofinanciera
sh-alineacion-plus
sh-almacafe
sh-almacafe-old
sh-alx
sh-alx1
sh-ambactual
sh-ambdir
sh-ambiente
sh-ambiente-citi
sh-ambientes
sh-ambnom
sh-ambnom-bdi
sh-ambnom.20030530
sh-amplia-bdi
sh-ampliados
sh-ANALISIS-SCORE
sh-ANALISIS-SCORE_v03
sh-ANALISIS-SCORE-bckup
sh-ANALISIS-SCORE-LEY
sh-ANALISIS-SCORE-pru
sh-ANALISIS-SCORE-V0002
sh-ANALISIS-SCORE-V0003
sh-andina-dcifra
SH-ANDRES
sh-anif
sh-anif-200203
sh-antes-de-scouks
sh-aper-vs-cons
sh-aper-vs-cons-desa
sh-apertESTADIS
sh-aperturas
sh-aperturas-acierta+
sh-aperturas-acierta+imsg
sh-aperturas-acierta+PV
sh-aperturas-fec
sh-aperturas-ICBCON
sh-aperturas-ICBCONpv
sh-aperturas-Vs-Consultas
sh-apoyodir
sh-apoyodir1
sh-apoyos-financieros-diario
sh-apoyos-financieros-diario-II
sh-apoyos-financieros-diario-II-lag
sh-aprobTDC-Bcolombia
sh-aprobTDC-Bcolombia-lag
sh-aprobTDC-Bcolombia-V01
sh-arma-classpath
sh-armacance-lag
sh-armaract
sh-armaract-OK1
sh-armaract-ORI
sh-armaract-V05
sh-armaract-V06
sh-armardirec
sh-armardirec-email
sh-armarftp
sh-armarmaes
sh-armarval
sh-arme-db
sh-arme-db-icmcre
sh-arme-dbcte
sh-arme-eli-total
sh-arme-migra-total
sh-arregla-ctas-bbva
sh-arregla-maes
sh-arregla-maes.old
sh-arreglanits
sh-arreglo-maes
sh-AVV-Metodo-Pasivo
sh-AVV-Metodo-Pasivo1
sh-AVV-Metodo-Pasivo3
sh-AVV-Metodo-PasivoA
sh-AVV-Metodo-PasivoPV
sh-avvillas
sh-avvillas-20050912
sh-avvillas-mercadeo
sh-avvillas-TDC
sh-avvillas.DAR
sh-avvillas.DAR-20091218
sh-avvillas.MALITO
sh-backtesting-acierta
sh-backtesting-acierta-ant
sh-backtesting-acierta-lag
sh-backtesting-param
sh-backtesting-proc
sh-backtesting-proc-ant
sh-backtesting-proc-lag
sh-backtesting-selcta
sh-backtesting-selcta-ant
sh-backtesting-select
sh-backtesting-select-ant
sh-backtesting-select-lag
sh-bajahijos
sh-banbogota-AVAL
sh-banbogota-AVAL-20120621
sh-banbogota-AVAL-CQ6539
sh-banbogota-AVAL-V001
sh-banbogota-Barr
sh-banbogota-BOG
sh-banbogota-BOG.ant
sh-banbogota-BOGv2
sh-banbogota-Fedecafe
sh-banbogota-MED
sh-banbogota-OFI
sh-banbogota-TDC
sh-bancafe
sh-bancafe-empresarial
sh-bancafe-new
sh-bancamia-endeu
sh-bancamia-endeuPR
sh-bancamia-endeuV01
sh-Bancamia-informe
sh-Bancamia-informe-20130123
sh-bancarizacion-Bancoldex
sh-bancol-fotoaciplus
sh-bancolmena
sh-bancolmena-new
sh-bancolmena-new-V01
sh-bancolmena-new-V02
sh-bancolombia
sh-base
sh-BASE-333333
sh-base-historica
sh-basescore
sh-baseT5
sh-baseTIPO5
sh-basico
sh-basico-his
sh-basico-hist
sh-basico-nits
sh-batHCPJur
sh-batHCPN
sh-batHCPN-20100608
sh-batHCPN2
sh-bbogota-index
sh-bbva
sh-bbva-informe
sh-BBVA-informe
sh-BCS
sh-BCS-CONS
sh-BCSC-filtros-mercadeo
sh-BCSC-filtros-mercado
sh-BCSC-filtros-mercado.v1
sh-bdaacla
sh-bdaactsus
sh-bdacsvincl
sh-bdapoyo
sh-bdhist
sh-bdiaregb
sh-bdiaregi
sh-bdieplmsup
sh-bdiexcod
sh-bdiicgclvseg
sh-bdinanom-ccb
sh-bdinanom01
sh-bdinanom02
sh-BDIPROBINC
sh-BDIPROBINC-prblg
sh-bdlacli
sh-bdlactualiza
sh-bdlaloc
sh-bdlapart
sh-bdlarmar-act
sh-bdlarmar-val
sh-bdlcmail
sh-bdldirec
sh-bdldirec-V01
sh-bdldite
sh-bdlupmail
sh-bdlvalida
sh-bdlvalida-tot
sh-bdlvalidar-lot
sh-bdlvcal
sh-bdlvord
sh-bdlvutl
sh-bdscoreshis
sh-bduborr
sh-bducact
sh-bducren
sh-bducval
sh-bdugact
sh-belldcifra
sh-bind
sh-bindicgclvcrear
sh-bkpACTIVOS
sh-bkpICMCHK
sh-bkpICMCRE
sh-bkpMONITOR
sh-bkpPORTAL
sh-bkpVALORES
sh-bloqueo-trn-servidores
sh-bogota
sh-borra
sh-borra-adj-fallec
sh-borra-adj-fallec-cte
sh-borra-huella-frapreu
sh-borra1
sh-borramaes
sh-busca
sh-buscar-cadena
sh-busqueda-dario
sh-c-e-especiales.prn
sh-c-v-bdi
sh-ca
sh-ca11
sh-CAB-VIPS-BOG
sh-cadfac
sh-caduci
sh-caduci.19990329
sh-caducif
sh-cajasocial
sh-CAJASOCIAL-mercado
sh-cajasocial-pru
sh-cajasocial.old
sh-cajasocialV02
sh-calcartera-gmac
sh-calcartera-gmac-des
sh-calcartera-gmac-des-DARIO
sh-calcartera-gmac-ot
sh-calcartera-gmac-V01
sh-calcartera-gmac-V03
sh-calcartera-gmac-V04
sh-calcartera-gmac-V04-BCK1
sh-calcartera-gmac-x
sh-calext
sh-calibracion-aciertac
sh-calibracion-aciertac-1
sh-calidad
sh-calidad-batch
sh-calidad-batch-jjmr
sh-calidad-batch-V02
sh-calidad-batch-V03
sh-calidad-batch-V04
sh-calidad-batch-V05
sh-calidad-batch-V06
sh-calidad-especificos-batch
sh-calidad-especificos-linea
sh-calidad-linea
sh-calidad-linea_prueba
sh-calidad-linea-V01
sh-calidad-linea-V02
sh-calidad-linea-V03
sh-calidad-linea-V04
sh-calmenu00
sh-camamb
sh-camamb-ant
sh-camamb-avh
sh-camamb-bdi
sh-camamb-camaras
sh-camamb.20030530
sh-camamb.ori
sh-camambx
sh-camaracomercio
sh-cambia-bd-201110
sh-cambia-bd-201204
sh-cambia-nawk-intel
sh-Cambiar-NIT
sh-Cambiar-NIT-Rev
sh-cambio-base
sh-cambio-CCI-TCP
sh-cambio-CCI-TCP-ORIG
sh-cambio-plastico
sh-cambio-plastico.old
sh-campanas-bcobta
sh-campanas-bcobta_20120724
sh-campanas-bcobta-20120621
sh-campanas-bcobta-20140107
sh-campanas-bcobta-AL
sh-campanas-bcobta-AL1
sh-campanas-bcobta-bak20120724
sh-campanas-bcobta-cq6539
sh-campanas-bcobta-imsg
sh-campanas-bcobta-lag
sh-campanas-bcobta-opc
sh-campanas-bcobtaV06
sh-cancelacion-BBVA
sh-CAPTACION
sh-CAPTACION-2007
sh-CAPTACION-CFG
sh-CAPTACION-DES
sh-CAPTACION-DES-20080514
sh-CAPTACION-DES-lag
sh-CAPTACION-DES.old
sh-car-aci-y-acim
sh-car-open-x-fecha
sh-carac-dav
sh-carac-ide-prec
sh-carac-score
sh-carac-standard
sh-caracper-helm
sh-caracper-helm-BCK1
sh-caracper-helm-BCK2
sh-caracper-helm-V01
sh-CaracReconocer
sh-CARACT-2009
sh-caractdiff
sh-CARACTNEW
sh-CARACTNEW-V02
sh-CARACTNEW.20121012
sh-caractper-003
sh-caractper-003pv
sh-caractper-003v02
sh-caractusa
sh-caractusa-ant
sh-caractusa-cavs
sh-caractusa-cv
sh-caractusa-ind
sh-caractusa-ind-v01
sh-caractusa-inde
sh-caractusa-pru
sh-caractusa-pruebas
sh-caractusa-V0001
sh-caractusa-V04
sh-caractusanew
sh-caractusanew-ind
sh-CARGAJUR
sh-CARGAJUR.old
sh-cargue-ICMVAL
sh-cargue-ICMVAL-CAMBIOS
sh-cargue-ICMVAL-MAL
sh-CargueCC
sh-CargueCC_20130920
sh-CargueCC-20120621
sh-CargueCC-20120704
sh-CargueCC-20120815
sh-CargueCC-20121109
sh-CargueCC-20130321
sh-CargueCC-20130724
sh-CargueCC-20130731
sh-CargueCC-20130805
sh-CargueCC-bk-20120713
sh-CargueCC-Bk-20121116
sh-CargueCC-EHA
sh-CargueCC-EHA-DAR
sh-CargueCC-Generica
sh-CargueCC-Generica-20121109
sh-CargueCC-Generica-20121113
sh-CargueCC-Generica-20121119
sh-CargueCC-STT
sh-CargueCC-T
sh-CargueCC-tmp
sh-CargueCC.ori
sh-CargueCC1
sh-CargueCC2
sh-carguehuellas
sh-CargueSuperSociedades
sh-carlitos
sh-carrmb
sh-carta-navegacion
sh-carta-navegacion.1505
sh-carta-navegacion.ABR
sh-carta-navegacion.MAR
sh-carta-navegacion.MAY
sh-carta-navegacion.may13
sh-carta-navegacionPRU
sh-carta-navegacionPV
sh-cartera-bogota
sh-catalog-2000
sh-cataloga-ant
sh-cataloga-standalone
sh-cataloga-standalone.ori
sh-catalogamult
sh-catalogav
sh-catalogaw-V05-desa
sh-catalogaw.nvo
sh-cavs
sh-cblfd
sh-cc
sh-ccext
sh-cedulas
sh-cedulas.old
sh-cerrESTADIS
sh-certif-desa
sh-certificacion
sh-CFA
sh-cfPV
sh-ciber
sh-ciber-cal1
sh-cifin-bbva
sh-cifin-bbva-ini
sh-citi-conversion
sh-citi-score-montos
sh-citi-thin-thick
sh-citi-thin-thick_PROD_2013-11-05
sh-citi-thin-thick-batch
sh-citi-thin-thick-batch-V01
sh-citi-thin-thick-batch-V01-OK1
sh-citi-thin-thick-batch-V01-OK2
sh-citi-thin-thick-batch-V01-OK3
sh-citi-thin-thick-batch-V02
sh-citi-thin-thick-NOES
sh-citi-thin-thick-pru
sh-citi-thin-thick-PRU
sh-citi-thin-thick-REPO-batch
sh-citi-thin-thick-REPO-linea
sh-citi-thin-thick-REPO-ORI
sh-citi-thin-thick-V01
sh-citi-thin-thick-V01-PRU1
sh-citi-thin-thick-V01-PRU2
sh-citi-thin-thick-V02
sh-citi-thin-thick-V02-OK1
sh-citi-thin-thick-V03
sh-citi-thin-thick-V04
sh-citi-thin-thick-V05
sh-citi-thin-thick-V06
sh-citi-thin-thick-V06-NOES
sh-citi-thin-thick-V06-NOPASO
sh-citi-thin-thick-V06-PRU
sh-citi-thin-thick-V06-PRU1
sh-citi-thin-thick-V07-NOPASO
sh-citi-thin-thick-V07-OK
sh-citi-thin-thick-V08
sh-citi-thin-thick-V08-ELMER
sh-citi-thin-thick-V09
sh-citi-thin-thick-V09-1
sh-citi-thin-thick-V09-1-NOES
sh-citi-thin-thick-V09-2
sh-citi-thin-thick-V09-DLM-Req574
sh-citi-thin-thick-V09-NOES
sh-citi-thin-thick-V10
sh-citi-thin-thick-V10-NOPASO-DLM
sh-citi-thin-thick-V10-OTRO
sh-citi-thin-thick-V11
sh-citi-thin-thick-V11-OTRO
sh-citi-thin-thick-V12
sh-citi-thin-thick-V13
sh-citi-thin-thick-V13-arr
sh-citibank
sh-citibank-2005
sh-citibank-560
sh-citibank-acierta
sh-citibank-acierta-wap
sh-citibank-batch
sh-citibank-bureau
sh-citibank-bureau-20140108
sh-citibank-bureau-cons
sh-citibank-bureau-cons-V01
sh-citibank-bureau-cons-V01-OK1
sh-citibank-bureau-lag2
sh-citibank-bureau-prba
sh-citibank-bureau-V01
sh-citibank-DH
sh-citibank-DH-20140108
sh-citibank-DH-noclie
sh-citibank-diag1
sh-citibank-empleados
sh-citibank-endeuda
sh-citibank-endeuda-1
sh-citibank-endeuda-20140108
sh-citibank-especial
sh-citibank-especial-20140108
sh-citibank-filtro
sh-citibank-filtro-20140108
sh-citibank-montos
sh-citibank-paralelo
sh-citibank-prescree
sh-citibank-prescree-BCK
sh-citibank-prescree-pru
sh-citibank-prescree-RGH
sh-citibank-prescree-sep2011
sh-citibank-prescree-V02
sh-citibank-prescree-V03
sh-citibank-prescree-V03-OK1
sh-citibank-prescree-V03-OK2
sh-citibank-prescree-V03-OK3
sh-citibank-prescree-V03-xxxx
sh-citibank-prescree-V04
sh-citibank-prescree-V04-NOES
sh-citibank-prescree-V05
sh-citibank-prescree-V06
sh-citibank-prescree-V06-NOES
sh-citibank-prescree-V07
sh-citibank-prescree-V08
sh-citibank-prescree-V08-BCK1
sh-citibank-prescree.old
sh-citibank-SCORE
sh-citibank-trimestral
sh-citibank-trimestral-20140108
sh-citibank-trimestral-sinley
sh-citibank-trimestralhist
sh-citibank-version
sh-citibank-WAP
sh-citibankok
sh-citibankoknew
sh-citibankold1101
sh-citibankvie
sh-citibankvie73
sh-citibased
sh-citibased03
sh-citibased98
sh-citiborra
sh-citiesp1
sh-citipredictabd
sh-citipredictabd98
sh-citiprue
sh-citirep-adi
sh-citirep-adi-V01
sh-citirep-adi-V01-OK1
sh-citirep-cadu
sh-citirep-cadu-V01
sh-citirep-eli
sh-citirep-eli-V01
sh-citirep-idx
sh-citirep-idx-V01
sh-citivalida
sh-cjl
sh-classpath
sh-cliente
sh-ClienteExportarListadoReclamos.sh
sh-ClienteInformeClienteHCPlus
sh-clientes
sh-clientes-tipo5
sh-clientesTIPO5
sh-clientesTIPO5-bk-2009-05-11
sh-clientesTIPO5-bk-2009-06-17
sh-clientesTIPO5-NEW
sh-ClienteTerminosCondiciones
sh-cobpath-pru
sh-cobrable
sh-cobrablepr
sh-cobranza
sh-cobranza-ant
sh-cobranza-bckup
sh-cobranza-falabella
sh-cobranza-monitor
sh-cobranza-monitor-bckup
sh-cobranza-monitor-lag
sh-cobranza-param
sh-cobranza-param-ant
sh-cobranza-proc
sh-cobranza-proc-bckup
sh-cobranza-procseg-1
sh-cobranza-procseg-2
sh-cobranza-procseg-2-1
sh-cobranza-procseg-2-1-d
sh-cobranza-procseg-2-2
sh-cobranza-procseg-2-bckup
sh-cobranza-procseg-2-lag
sh-cobranza-procseg-2-lag1
sh-cobranza-procseg-3
sh-cobranza-procseg-3-pp
sh-cobranza-procseg-3AC
sh-cobranza-procseg-3AC-pp
sh-cobranza-procseg-3fase1
sh-cobranza-procseg-4
sh-cobranza-prueba
sh-cobranza-segmentacion
sh-codensa
sh-codeudores
sh-colmena
sh-colmena-dia
sh-COLMENA-mercado
sh-colmena-V01
sh-colmena-V01-NOES
sh-colmena-V02
sh-colombiamovil
sh-colpa-noel
sh-colpatria
sh-colpatria-Comcel
sh-colpatria-Comcel-20140108
sh-colpatria-Comcel-lag
sh-colpatria-ComcelV03
sh-colpatria-ComcelV04
sh-colpatria-ComcelV05
sh-colpatria-ComcelV06
sh-colpatria-Comcelv13
sh-colpatria-cupos
sh-colpatria-modelos
sh-colpatria-old
sh-colpatria-PARAM-1
sh-colpatria-PARAM-2
sh-colpatria-Param1
sh-colpatria-Param2
sh-colpatria-Param2-cupos
sh-colpatria-Previncular
sh-colpatria-Previncular-1
sh-colpatria-Previncular-1-20140108
sh-colpatria-Previncular-1-bckup
sh-colpatria-Previncular-1-lag
sh-colpatria-Previncular-1-lag2
sh-colpatria-Previncular-1-nopaso
sh-colpatria-Previncular-1-V04
sh-colpatria-Previncular-1-V04-lg
sh-colpatria-Previncular-1-V05
sh-colpatria-Previncular-2
sh-colpatria-previncular-nofin
sh-colpatria-previncular-noreal
sh-colpatria-previncular-noreal-20140108
sh-colpatria-previncular-noreal-bk-2011-10-25
sh-colpatria-previncular-noreal-bk-2011-11-28
sh-colpatria-previncular-noreal-Q
sh-colpatria-previncular-noreal-Q-bk-2011-11-29
sh-colpatria-previncular-noreal-stt
sh-colpatria-previncular-noreal.PROD
sh-colpatria-previncular-noreal.V2
sh-colpatria-previncular-noreal.V6
sh-colpatria-prueba
sh-colpatria-Puntaje
sh-colpatria-Puntaje-20140108
sh-colpatria-Puntaje-lg1
sh-colpatria-Puntaje-V03
sh-colpatria-Puntaje-V04
sh-colpatria-Puntaje-V05
sh-colpatria-Tipo1
sh-colpatria-Tipo1-SinExp
sh-colpatria-variables
sh-colpatria-variables-1
sh-colpatria-variables-1-lag
sh-colpatria-variables-2
sh-colpatria-variables-2-lag
sh-colpatria-variables-3
sh-colpatria-variables-3-lag
sh-colpatria-variables-3V02
sh-colpatria-variables-bckup
sh-colpatria-variables-II
sh-colpatria-variables-II-lag
sh-colpatria-variables-II-xxx
sh-colpatria-variables-lag
sh-colpatria-variables-OTRO
sh-colpatria-variables-WOR
sh-colpatria-variablesV01
sh-colsubsidio
sh-colsubsidio-062006
sh-combina-productos
sh-comcel
sh-comcel-est-semanal
sh-comcel-est-semanal-HUGO
sh-comcel-hist
sh-comceldcifra
sh-comfama-recovalid
sh-comfama-recovalid-bckup
sh-comfenalco
sh-compara-fact
sh-ComparacionCC
sh-compDIREST
sh-compila-BDLDI2-LINEA
sh-compila-BDLDI2-LINEA.log
sh-compila-BDLDI2-LINEA1
sh-compila-BDLDI2-PE
sh-compila-BDLDI2-PE.log
sh-compila-BDLDI2-PE1
sh-compila-bdldir
sh-compila-BDLDIR-BDLDI2
sh-compila-BDLDIR-LINEA
sh-compila-BDLDIR-LINEA.log
sh-compila-BDLDIR-LINEA1
sh-compila-BDLDIR-PE
sh-compila-BDLDIR-PE-UPDATE
sh-compila-BDLDIR-PE1
sh-compila-CARACT-LINEA
sh-compila-CARACT-PE
sh-compila-esp-bdldir
sh-compila-esp-excltel
sh-compila-esp-excltel.log1
sh-compila-excltel
sh-compila-fralog
sh-compila-fuentes-valores
sh-compila-fuentes-valores-bk-20100924
sh-compila-fuentes-valores-pe
sh-compila-fuentes-valoresV01
sh-compila-fuentes-valoresV01-1
sh-compila-ICGKAR-Des
sh-compila-PE-BDLDIR
sh-compila-todo
sh-compila-todo-BCK1
sh-compilar-rgh
sh-compracartera
sh-compracartera-bancaria
sh-compracartera-V01
sh-compracartera-V01-BCK1
sh-compracartera-V01-BCK2
sh-compracartera-V01-BCK3
sh-compracartera-V01-OK1
sh-comultra-batch
sh-conavi
sh-conavi-agosto
sh-conavi-log
sh-conavi-old
sh-conavi-pru
sh-configura-java
sh-configura-vhf
sh-coninfo
sh-cons-980001
sh-cons-his
sh-cons-HUELLA
sh-cons-huella-auto
sh-cons-HUELLA.OLD
sh-cons-pespecial
sh-cons-VALIDADO
sh-cons-valido
sh-ConsEmpresarial
sh-consuESTADIS
sh-consulta-load
sh-consulta-monitor
sh-consulta-new
sh-ConsultaCamaras
sh-ConsultaCamaras-20120523
sh-ConsultaCamaras-mod
sh-consultados-citi
sh-consultados-citi-20090708
sh-consultados-citi-proc
sh-consultados-citi-proc-20100126
sh-consultas
sh-consultas-16SEP02
sh-consultas-batch
sh-consultas-batch-20140801
sh-consultas-batch-actual
sh-consultas-batch-actual-20140108
sh-consultas-batch-actual-lag
sh-consultas-batch-actual-v03
sh-consultas-batch-actual-v05
sh-consultas-batch-actualPV
sh-consultas-batch-bckup
sh-consultas-batch-lag
sh-consultas-batch-V02
sh-consultas-batch-V04
sh-consultas-batchPV
sh-consultas-ciudadanos
sh-consultas-ciudadanos-ok1
sh-consultas-ciudadanos-ok2
sh-consultas-completo
sh-consultas-informe
sh-consultas-informe.ini
sh-consultas-jamar
sh-consultas-jamar-20140108
sh-consultas-juridicos
sh-consultas-juridicos-desa
sh-consultas-juridicos-reco
sh-consultas-juridicos-reco-bkp
sh-consultas-juridicosV01
sh-consultas-vipbcs
sh-consultas-vipcol
sh-ConsultaValidacionCC
sh-conteo-oblig-cuentas
sh-conteomonitor
sh-conting-ftes
sh-conting-ftes-OK1
sh-conting-ftes-OK2
sh-contingencia
sh-control-extracupos
sh-control-extracupos-vhf
sh-control-extracupos.ant
sh-control-VISA
sh-conv-ant-new
sh-conv-cifin-datacr-lg
sh-conv-maestro-datacr
sh-conversion-cifin
sh-conversion-cifin-lg
sh-conversion-disenos-mae-DTC
sh-conversion-disenos-mae-DTC-ANT
sh-conversiones-cifin
sh-convertir-arch-bbva
sh-convertir-cifin
sh-convertir-cifin-bbva
sh-convertir-cifin-hsbc
sh-convertir-cifin-hsbc-cv
sh-convertir-cifin-hsbc-gj
sh-convertir-cifin-hsbc-v02
sh-convertir-cifin-hsbc-V03
sh-convpresc-occ
sh-conweb
sh-coomeva
sh-coomeva-mayinfo
sh-coomeva-mayinfo-20140108
sh-coomeva-mayinfo-II
sh-coomeva-mayinfoI-II
sh-coomeva-mayinfoPV
sh-coomeva-mayinfoV04
sh-coomeva-mayinfoV05
sh-coopantex
sh-cooprofesores-batch
sh-cooprudea
sh-cooptenjo-filtros
sh-cooptenjo-filtros-bk-20100205
sh-cooptenjo-filtros-bk-20100209
sh-cooptenjo-filtros-bk-20100212
sh-cooptenjo-filtros-V01
sh-cooptenjo-filtros-V01-OK1
sh-copia-ICMCHK
sh-copia-ICMCHK-OK1
sh-copia-ICMCHK-OK2
sh-copia-ICMCHK-OK3
sh-copiado-a-san
sh-copiado-a-san-OK1
sh-copiado-a-san-OK2
sh-copialog-citiwap
sh-copialog-citiwapPV
sh-copiar
sh-copiar-db
sh-copiar-pruebas
sh-copiar-pruebas-db
sh-copiar-rechazos
sh-copiaract-orig
sh-copieDatos
sh-copy-ICBCON
sh-Corpbanca-inf-TDC
sh-Corpbanca-Leasing
sh-Corpbanca-Leasing-lag
sh-Corpbanca-Rentabilizacion
sh-Corpbanca-Rentabilizacion-ant
sh-Corpbanca-Rentabilizacion-lag
sh-corre-caracteristicas
sh-corre-caracteristicas-original
sh-corte-mensual
sh-corte-mensual-2012-02-15
sh-corte-mensual-borra
sh-cp-icdb
sh-cp-lotes-Decisor
sh-cp-lotes-Decisor-BCK1
sh-cp-lotes-Decisor-BCK2
sh-cp-lotes-Decisor-BCK3
sh-cp-lotes-Decisor-BCK4
sh-cp-lotes-Decisor-V01
sh-cp-lotes-Decisor-V01-OK1
sh-cp-lotes-Decisor-V01-OK2
sh-cpyCHK-portal
sh-cpyCRE-portal
sh-crea-fralog-diario
sh-credivalores-especial
sh-credivalores-especial-bk-20100903
sh-credivalores-especial-bk-20100920
sh-credivalores-especial-bk-20101022
sh-credivalores-especial-bk-20101102
sh-credivalores-especial-bk-20101105
sh-credivalores-especialpru2409
sh-crontask
sh-cruces-bogota
sh-cruces-coop
sh-ctacifin
sh-ctl-conversiones
sh-ctl003new
sh-ctlact03
sh-ctlact12
sh-ctlact12-new
sh-ctlact12.old
sh-ctln97
sh-ctln97-campos
sh-ctln97v1.0
sh-ctln97v2.0
sh-ctlutl01
sh-ctlutl02
sh-ctlutl02.old
sh-ctlutl18
sh-ctlutl24
sh-ctlutl66
sh-cuota-banquero
sh-cuotamercado-pj
sh-cuotamercado-pj-lag
sh-cuotas-CFA
sh-cuposCAB-mercadeo
sh-cuposTDC
sh-cuposTDC-bckup
sh-cuposTDC-bogota
sh-cuposTDC-colpatria
sh-cuposTDC-colpatria2
sh-cuposTDC-conbase
sh-cuposTDC-dav
sh-cuposTDC-mayoruso
sh-cuposTDC-mayoruso-bblg
sh-cuposTDC-mayoruso-bbog
sh-cuposTDC-mayoruso-bbog-bckup
sh-cuposTDC-mayoruso-bckup
sh-cuposTDC-mediana
sh-cuposTDC-mediana-lag
sh-cuposTDC-mercadeo
sh-cuposTDC-mercadeo-serfiansa
sh-cuposTDC-serfinansa
sh-cuposTDC.old
sh-cut
sh-cvcifdcre
sh-cvcifdcre-ant
sh-cvcifdcre-new
sh-cvcifdcre-pru
sh-cvcifdcre-v002
sh-cvs
sh-cvs_old
sh-cvs-db2
sh-cvs-ok
sh-cvs.CVS.20051005174555
sh-dario-f
sh-dataclientes
sh-dataclientes-club
sh-dataclientes-I
sh-dataclientes-I.ORI
sh-dataclientes-II
sh-dataclientes-JG
sh-datah
sh-datahost-colpatria
sh-datahost-colpatria-lagr
sh-datainforme
sh-datainforme-apoyar
sh-datainforme-BanCred
sh-datainforme-BanCred-bckup
sh-datainforme-BanCred-bu
sh-datainforme-BanCred-TMP
sh-datainforme-BanCred-V03
sh-datainforme-BanCred-V04
sh-datainforme-BanCredPV
sh-datainforme-BBVA
sh-datainforme-bcol-aut
sh-datainforme-bcol-aut-2012-07-23
sh-datainforme-bcol-aut-2012-10-16
sh-datainforme-bcol-aut-20120905
sh-datainforme-bcol-aut-ant
sh-datainforme-bcol-aut-DAR
sh-datainforme-bcol-aut-Dario
sh-datainforme-bcol-aut-imsg
sh-datainforme-bcol-aut-V02
sh-datainforme-bcol-aut-V03
sh-datainforme-bcol-aut-V04
sh-datainforme-bcol-aut-V05
sh-datainforme-bcol-aut-V05-BCK1
sh-datainforme-bcol-aut-V05-BCK2
sh-datainforme-bcol-aut-V05-BCK3
sh-datainforme-bcol-aut-V06
sh-datainforme-CALIF
sh-datainforme-cootramed
sh-datainforme-DAV
sh-datainforme-FEC
sh-datainforme-FNA
sh-datainforme-HIS
sh-datainforme-SAN
sh-datainforme-SAN-sin-ley
sh-datainforme-sin-ley
sh-datainforme-sin-ley-lag
sh-datainforme-sufi-aut
sh-datainforme-YAN
sh-datarecla
sh-datarecla-nvo
sh-dataud-junio
sh-datos-ciudadanos
sh-dav-consumo
sh-dav-hipotecario
sh-dav1
sh-davivienda
sh-davivienda-consumo
sh-davivienda-hipotecario
sh-davivienda-HIS
sh-davivienda-infofin
sh-davivienda-infofin-des
sh-davivienda-infofin-v01
sh-davivienda-MMX
sh-davivienda-new
sh-davivienda-perfil
sh-davivienda-perfil_VerEnDesa
sh-davivienda-perfil-20131118
sh-davivienda-perfil-bk-20100803
sh-davivienda-perfil-prba
sh-davivienda-perfil-pru
sh-davivienda-perfilV04
sh-davivienda-quanto
sh-davivienda-quantoV01
sh-davivienda-sup
sh-daviviendaConPre
sh-daviviendaPreScreen
sh-daviviendaProc02
sh-daviviendaSinPre
sh-db
sh-db-sinpagosvol
sh-db2-com
sh-dcifra-CMM
sh-dcifra-computec
sh-deborrar
sh-debug-icgcon
sh-decilESTADIS
sh-delete-huellas
sh-delete-huellas-bck
sh-delta
sh-desa
sh-desbloqueo-cte
sh-designa
sh-designa-20090617
sh-designa-20100104
sh-designa-comultrasan
sh-designa-comultrasan-des
sh-designa-comultrasan-xxx
sh-designa-lag
sh-designa-lag2
sh-detalle-tags
sh-deudas-monitoreoFNG
sh-df
sh-DHLotes
sh-DHLotes-bk-20120713
sh-dian
sh-diario
sh-difcarbdl
sh-diff-especiales
sh-diff-prog.prn
sh-dir-telmex
sh-dircod
sh-dircod-V02
sh-dirdoc
sh-dirdoc_pv
sh-dirdoc-250609-1510
sh-dirdoc-AAM-d
sh-dirdocm
sh-direcc
sh-direcciones
sh-direcciones-batch
sh-direcciones-batch-ANTERIOR
sh-direcciones-batch-cv
sh-direcciones-batch-ori-nd
sh-direcciones-batch-V03
sh-direcciones-batch-v04
sh-direcciones-refinancia
sh-direccionesbog
sh-dirreal
sh-display-especiales
sh-dmmaxESTADIS
sh-dptosESTADIS
sh-dtc-des.V1
sh-dtcbatch
sh-dtcbatch-r
sh-dtrgeli
sh-ecuador
sh-eje07p
sh-ejec003
sh-ejecute-captura-fact
sh-ejecute-captura-fact.ORI
sh-ejecute-sh-ejecute-T8-ICMCHK
sh-ejecute-sh-UTLRECONS-VLR
sh-ejecute-sh-UTLRECONS-VLR-OK1
sh-ejecute-T8-BDSCORE
sh-ejecute-T8-ICMCHK-OK1
sh-ejecute-T8-ICMCHK-OK2
sh-ejecute-T8-ICMCHK-OK3
sh-ejecute-T8-ICMCHK-OK4
sh-ejecute-T8-SCORES
sh-ejedirecc
sh-ejedirecc-ant-nd
sh-ejedirecc-bdi
sh-ejedirecc-email
sh-ejedirecc-ori-nd
sh-ejedirecc.20030530
sh-eli-fisica-car
sh-eli-fisica-car-jjmr
sh-eli-fisica-car-V02
sh-eli-fisica-car-V03
sh-eli-fisica-cte
sh-eli-fisica-cte-jjmr
sh-eli-fisica-cte-V02
sh-eli-logica-car
sh-eli-logica-car-jjmr
sh-eli-logica-car-V02
sh-eli-logica-cte
sh-eli-logica-cte-jjmr
sh-eli-logica-cte-V02
sh-eli-total
sh-eli-total-logi
sh-eli-total-pv
sh-elimina-car-esp
sh-elimina-car-esp-CIT
sh-elimina-car-esp-DAR
sh-elimina-car-esp-V01
sh-elimina-car-esp-V01-PRU1
sh-elimina-car-esp-V02
sh-elimina-horas-dataud
sh-elimina-horas-dataud-ant
sh-elimina-horas-dataud-DAR
sh-elimina-horas-dataud2
sh-elimina-horas-facsopt
sh-elimina-horas-icbtco
sh-elimina-huellas
sh-encripcion-id
sh-endeud-actualiza
sh-endeud-actualiza-gar
sh-endeud-aperturas
sh-endeud-copiaactualiza
sh-endeud-garantias
sh-ENDEUD-MATRIX
sh-endeud-nuevas
sh-endeud-param
sh-endeud-reclamos
sh-endeud-reclamos-ant
sh-endeud-reclamos-V02
sh-ENDEUD-SFINA-I
sh-ENDEUD-SFINA-I-bak20090529
sh-ENDEUD-SFINA-I-bckup
sh-ENDEUD-SFINA-I-lag
sh-ENDEUD-SFINA-II
sh-ENDEUD-SFINA-II-bak20120404
sh-ENDEUD-VISOR
sh-endeuda-falabella
sh-endeuda-financiero
sh-endeuda-popular
sh-endeuda-sufi
sh-endeuda-sufi-lag
sh-endeudamiento
sh-endeudamiento-estrategico
sh-endeudamiento-estrategico-prueba
sh-endeudamiento-fabricio
sh-endeudamiento-financiero
sh-endeudamiento-gar
sh-endeudamiento-juridico-HELM
sh-endeudamiento-juridico-HELM-d
sh-endeudamiento-lagr
sh-endeudamiento-PJ
sh-err163
sh-eso
sh-esp-bkpesta
sh-esp-mensuales
sh-espbackup
sh-espCOPYIC
sh-espDataclientes
sh-espdiario
sh-especial
sh-especial-COVINOC
sh-especial-old
sh-especial-old-OCTUBRE
sh-especial2
sh-especial3
sh-especiales-prueba-new
sh-especiales-prueba-old
sh-especialTDC
sh-especialTDC.V1
sh-espera-proceso
sh-espera-proceso+
sh-espestadis
sh-espESTADISTICA
sh-espEXTINFO
sh-espHuellas
sh-espimpresion
sh-espNUEVOS
sh-espOPERAR
sh-espotros
sh-espPRODUCTO
sh-espRECONOCER
sh-espRECONOCER-20070321
sh-espRECONOCER-20090929
sh-espRECONOCER-20091019
sh-espRECONOCER-2012
sh-espRECONOCER-bk-2010-01-28
sh-espRECONOCER-LAG
sh-espRECONOCER-menesp
sh-espRECONOCER-RGH
sh-espRECONOCER-V0002
sh-espRECONOCER-V0003
sh-espscore
sh-espscore-old-050629
sh-espSUPERIOR
sh-espSUSCRIPTORES
sh-espVALIDAR
sh-esqueleto
sh-est1
sh-est1-f
sh-Esta-Info-1
sh-Esta-Info-2
sh-Esta-Info-4
sh-Esta-Info-C
sh-estad-apert-evidente
sh-estad-dc
sh-estad-dcdia
sh-estad-fff
sh-estad-fsdia
sh-estad-susc
sh-estadCON
sh-estadia
sh-estadia2
sh-estadis-acierta
sh-estadis-copialin
sh-estadis-copialin-fac
sh-estadis-dia1
sh-estadis-diaspos
sh-estadis-direccion
sh-estadis-inilinea
sh-estadis-inilinea-fac
sh-estadis-mes1
sh-estadis-mes1-ori
sh-estadis-mes2
sh-ESTADIS-SUS
sh-ESTADIS-SUS-lg
sh-estadis-suscriptor
sh-ESTADIS00Presid
sh-ESTADISapert
sh-ESTADIScerr
sh-ESTADISconsu
sh-ESTADISdmmax
sh-ESTADISdptos
sh-ESTADISfiles
sh-estadisMERCADEO
sh-estadisPORTAL
sh-ESTADISsector
sh-estadisticas-pasivo
sh-estadistico
sh-estadistico-dataest
sh-estadisticos-csv
sh-estimador-citi
sh-estley2009
sh-estrategicos-resumen
sh-estrato-quanto
sh-estraval-filtros
sh-estsit1
sh-estsit2
sh-etb-dcifra
sh-ext-ICMCHK
sh-extrac-amnistia-super
sh-extraccion-aperturas
sh-extraccion-aperturas-ant
sh-extraccion-consultas
sh-extraccion-consultas-free
sh-extraccion-marketing
sh-extraccion-vigentes-periodo
sh-extraccion-vigentes-periodo-ant
sh-extrae
sh-extrae-bdi
sh-extrae-ecu
sh-extrae-endeuda
sh-extrae-endeuda-20071220
sh-extrae-endeudaPV
sh-extrae-especial
sh-extrae-Granahorrar
sh-extrae-icbfac
sh-extrae-icbtco
sh-extrae-icmchk
sh-extrae-ICMCRE
sh-extrae-ID
sh-extrae-interno
sh-extrae-maes
sh-extrae-maes.sgmnto
sh-extrae-maescr
sh-extrae-monitor
sh-extrae-superior
sh-extrae-sus
sh-extrae.20030530
sh-extrae1a
sh-extraer-monitor
sh-extraer-resumido
sh-extraeresu
sh-extranj
sh-f
sh-facest
sh-fact
sh-fact-julio-2010
sh-facturacion
sh-facturacion-2
sh-facturacion-20100826
sh-facturacion-20120326
sh-facturacion-cavs
sh-facturacion-certif
sh-facturacion-correo
sh-facturacion-dar
sh-facturacion-demo
sh-facturacion-desa
sh-facturacion-desa1
sh-facturacion-desa2
sh-facturacion-gj
sh-facturacion-gj1
sh-facturacion-inic
sh-facturacion-V001
sh-facturacion-V02
sh-facturacion-V03
sh-facturacion-V03-desa
sh-facturacion-V03-desa-cv
sh-facturacion-V04
sh-facturacion-V04-cv
sh-facturacion-V04-cv1
sh-facturacion-V05
sh-facturacion-V05-cv
sh-facturacion-V06-cv
sh-facturacion-V06-cv-prdt
sh-facturacion-V07-cv
sh-facturacion-V07-cv-ant
sh-facturacion-V07-cv-jjmr
sh-facturacion-V07-cv-nvo
sh-facturacion-vhf
sh-faculis
sh-faculis-des
sh-faculis-des-1
sh-faculis-des-2
sh-faculis-dia
sh-faculis-dia-ant
sh-faculis-dia-cavs
sh-faculis-dia-V01
sh-faculis-dia-vhf
sh-faculis-dia.20120326
sh-faculis-dos
sh-faculis-lg
sh-fallecidos-adj
sh-fallecidos-adj-BCK1
sh-fallecidos-nit
sh-fatura-dobles
sh-fdbu001
sh-fdbu002
sh-fdbu004
sh-fecha-config-ICMCRE
sh-FECHA-CONT
sh-FECHA-CONT-ORI
sh-filesESTADIS
sh-filtro-comedal
sh-filtro-cotrafa
sh-filtro-sufinanc
sh-filtros-avvillas
sh-filtros-avvillasV05
sh-filtros-finamerica
sh-filtros-general
sh-filtros-generalPV
sh-filtros-generalPV1
sh-filtroTDC-visa
sh-fina-internacional
sh-finmes-pes
sh-finmes-pes2
sh-firma
sh-firma-blanco
sh-firma-patch
sh-firma-patch.F-OLD!
sh-firma-patch1-6
sh-floran
sh-flt-actual
sh-flt-ley
sh-fna
sh-fna-bdi
sh-fnaborra
sh-fnadcifra-bdant
sh-formato-cifin
sh-forren
sh-fraadi
sh-fraaud
sh-fraaud-vhf
sh-frabdu
sh-frabdu-pr
sh-fraest
sh-fraest-ant
sh-fraest-des
sh-FRAFAC
sh-fralog
sh-fralog-csv
sh-fralog.001
sh-fralog.002
sh-frared-rmb
sh-frared-rmb-v4
sh-frared01
sh-frared01-
sh-ftp-1
sh-ftp-av
sh-fuerza-mayor
sh-ganadero
sh-genera-ApeVsCons
sh-genera-ApeVsCons-ant
sh-genera-ApeVsCons-ant-2
sh-genera-ApeVsCons-ant-N
sh-genera-cons
sh-genera-indexadobatch
sh-genere-listas
sh-genere-listas-OK1
sh-gestar
sh-glbnt-sub-baj-ser
sh-glbnt-sub-ser
sh-globant
sh-gmz
sh-graciela
sh-gran-maes
sh-granahorrar-mas
sh-granahorrar-pcp1
sh-granahorrar-reno
sh-granahorrar-score
sh-grep
sh-grep-car
sh-grep-chk
sh-grep-DAV
sh-grep-endeuda
sh-grep-ICBTCO
sh-grep-ICMCHK
sh-grep-ICMCHK-AAM
sh-grep-ICMCHK-V2
sh-grep-ICMCRE
sh-grep-ICMCRE-ACTP
sh-grep-ICMCRE-INAP
sh-grep-ICMCRE-INSUS
sh-grep-ICMCRE-NIT
sh-grep-ICMCRE-NIT-INACT
sh-grep-ICMCRE-ppal
sh-grep-ICMCRE-V2
sh-grep-ICMCRE-V3
sh-grep-ley
sh-grep-MERCADEO
sh-grep-prueba
sh-grep-sus
sh-greps-fraude
sh-greps-icbfac-frafac
sh-grepsus-REPESCA
sh-GyF-HC-Decisor
sh-GyF-HC-Decisor-2012-08-03
sh-GyF-HC-Decisor-2012-08-22
sh-GyF-HC-Decisor-2012-09-03
sh-GyF-HC-Decisor-2013-10-15
sh-GyF-HC-Decisor-OK1
sh-GyF-HC-Decisor-OK2
sh-GyF-HC-Decisor-Prod
sh-GyF-HC-Decisor-tmp
sh-GyF-HC-Decisor-V01
sh-GyF-HC-Decisor-V02
sh-header-cifin
sh-hgr
sh-hhhiii
sh-hist-pes
sh-hist-pes2
sh-historestrato
sh-historico-desa
sh-historicos
sh-historicos-BCK1
sh-hpeg
sh-huecos
sh-huellas-bancol
sh-huellas-especial
sh-huellas-mes
sh-icbcon001
sh-icbtco
sh-icbtco-TEC
sh-icbtcoESTADIS
sh-icdb_aux
sh-ice04
sh-ice05
sh-ice06
sh-ice26
sh-ice27
sh-iceprebbva583
sh-iceprebbva583-lag
sh-icestd81-villas
sh-icestd81AVV-2
sh-icestd81AVV-2-bk20100121
sh-icestd81AVV-2-lag
sh-icestd81AVV-2-OLD
sh-icestd81AVV-2-V01
sh-icestd81AVV-2-V02
sh-icestd81AVV-2-V03
sh-icestd81AVV-2-val
sh-icestd81AVV-2catalogacion
sh-icestd81AVV-2modificada
sh-icestd81AVV-2V05
sh-icestd81AVV-bk-20100303
sh-icevalest01
sh-icevalest01-pru
sh-icg2020
sh-icgban
sh-icgbdu
sh-icgchgpro
sh-icgcpl
sh-ICGD12-independientes
sh-ICGD21-independientes
sh-ICGD22-independientes
sh-ICGD25-independientes
sh-ICGD37-independientes
sh-ICGD38-batch
sh-ICGD38-batch-ORI
sh-ICGD38-batch.ok
sh-ICGD38-independientes
sh-ICGD40-independientes
sh-ICGD41-independientes
sh-ICGD43-independientes
sh-ICGD44-independientes
sh-ICGD47-independientes
sh-ICGD48-batch++
sh-ICGD48-batch++-V01
sh-ICGD48-batch++-V01-BCK1
sh-ICGD48-batch++-V01-OK1
sh-ICGD48-batch++-V01-OK2
sh-ICGD48-batch++-V01-OK3
sh-ICGD48-independientes
sh-ICGD49-independientes
sh-ICGD53-independientes
sh-ICGD54D-independientes
sh-ICGD56-independientes
sh-ICGD57-independientes
sh-ICGD60-independientes
sh-ICGD61D-independientes
sh-ICGD62D-independientes
sh-ICGD65D-independientes
sh-ICGD67D-batch
sh-ICGD67D-independientes
sh-ICGD69D-independientes
sh-ICGD73D-independientes
sh-ICGD75D-independientes
sh-ICGD84D-independientes
sh-ICGD85-independientes
sh-ICGD86-independientes
sh-icgdim
sh-icgley
sh-icgley-2012-10-04
sh-icgleyjjm
sh-icgleyrmb
sh-icgnhc
sh-icgnhcii
sh-icgnhct
sh-icgnhvhf
sh-icgpru
sh-icgpru-end
sh-icgpru-fac
sh-icgpru-ley
sh-icgpru-m
sh-icgpru-pjpn
sh-icgpru-tco
sh-icgpru01
sh-icgpru02
sh-icgprugj
sh-icgprunue
sh-icgprunue-ley
sh-icgpruxx
sh-ICGS06-independientes
sh-ICGS07-BATCH
sh-ICGS07-inde
sh-ICGS07-independientes
sh-ICGS10-independientes
sh-ICGS18-independientes
sh-ICGS37-independientes
sh-ICGS38-independientes
sh-ICGS46-independientes
sh-ICGS49-independientes
sh-ICGS56-independientes
sh-ICGS59D-independientes
sh-ICGS61-independientes
sh-ICGS65-independientes
sh-ICGS65-independientes.log
sh-ICGS67-independientes
sh-icinco
sh-icjadmciu
sh-icjadmdir
sh-icjadmmail
sh-icjadmtel
sh-icjcla
sh-icjcla-ANT
sh-icjcla-fac
sh-icjcla-old
sh-icjcla-web
sh-icjcla.07012003
sh-icjclawil1
sh-icjlogpesvno
sh-icjsus
SH-ICJSUS
sh-icjter
sh-ICMCOPYMES
sh-ICMCOPYMES-bk-2011-11-18
sh-ICMCRE-NIT
sh-ICMCRE-SFINA
sh-ICMCRE-SFINA-lag
sh-ICMCRE-TDC
sh-ICMCRE-VISOR
sh-icmcrebcs
sh-icmcreESTADIS
sh-ICMSALDOSUS
sh-ICMVAL-ata-5
sh-ICMVAL-ata-5-CC
sh-ICMVAL-ata-5-OT
sh-ICMVAL-ata-5-OT_old
sh-icn063
sh-icn28f
sh-icn28ff
sh-icn31f
sh-icn31fant
sh-icn31fesp
sh-icnebf
sh-icsac1
sh-icsac1-eje
sh-id
sh-id-archs
sh-idxdireccion-telmex
sh-idxtelefono-telmex
sh-if
sh-impresion
sh-impresion-20070321
sh-impresion-bancafe
sh-impresion-bdant
sh-impresion-bel
sh-impresion-cco
sh-impresion-CCO
sh-impresion-colp
sh-impresion-conavi
sh-impresion-consultados
sh-impresion-consultados-20070321
sh-impresion-consultas
sh-impresion-consultas-20070321
sh-impresion-especial
sh-impresion-especial-20070321
sh-impresion-fna
sh-impresion-fna-20070321
sh-impresion-fnaborra
sh-impresion-gran
sh-impresion-mega
sh-impresion-recsin
sh-impresion-recsin-20070321
sh-impresion-unica
sh-impresion-unica-20091125
sh-impresion-unica-old
sh-impresionfna.z
sh-impresionfna1.z
sh-inc-fecurr
sh-includ-ICMVAL
sh-includ-ICMVAL-ORI
sh-include-amni-his
sh-include-fecha-amni
sh-include-ICMVAL
sh-inclusion-identificaciones
sh-index-bbva
sh-index-ICGD61
sh-index-ICGD61-V1
sh-index-ICGD61-V2
sh-index-ICGD61-V2-OK1
sh-index-ICGD61-V2-OK2
sh-index-ICGD62
sh-index-ICGD62-V01
sh-index-ICGD62-V02
sh-index-ICGD62-V02-BCK1
sh-index-ICGD62-V03
sh-index-novedad
sh-index-novedad.v1
sh-index-pagos
sh-indexa-reclamos
sh-indexado-batch
sh-indexado-batch-ant
sh-INF-APE-vs-CONS
sh-inferencia-negados
sh-inferencia-negados-2011
sh-inferencia-negados-2011_BF
sh-inferencia-negados-2011_bf2
sh-inferencia-negados-2011_bf3
sh-inferencia-negados-2011_pruebabf
sh-inferencia-negados-2011-ok1
sh-inferencia-negados-gen
sh-inferencia-negados-gen_v01
sh-inferencia-negados-gen-20111229
sh-inflogpesvno
sh-info-gral+endeuda
sh-info-pwhc
sh-info-standard
sh-infoEXCEL
sh-infoEXCEL-AVVILLAS
sh-infoEXCEL-BANK
sh-infoEXCEL-bcred
sh-infoEXCEL-CAJS
sh-infoEXCEL-CALIF
sh-infoEXCEL-Colpatria
sh-infoEXCEL-COMCEL
sh-infoEXCEL-ENDEUDA
sh-infoEXCEL-movistar
sh-infoEXCEL-sinPESVNO
sh-infoEXCEL-SUS
sh-informe-amnis-super
sh-informe-cuotas
sh-informe-endeuda
sh-informe-endeuda-1
sh-informe-endeuda-1-lag
sh-informe-endeuda-SERF
sh-informe-total
sh-informe-VISA-I
sh-informe-VISA-II
sh-informes-byington
sh-informes-byington-20120810
sh-infoyarumal
sh-inicializa-vhf
sh-iniessi
sh-inimesest
sh-ins
sh-inserte-en-PROG
sh-inserte-START
sh-instancias-icgcon
sh-interbanco
sh-inters
sh-j
sh-ja
sh-java-5
sh-juridicos-resumen
sh-kill-socker
sh-ley
sh-ley1
sh-leyinsolvencia
sh-leyinsolvencia-lag
sh-lg-procloop
sh-lg-pruc
sh-lg-prugrep
sh-lg-pruloop
sh-lglglg
sh-libranza-davivienda
sh-libre
sh-librepr
sh-link-oficinas
sh-lista-especiales
sh-lista-produccion
sh-llllllll
sh-log-falabella
sh-log-superfil
sh-log-superfil-20110503
sh-log-superfil-bk-20100826
sh-log-superfil-bk-20101026
sh-log-superfil-bk-20101213
sh-log-superfil-bk-20110104
sh-log-superfil-bk-20110215
sh-log-superfil-bk20110131
sh-log-superfil-icimsd
sh-log-superfil-ORI
sh-log-superfil-prueba
sh-log-superfil-req1175-15022011
sh-log-superfil-v02
sh-log-superfil-v03
sh-log-superfil-V04
sh-log-superfil-V05
sh-log-superfil-V06
sh-log-tr
sh-logs-Decisor
sh-logs-Decisor-2012-05-04
sh-logs-Decisor-2012-07-30
sh-logs-Decisor-2012-09-03
sh-logs-Decisor-2012-10-01
sh-logs-Decisor-20120911
sh-logs-Decisor-2013-11-18
sh-logs-Decisor-Aux
sh-logs-Decisor-BCK1
sh-logs-Decisor-BCK2
sh-logs-Decisor-BCK3
sh-logs-Decisor-BCK4
sh-logs-Decisor-BCK5
sh-logs-Decisor-BCK6
sh-logs-Decisor-BCK7
sh-logs-Decisor-BCK8
sh-logs-Decisor-BCK9
sh-logs-Decisor-bk-2012-05-23
sh-logs-Decisor-bk-2012-05-23-rgh
sh-logs-Decisor-bk-2012-05-23-rgh2
sh-logs-Decisor-bk-2012-05-28
sh-logs-Decisor-CIG
sh-logs-Decisor-DAR
sh-logs-Decisor-dlm
sh-logs-Decisor-dlm-O
sh-logs-Decisor-GirosyFinanazas-consultas-batch
sh-logs-Decisor-GirosyFinanzas-consultas-batch-bk-2012-04-04
sh-logs-Decisor-GirosyFinanzas-consultas-batch-bk-2012-04-10
sh-logs-Decisor-GirosyFinanzas-consultas-batch-J
sh-logs-Decisor-GirosyFinanzas-consultas-batch-RGH
sh-logs-Decisor-GirosyFinanzas-consultas-batch2
sh-logs-Decisor-icimsd
sh-logs-Decisor-mal
sh-logs-Decisor-O
sh-logs-Decisor-OK
sh-logs-Decisor-prod
sh-logs-Decisor-Prod131118
sh-logs-Decisor-RGH
sh-logs-Decisor-RGH-2012-05-23-FINAL
sh-logs-Decisor-RGH-bk-2012-03-07
sh-logs-Decisor-RGH-COL-TDC
sh-logs-Decisor-RGH-NEW
sh-logs-Decisor-RGH2
sh-logs-Decisor-RGH2-DAR
sh-logs-Decisor-RGH3
sh-logs-Decisor-sin-fecha
sh-logs-Decisor-sin-fecha-2
sh-logs-Decisor-TMP-RGH
sh-logs-Decisor-V01
sh-logs-Decisor-V02
sh-logs-Decisor-V02-OK1
sh-logs-Decisor-V03
sh-logs-Decisor-V04
sh-logs-Decisor-V04-DLM
sh-logs-Decisor-V04-OK1
sh-logs-Decisor-V04-OK2
sh-logs-Decisor-V05
sh-logs-Decisor-V05-OK1
sh-logs-Decisor-V06
sh-logs-Decisor-V07
sh-logs-Decisor-V08-OK
sh-logs-Decisor-V09
sh-logs-Decisor-V10
sh-logs-Decisor-V11
sh-logs-Decisor-V11-2012-10-02
sh-logs-Decisor-V12
sh-logs-Decisor-WKK
sh-lrt
sh-m
sh-maesplanComp
sh-maesplanCompilar
sh-maestroclientes-USA
sh-mail-fallas-cobol
sh-mail-fallas-cobol-bckup
sh-mail-fallas-cobol-lag
sh-mandar
sh-manfac
sh-manfac2
sh-mantenimiento-logval
sh-masivo-evidente
sh-matriz-cuposTDC
sh-matriz-moras
sh-matriz-moras-bk-2011-10-28-CON-CAMBIOS
sh-matriz-moras.V1
sh-matriz-rodamiento
sh-matriz-rodamiento-ACIERTA
sh-matriz-rodamiento-ACIERTA-pru
sh-matriz-rodamiento-ACIERTA.v0
sh-matriz-rodamiento1
sh-matriz-rodamiento1-lg
sh-matriz-rodamiento1-prueba
sh-matriz-saldos
sh-matrizedad
sh-matrizedad-prin
sh-matrizhistoria
sh-matrizTDC-inactiva
sh-mayinf
sh-mayorinfo-dann
sh-mayorinfo-dann-lg
sh-mayorinfo-dann-orig
sh-mayorinfo-pichincha
sh-mayorinfo-plus
sh-mayorinfo-plus-des
sh-md5
sh-md5-ant
sh-md5-ok
sh-md5BF
sh-mdfformat
sh-mdfformat-archivos
sh-megabanco
sh-megabanco-new
sh-megabanco1
sh-menu-TIPO5
sh-MER-VIPS
sh-MERCADEO-ACIERTA
sh-MERCADO-CAJASOCIAL
sh-MERCADO-CAJASOCIAL-CONS
sh-MERCADO-CAJASOCIAL-CONS-ORI
sh-MERCADO-CAJASOCIALpv
sh-MERCADO-CAJASOCIALpv1
sh-MERCADO-CAJASOCIALv02
sh-MERCADO-COLMENA
sh-MERCADO-COLMENA-01
sh-MERCADO-COLMENA-ant
sh-MERCADO-COLMENA-CONS
sh-MERCADO-COLMENA-CONS-ant
sh-MERCADO-COLMENA-CONS-V02
sh-MERCADO-COLMENA-micro
sh-MERCADO-COLMENA-V02
sh-MERCADO-COLMENA-V04
sh-MERCADO-COLMENA-v1.003
sh-MERCADO-COLMENA-v2
sh-mhj-socker
sh-mhj-socker-fin
sh-mhj-socker-JAA
sh-microcredito
sh-migra
sh-migra-space
sh-migracar
sh-migracar-48log
sh-migracar-valores
sh-migracardoc
sh-migracargj
sh-migracion
sh-migracte
sh-migracte-48log
sh-migracte-prod
sh-millon-carac
sh-minformacion-serfinansa
sh-minformacion-serfinansa.v1
sh-mio
sh-mnttvcable
sh-modfecdir
sh-modif-nov-car-batch
sh-modif-nov-car-linea
sh-modif-nov-cte
sh-modifica
sh-modifica-caracteres-citi
sh-modifica-caracteres-citi_V1
sh-modifica-caracteres-citi_V1-OK1
sh-modifica-caracteres-citi-BCK1
sh-modvisa
sh-modvisa.ok
sh-mon
sh-monhijos
sh-monitor
sh-monitor-2007
sh-monitor-3-SUS
sh-monitor-60+
sh-monitor-avanzado
sh-monitor-avanzado1
sh-monitor-base-his
sh-monitor-base-hoy
sh-monitor-base-sus
sh-monitor-calificaciones
sh-monitor-codensa
sh-monitor-conavi
sh-monitor-crediseguro
sh-monitor-ctas
sh-monitor-ctas-bckup
sh-monitor-ctas-old
sh-monitor-ctas-todas
sh-monitor-ctas-todas-bckup
sh-monitor-CUENTAS
sh-monitor-epm
sh-monitor-EPM
sh-monitor-falabella
sh-monitor-fanalca
sh-monitor-grupobancol
sh-monitor-grupobancol_v02
sh-monitor-grupobancol-d
sh-monitor-grupos
sh-monitor-jaac
sh-monitor-movistar
sh-monitor-NIT
sh-monitor-NIT-BDI
sh-monitor-NIT-ICETEX
sh-monitor-NIT-lg
sh-monitor-opciones
sh-monitor-opciones-d
sh-monitor-opciones-des
sh-monitor-opciones-v01
sh-monitor-opciones-v02
sh-monitor-opciones-v02-ok1
sh-monitor-opciones.V3
sh-monitor-opciones.V3B
sh-monitor-opciones.V5
sh-monitor-opcionesTQ
sh-monitor-opcionesTQ_pv
sh-monitor-quala
sh-monitor-refinancia
sh-monitor-refinancia.v1
sh-monitor-refinanciaV03
sh-monitor-sintelcos
sh-monitor-standard
sh-monitor-standard-lg
sh-monitor-subsectores
sh-monitor-subsectores-20110109
sh-monitor-subsectores-desa
sh-monitor-subsectores.v1
sh-monitor-telcos
sh-monitor-TELCOS-MERCADO
sh-monitor-VALORES
sh-monitor-VALORES-lag
sh-monitor-yanbal
sh-monitoreo-icgcon
sh-monitoreo-icgcon-20111006
sh-monitoreo-icgcon-fs
sh-monitoreo-icgcon-OK1
sh-monitoreo-icgcon-V01
sh-monitoreo-icgcon-V02
sh-monitoreo-icgcon-V02-x
sh-monitoreo-icgcon-V03
sh-monitoreo-icgcon-V03-OK1
sh-monitorhis-NIT
sh-monitorICGFRA
sh-monitorICGFRA-20111017
sh-monitorICGFRA-PV
sh-monitorICGFRA-PV.log
sh-monitorICGFRA-vhf
sh-monitorICGFRA.log
sh-MontosObl-mercadeo
sh-MontosObl-mercadeo-bckup
sh-monxcic
sh-morosidad-helm
sh-mosaico-caracteristicas
sh-movistar
sh-movistar-monitor
sh-movistar-monitor-1
sh-movistar-monitor-1-bckup
sh-movistar-monitor-2
sh-movistar-monitor-2-bckup
sh-movistar-prepos
sh-movistar-prueba
sh-muestra
sh-mv-icbak
sh-mv-obj-especiales.prn
sh-mv-objetos-batch
sh-mv-objetos-intel
sh-mv-objetos-intel-ANT
sh-nelson-decisor-amb
sh-nocobra
sh-nomsus-prba
sh-nov-sus-cla
sh-nov-sus-cla-V01
sh-nov-sus-cla-V02
sh-nov-sus-cla-v2
sh-nov29
sh-novedad-cierres
sh-novedad-impagos
sh-novedades-BBVA
sh-novedades-BBVA.v0
sh-novedat
sh-nuevas
sh-nuevo-diario-superior
sh-nuevo-NIT
sh-occeldcifra
sh-occidente
sh-occidente-hipotecario
sh-occidente-infoporobligacion
sh-occidente-infoporobligacion-bk-20100212
sh-ola-consultas
sh-old1
sh-ONG
sh-operacion
sh-operacion-V01
sh-operacion-V01-PRU1
sh-operacion-V01-PRU2
sh-orb
sh-orbitel
sh-ord014
sh-ord014p
sh-ordena
sh-p
sh-pa
sh-paract
sh-paralelo
sh-parametros-facturacion
sh-partehd
sh-pasa-amni
sh-path-test
sh-pcalidad
sh-PE-Capital-Gestion
sh-PE-Claro-CSV
sh-PE-endeudamiento
sh-PE-Falabella-semestral
sh-PE-Juriscoop
sh-PE-Rentabilizacion
sh-PE-Rentabilizacion-adj
sh-PE-Rentabilizacion-ant
sh-PE-RentabilizacionV01
sh-PE-RentabilizacionV02
sh-PE-RentabilizacionV03
sh-PE-Ripley
sh-PE-Ripley.parm
sh-pega-2-arch
sh-PEGAICMVAL-ata-5
sh-PEGAICMVAL-ata-5_old
sh-PEGAICMVAL-ata-5-TODO
sh-pepe
sh-pes
sh-PESVNO-CAJ
sh-PESVNO-CMN
sh-PESVNOCSV
sh-pichin
sh-pichin2
sh-planos-camara
sh-planos-camara-20131128
sh-planos-camara-anios
sh-planos-camara-sem
sh-planos-camara-sem1
sh-planos-camara-semana
sh-planos-camara-semana-DLM
sh-planos-direcciones
sh-popular
sh-popular-info
sh-popular-masivosTDC
sh-popular-sinTDC
sh-por-tipo-cart
sh-por-tipo-cart.ORI
sh-potenciar
sh-prb15805
sh-prba-head
sh-prba220
sh-prbCargaValores
sh-prbCargaValores2
sh-prbessi
sh-prbessi.ant
sh-preAciertaMas
sh-preAciertaMasPV
sh-preaprobados-GBcol+
sh-preaprobados-motos-sufi
sh-preaprobados-motos-sufi-BCK1
sh-preaprobados-motos-sufiPV
sh-preavisa-documentos
sh-preavisa-documentos-DLM
sh-predicta
sh-predicta-alex
sh-predicta-bdant
sh-predicta-bdant.old
sh-predicta-bdant1
sh-predicta-hist
sh-predicta-old
sh-predicta-val
sh-predicta-ver
sh-predictaf
sh-predictaf-20070321
sh-predictaf-ant
sh-predictai
sh-predictai-ant
sh-predictat
sh-predictat-ant
sh-prepagos
sh-presBORRA
sh-prescripcion
sh-preseleccion-avv
sh-presiESTADIS
sh-presiESTADPRU
sh-presiESTADTO2
sh-presiESTADTOT
sh-presiprueba
sh-prgj
sh-pricgrcl
sh-privilegio-8
sh-prn
sh-proc-batch-car
sh-proc-bdamatch
sh-proc-HSBC
sh-proc-OCC
sh-procesaciti
sh-procesaciti1
sh-procesador
sh-proceso-ACI-M
sh-proceso-AMNISTIA
sh-proceso-AMNISTIA-sin-READ
sh-proceso-AMNISTIA-sin-READ-V01
sh-proceso-AMNISTIA-V01
sh-proceso-back
sh-proceso-bbva
sh-proceso-bcsc
sh-proceso-bcsc-ant
sh-proceso-BDSCORES
sh-proceso-BDSCORES-OK1
sh-proceso-CARAC
sh-proceso-CARAC-BCK1
sh-proceso-CARAC-BCK2
sh-proceso-CARAC-OK1
sh-proceso-CARAC-OK2
sh-proceso-CARAC-OK3
sh-proceso-ICMCHK
sh-proceso-ICMCHK-BCK1
sh-proceso-ICMCHK-BCK2
sh-proceso-ICMCHK-BCK3
sh-proceso-ICMCHK-OK1
sh-proceso-ICMCHK-OK2
sh-proceso-ICMCHK-OK3
sh-proceso-maestros
sh-proceso-maestros-cavs
sh-proceso-maestros-v01
sh-proceso-monitor
sh-proceso-monitor-bckup
sh-procesoawks
sh-procesoawks-OK1
sh-proespecial
sh-profundizacion
sh-profundizacion-bussus
sh-profundizacion-param
sh-profundizacion-proceso
sh-propension-batch
sh-pru
sh-pru-cv
sh-pru-env
sh-pru-modfec
sh-prueba
sh-prueba-bb
sh-prueba-cigd
sh-prueba-cut
sh-prueba-gm
sh-prueba-hist
sh-prueba-icestd12
sh-prueba-icgcpleha
sh-prueba-pesvno
sh-prueba-pesvnociti
sh-prueba-ret
sh-prueba-retanqueo
sh-prueba-rutina-valores
sh-prueba-rutina-valores-2
sh-prueba-rutina-valoresmayo
sh-prueba-rutina-valoresseptiembre
sh-prueba-ss
sh-prueba2
sh-prueba32rmb
sh-prueba64
sh-prueba64rmb
sh-pruebas-desarrollo
sh-pruebas-icgcon
sh-prufecha
sh-prufra
sh-pruicgdir
sh-pruicgfra
sh-prurcl
sh-pruscotbatch
sh-pv
sh-pva
sh-pva201311
sh-qry-dar
sh-qseguro-dav
sh-quanto-colpatria
sh-quanto-colpatria-mod
sh-quanto-endeuda
sh-quanto-endeuda1
sh-quantoper-helm
sh-quantoper-helm-BCK1
sh-quantoper-helm-BCK2
sh-quantoper-helm-BCK3
sh-quantoper-helm-OK1
sh-quantoper-helm-OK2
sh-quantoper-helm-V01
sh-quantoper-helm-V02
sh-quantoper-helm-V02-OK1
sh-quantoper-helm-V02-OK2
sh-quantoper-helm-V03
sh-quantoper-helm-V03-CAMBIO
sh-quantoper-helm-V04
sh-quantoper-Villas
sh-quantoper-Villas-BCK1
sh-quantoper-Villas-V01
sh-quantoper-Villas-V01-OK1
sh-query-Moviles
sh-query-Moviles-OK1
sh-query-Moviles-OK2
sh-query-Moviles-RGH
sh-query-Moviles-RGH-bk-2012-05-19
sh-query-Moviles-RGH-bk-2012-05-21
sh-query-Moviles-RGH.SAL
sh-quita-marcas
sh-rangos-xxx
sh-rclamn
sh-rclpru
sh-rclpru1
sh-rclpru2
sh-rclpru3
sh-recal-sufi
sh-recalifica-sufi
sh-recalifica-sufi-20100729
sh-recalifica-sufi-20131219
sh-recalifica-sufi-bckup
sh-recalifica-sufi-desa
sh-recalifica-sufi-V02
sh-recalifica-sufi-V02-NOES
sh-recalifica-sufi-V02-pru
sh-recalifica-sufi-V03
sh-recalifica-sufi-V03-pru
sh-recalifica-sufi-V04
sh-recalifica-sufi-V05
sh-recalifica-sufi.old
sh-reclamos
sh-reclamosBBVA
sh-recompila-batch-mz2014
sh-recompila-bdiivide-esp
sh-recompila-bdiivide-lin
sh-recompila-caract-esp
sh-recompila-caract-lin
sh-recompila-CQ13782
sh-recompila-CQ16659
sh-recompila-csv-esp.prn
sh-recompila-csv.prn
sh-recompila-db2
sh-recompila-icbtco
sh-recompila-inde
sh-recompila-intel-espe-leemaes
sh-recompila-intel-especiales
sh-recompila-intel-leemaes
sh-recompila-LIBSQL
sh-recompila-LIBSQL-batch
sh-recompila-LIBSQL-linea
sh-recompila-linea
sh-recompila-linea-17987
sh-recompila-linea-17987-ant
sh-recompila-linea-18272
sh-recompila-linea-18272des
sh-recompila-linea-leemaes
sh-recompila-linea-mz2014
sh-recompila-micr-esp
sh-recompila-micr-esp.log
sh-recompila-micr-linea
sh-recompila-micr-linea.log
sh-recompila-pe
sh-recompila-pe-201405
sh-recompila-pes
sh-recompila-prog
sh-recompila-prueba-bf
sh-recompila-sepPJ-batch
sh-recompila-sepPJ-demo
sh-recompila-sepPJ-EspBat
sh-recompila-sepPJ-especiales
sh-recompila-sepPJ-LinDem
sh-recompila-sepPJ-linea
sh-recompilabdimsup
sh-recompilaICBCON-batch
sh-recompilaICBCON-linea
sh-recompilaICBCON-pe
sh-reconocer
sh-reconocer-16ene
sh-reconocer-ampliado
sh-reconocer-ampliado-colfondos
sh-reconocer-basico
sh-reconocer-basico-avv
sh-reconocer-basico-bbva
sh-reconocer-basico-bbva-V0001
sh-reconocer-basico.ant
sh-reconocer-bdd
sh-reconocer-citi
sh-reconocer-citi-bckup
sh-reconocer-compara
sh-reconocer-dlm
sh-reconocer-etb
sh-reconocer-fng
sh-reconocer-fng-a
sh-reconocer-fng-bckup
sh-reconocer-fng-ORI
sh-reconocer-fng-prbaN
sh-reconocer-fng-prbas
sh-reconocer-fng-s
sh-reconocer-fng-v
sh-reconocer-horizonte
sh-reconocer-horizonte-20070321
sh-reconocer-ICGMONITOR
sh-reconocer-lg
sh-reconocer-lg2
sh-reconocer-moras
sh-reconocer-moras-bck
sh-reconocer-newdirbog
sh-reconocer-plus
sh-reconocer-plus-ampli
sh-reconocer-plus-ampli-V2
sh-reconocer-plus-ampli-V3
sh-reconocer-plus-ampliV
sh-reconocer-plus-ant
sh-reconocer-plus-AVV
sh-reconocer-plus-exito
sh-reconocer-plus-exito-ant
sh-reconocer-plus-proteccion
sh-reconocer-plus-simple
sh-reconocer-plus-simple-blq
sh-reconocer-plus-simple-Colsubsidio
sh-reconocer-plus-simple-Colsubsidio1
sh-reconocer-plus-simple-Colsubsidionew
sh-reconocer-plus-simple-V2
sh-reconocer-plus-simple-V3
sh-reconocer-plus-simpleV
sh-reconocer-plus-valid
sh-reconocer-plus-valid-lag
sh-reconocer-plus-valid-V04
sh-reconocer-plus-validPar
sh-reconocer-plus-validV
sh-reconocer-plus-xxxx
sh-reconocer-porvenir
sh-reconocer-SARLAFT
sh-reconocer-SARLAFT.V0
sh-reconocer-simple-colfondos
sh-reconocer-sufi
sh-reconocer-sufi-bckup
sh-reconocer-total
sh-reconocer-usa
sh-reconocer-valid-electricaribe
sh-reconocer-valid-extractos
sh-reconocer+-agrario
sh-reconocer+-BCSC
sh-reconocer+-BCSC-ant
sh-reconocer+-BCSC-lag
sh-reconocer+-BCSC-lag2
sh-reconocer+-estadisticas
sh-reconocer+-estadisticasV01
sh-reconocer+-TELMEX
sh-reconocer+-TELMEX-bckup
sh-reconocer+-validper
sh-reconocer+-validperPV
sh-Reconocer+Panamericana
sh-Reconocer+Panamericana-xx1
sh-Reconocer+Simple-Metlife
sh-Reconocer+Simple-Metlife-V01
sh-reconocer+validacion-bbvahorizonte
sh-reconocer+validacion-porvenir
sh-reconocer+validacion-porvenir-LAG
sh-reconocer+validacion-porvenirPV
sh-reconocer+validacion-proteccion
sh-reconocer+validacion-proteccion_v02
sh-reconocermas_update
sh-reconocerplus-confama
sh-recons-bbva-200911
sh-recons-bbva-200912
sh-recons-bbva-201001
sh-recons-bbva-201003
sh-recons-bbva-201004
sh-recons-bbva-201005
sh-recons-bbva-201006
sh-recons-bbva-201007
sh-recons-bbva-201008
sh-recons-bbva-201009
sh-recons-bbva-201010
sh-recons-bbva-201011
sh-recons-bbva-201012
sh-recons-bbva-201103
sh-recons-bbva-201106
sh-recorte-icbtco
sh-recuperacion-telcos
sh-reestructurados
sh-regional
sh-regis-desarrollo
sh-reindexa
sh-reindexa-consultas
sh-reindexa-u
sh-remueva
sh-renu-migra-car
sh-renu-migra-car-jjmr
sh-renu-migra-car-V02
sh-renu-migra-cte
sh-renu-migra-cte-jjmr
sh-renu-migra-cte-V02
sh-renu-migra-cte-V03
sh-repesca
sh-REPESCA
sh-repesca-2006-lag
sh-repesca-2006cfa
sh-repesca-barranquilla
sh-repesca-CJFK
sh-repesca-codensa
sh-repesca-epm
sh-repesca-especial
sh-repesca-hgr
sh-repesca-mayo2004
sh-repesca-mayo2004-prueba
sh-repesca-mayo2005
sh-repesca-real
sh-repesca-standard
sh-repesca-SUS
sh-repesca-TV
sh-repesca+
sh-repesca+_opc
sh-repesca+_orig
sh-repesca+PV
sh-repesca+v04
sh-res
sh-resamb
sh-resamb-bdi
sh-resamb.20030530
sh-restaura
sh-resto-actualiza
sh-resto-actualiza-ant
sh-resto-actualiza-ant-err
sh-resto-actualiza-dtcasus
sh-resto-actualiza-O-BCK1
sh-resto-actualiza-ori-nd
sh-resto-actualiza-V0021
sh-resto-actualiza-V022
sh-resto-actualiza-V23
sh-resto-clon
sh-resto-cloncomp
sh-resto-clonmes
sh-resto-clonmes2
sh-resto-historico
sh-resto-historico2
sh-resto-paract
sh-resto-paract-ant
sh-resto-paract-v0012
sh-resto-paract-V13
sh-restuara
sh-resu
sh-resumenhdc-byington
sh-ret-autos
sh-ret-autos-180235
sh-ret050016
sh-ret050024
sh-retanqueo
sh-retanqueo-avv
sh-retanqueo-CJFK
sh-retanqueo-codensa
sh-retanqueo-coop
sh-retanqueo-load
sh-retanqueo-mercadeo
sh-retanqueo-mercadeo2006
sh-retanqueo-mercadeo2006-lag
sh-retanqueo-mercadeo2006-old
sh-retanqueo-mercadeo2006.v3
sh-retanqueo-mercadeoPRBA
sh-retanqueo-STT
sh-retanqueo-villas
sh-retanqueo-villas.old
sh-retanqueo-vtacruzada-matrizcupos
sh-retanqueo.old
sh-retanqueo+
sh-retanqueo+PV
sh-retBANCAFE
sh-rethgr
sh-reversiones
sh-revisa
sh-revisa-icre
sh-revisa-tco
sh-rgh
sh-rgh-ICGS07
sh-rgh-tmp
sh-rm31
sh-rmPV
sh-rmPV1
sh-rodamiento-monitor
sh-rodamiento-monitor-d
sh-rodamiento-monitor-des
sh-rodamiento-score-SUS-bckup
sh-rodamiento-score-SUS-d
sh-rodamiento-score-SUS-lag
sh-rodamiento-score-SUS-p
sh-santander
sh-santander-clientes
sh-santander-cupos
sh-santander-cupos-ING
sh-santander-cupos-ING-lag
sh-santander-DV
sh-santander-ESP
sh-santander-ESP-lag
sh-santander-ESP-sin-ley
sh-santander-mercadeo
sh-santander-noclie
sh-santander-noclientes
sh-santander-TDC
sh-santander-TDC-CUPOS
sh-sas
sh-sas-cron
sh-sas-esta
sh-sas-p01
sh-sas-p02
sh-sas-p03
sh-sas-rmpl
sh-sb
sh-scodv
sh-score-basico
sh-score-cobranza
sh-score-cobranza-lag
sh-score-colabor
sh-score-colaborA
sh-score-hist
sh-score-mensual
sh-score-monitor
sh-score-PJ
sh-score-PJpv
sh-score-standard
sh-score-standard.jg
sh-score-std
sh-score-std-batch
sh-score-std-batch-ant
sh-score-std-batch-anterior
sh-score-std-batch-cav
sh-score-std-batch-combos
sh-score-std-batch-cv
sh-score-std-batch-icimsd
sh-score-std-batch-lag
sh-score-std-batch-lg1
sh-score-std-batch-nobbva
sh-score-std-batch-V04
sh-score-std-batch-V07
sh-score-std-batch-V08
sh-score-std-batch-V09
sh-score-std-batchgj
sh-score-std-batchPV
sh-score-std-batchV06
sh-SCOREPREC
sh-SCOREPREC-lag
sh-SCORES-HIST
sh-SCORES-HIST-ACI
sh-SCORES-HISTORY
sh-SCORES-HISTORY-HQ
sh-SCORES-HISTORY-PRU
sh-SCORES-HISTORY-T8
sh-SCORES-HISTORY-T8-DESA
sh-scoreslinea-batch
sh-scorextr
sh-scotcar
sh-scotcar-hist
sh-scotcar-histv
sh-scotcar-mvs
sh-scotcar-val
sh-scotcaract-scores
sh-scovbin
sh-scovisa
sh-scovisa_pru
sh-scovisa_PV
sh-scovisa_PV1
sh-scovisa-2nagios
sh-scovisa-act
sh-scovisa-ant
sh-scovisa-bancol
sh-scovisa-ley
sh-scovisa-rmrp
sh-scovisa-solo-aplano
sh-scovisa.AGO30
sh-scovisa.DIC2010
sh-scovisa.NEW
sh-scovisa.nov
sh-scovisa.OLD
sh-scovisa.PRE
sh-scovisa.PRO
sh-scovisa.test
sh-scovisa.TEST
sh-scovisaJ
sh-scovisanoftp
sh-scovisapro
sh-scovisapru
sh-sectoESTADIS
sh-segmenta
sh-segmenta-CAB
sh-segmentacion
sh-sel-ICGDEM-sus
sh-sel-susc-333
sh-separa
sh-serfinansa
sh-setjava
sh-setjava-gen
sh-sincroniza-enti-fact
sh-sincronizar-soportes-facturacion.sh
sh-sincronizar-soportes-facturacion.sh.28022011
sh-sincronizar-soportes-facturacion.sh.old
sh-sondeo-T8
sh-sondeo-T8-BCK
sh-sondeo-T8-OK1
sh-sort-29
sh-sort-ACTIVOS
sh-sort-apemil
sh-sort-apemov
sh-sort-apermil
sh-sort-apermil.001
sh-sort-apermovi
sh-sort-apermovi.001
sh-sort-apertu
sh-sort-bog
sh-sort-cifin
sh-sort-direcc
sh-sort-fast
sh-sort-ichpeg
sh-sort-icinco
sh-sort-icpron
sh-sort-icresu
sh-sort-icresu.ant
sh-sort-movimi
sh-sort-movimil
sh-sort-movimil.001
sh-sort-movmil
sh-sort-resu
sh-sort-resufac
sh-sort-soportes
sh-sort-TDC
sh-sort-valida
sh-stdicbtco
sh-stop-LOG-X-lg
sh-sudameris
sh-sufi
sh-sufi-vehiculos
sh-suma
sh-sup-coninfo
sh-superior
sh-superior-2003
sh-superior-227
sh-superior-Ago2004
sh-superior-carac
sh-superior-dia-old
sh-superior-diario
sh-superior-DIARIO
sh-superior-feb2005
sh-superior-mayo
sh-superior-montos
sh-superior-montos-DAV
sh-superior-montos-edad
sh-superior-montos-score
sh-superior-NEW
sh-superior-OLD
sh-superior-sep
sh-superior-vector
sh-superior-versiones
sh-sus-val-acierta
sh-suscriptor
sh-suscriptor-cons
sh-t5
sh-tabla-NO-consolida
sh-tabla-NO-consolida-20080929
sh-tabla-NO-consolida-ac
sh-tabla-NO-consolida-ac-prueba
sh-tabla-parametros
sh-tabla-parametros-20080929
sh-tabla-parametros-ac-prueba
sh-tabla-parametros-aciertac
sh-tabla-parametros-aciertac-gj
sh-tabla-parametros-aciertac-lag
sh-tabla-parametros-aciertac-o
sh-tabla-SI-consolida
sh-tabla-SI-consolida-20080929
sh-tabla-SI-consolida-ac
sh-tabla-SIN-BASE-SUS
sh-tabla-SIN-BASE-SUS-20080929
sh-tabla-SIN-BASE-SUS-ac
sh-tabla-SIN-BASE-SUS-ac-prueba
sh-tabla-SIN-BASE-SUS-nc
sh-tablas-corrida
sh-tablas-finales
sh-tablas-finales-20080929
sh-tablas-finales-ac
sh-tablas-finales-ac-1
sh-tablas-finales-ac-prueba
sh-tablas-validacion
sh-tablas-validacion-20080925
sh-tablas-validacion-20131004
sh-tablas-validacion-ac-prueba
sh-tablas-validacion-aciertac
sh-tablas-validacion-aciertac-N
sh-tablas-validacion-aciertac-o
sh-tablas-validacion-DAR
sh-tablas-validacion-DAR-BCK1
sh-tablas-validacion-DAR-BCK2
sh-tablas-validacion-des
sh-tablas-validacion-lag
sh-tablas-validacion-PROD
sh-tablas-validacion-Q
sh-tablas-validacion-Q-bckup
sh-tablas-validacion-Q-lag
sh-tablas-validacion-V05
sh-tablas-validacion-V06
sh-tablas-validacion-V06-BCK1
sh-tablas-validacion-V06-BCK2
sh-tablas-validacion-V06-BCK3
sh-tablas-validacion-V06-BCK3-FECHA-ATRAS
sh-tablas-validacion-V06-BCK4
sh-tablas-validacion-V06-OK1
sh-tablas-validacion-V06-OK2
sh-tablas-validacion-V06-OK3
sh-tablas-validacion-v1
sh-tablas-validacion-v2
sh-tablas-validacionPV
sh-tag-mora-usa
sh-tamanos1
sh-tamanos2
sh-TDC-BCAF
sh-TDC-BCSC
sh-TDC-BOGO
sh-tdc-des
sh-tdc-disminuye-cupos
sh-tdc-esp
sh-TDC-GRANAHORRAR
sh-TDC-POPU
sh-TDC-POPULAR
sh-TDC-SANT
sh-TDC-SEGMENTACION
sh-TDC-UNION
sh-TDC-VIPS
sh-TDC2003
sh-TDCTEST
sh-telcod
sh-telnet-consulta
sh-tema
sh-tequendama
sh-tera
sh-test
sh-test-dir
sh-TIME
sh-TIPO5
sh-TIPO5-test
sh-titu-scores
sh-tmp
sh-tmp1
sh-tmpaam
sh-totprocesos
sh-trabajo-3
sh-truss-progs
sh-tx
sh-tx-logs
sh-tx-logs-te
sh-tx-logs-tra
sh-txs-EVIDENTE
sh-txs-EVIDENTE-20070529
sh-txs-EVIDENTE-20091029
sh-une-dataud
sh-une-dataud-V01
sh-uned
sh-unemaesbbva
sh-unimaes
sh-union
sh-UNION-OK
sh-union1
sh-upmail
sh-upmail.log
sh-utl029
sh-utl029p
sh-utl029paux
sh-utl030
sh-utl030p
sh-utlacemai
sh-utlactvlr
sh-utladext-interno
sh-utlarenc
sh-utlblqsus
sh-utlcacii
sh-utlclblq
sh-utlclblq-021709
sh-utlcre-vlr
sh-utlcre-vlr-prl
sh-utlcre-vlr-prl-new
sh-utlcre-vlr-vi
sh-utldapet
sh-utldifcar
sh-utldirdocm
sh-utldirdocmPV
sh-utldirestr
sh-utldirestr_pv
sh-utldrp
sh-utlendrp
sh-utlestact
sh-utlevidente
sh-utlexcmai
sh-utlexctel
sh-utlextcar
sh-utlindedian
sh-utlinderegi
sh-utlindexvlr
sh-utlistgtcbbva
sh-utllimdir
sh-utlmcier-lote
sh-utlmfre
sh-utlmfre-ant
sh-utlmfre-cigd
sh-utlmfrect
sh-utlmfresp
sh-utlmmale
sh-utlmmale-lote
sh-utlmmale-V01
sh-utlmmale-V02
sh-utlmmale-V03
sh-utlmmale-V03-BCK1
sh-utlmmale-V03-BCK2
sh-utlmmale-V03-OK1
sh-utlmmale-V03-OK2
sh-utlmmale-V03-OK3
sh-utlmmale-V03-OK4
sh-utlmmale-V03-ULT
sh-utlmmale.calidad
sh-utlmodDTCCOM
sh-UTLRECONS-VLR
sh-UTLRECONS-VLR-OK1
sh-utlsaci
sh-utlsepmaecod
sh-utlsepmaecod-270809-1034
sh-utlsepmaecod-cv
sh-utlsepmaecod-VF
sh-utlsndrp
sh-utlsus-cert
sh-utluc-v
sh-utlucmre
sh-utlucomp
sh-utluexsco
sh-UTLUFRAFAC1
sh-utlumigval
sh-utlumsco
sh-utlumsco-2
sh-utlumsco-3
sh-utlumsco-car
sh-utlurev
sh-utlurevam
sh-utluscvl
sh-utlvalcalid
sh-utlvdirest
sh-utlvlr-ciu
sh-val013
sh-val014
sh-val015
sh-val016
sh-valbansep
sh-valbansep-bck
sh-valbansep-v2
sh-valcalcert
sh-valcalcr
sh-valcalcr-cv
sh-valcalcr-pruebas
sh-valcalcr-v01
sh-valcalct
sh-valcalct-v01
sh-valccal
sh-valccal-fac
sh-valcercl
sh-valcercr
sh-valcerct
sh-valconsulta
sh-VALCTL100
sh-valcutl
sh-valdirbncol
sh-valdirbncol-ante
sh-valerev
sh-VALESPECIAL
sh-VALESPECIAL-XL
sh-VALFALLECIDOS
sh-valid
sh-valid-sus
sh-valida
sh-valida-bcol-II
sh-valida-endeuda
sh-valida-id
sh-valida-lg
sh-valida-VIPS
sh-validacert
sh-validacion
sh-validacion-lote
sh-validacion-ORI
sh-validacion-pruebas
sh-validacion-pruebas-ini
sh-validacion-segestado
sh-validacion-segestado-DIR
sh-validacion-segestado-FMT8
sh-validacion-segestado-OTROS
sh-validacion-segestado-PER
sh-validacion-segestado-RECO
sh-validacion-segestado-TEL
sh-validacion-segestado-TER
sh-validacion-segestado-v0
sh-validacion-segestado-v01
sh-validacion-segestado-V01
sh-validacion-segestado-v02
sh-validacion-segestado-V02
sh-validacion-tot
sh-validacion-total
sh-validacion-total-20091201
sh-validacion-total-ant
sh-validacion-total-cv
sh-validacion-total-OK
sh-validacion-total-PRU1
sh-validacion-total-V04
sh-validacion-total-V05
sh-validacion-total-V05-NOSE
sh-validacion-total-V06
sh-validacion-total-V06-OK1
sh-validacion-total-V07
sh-validacion-total-V08
sh-validacion.sgmnto
sh-validacioncl
sh-validacioncr
sh-validacioncr-cv
sh-validacioncr-orig
sh-validacionct
sh-validacionct-orig
sh-validaciti
sh-validaejecu
sh-validar
sh-VALNOMBRE
sh-VALNOMBRE-ID
sh-VALNOMBRE-KEY
sh-VALPCOMCEL
sh-VALPESVNO
sh-VALPESVNO-20080609
sh-VALPESVNO1
sh-VALPNIT
sh-VALPNIT-lagr
sh-valres
sh-valres-V01
sh-valres-V02
sh-valresini
sh-valresnew
sh-VALSURATEP
sh-valutlcr
sh-valutlcr-jjmr
sh-valutlcr-V01
sh-valutlct
sh-valutlct-jjmr
sh-valutlct-V01
sh-valvext
sh-valvfor
sh-valvforcert
sh-valvord
sh-valvord-fac
sh-valvord-ORI
sh-valvord-prod
sh-valvord.sgmnto
sh-valvordcert
sh-valvordcl
sh-valvordcr
sh-valvordcr-cv
sh-valvordcr-pruebas
sh-valvordct
sh-valvordct-ori
sh-valvordnew
sh-valvval
sh-var-db2
sh-varamb-db2
sh-variable-refinan
sh-VARIABLES-archivo
sh-variables-gmac
sh-variables-gmac-bckup
sh-variables-gmac-desa
sh-variables2-colpatria
sh-variables2-colpatria-ORI
sh-vector
sh-vector-PROD
sh-vectores-C
sh-vectores-C-v20110809
sh-vectores-C.ok
sh-vectores-esp
sh-vectores-especial
sh-vectores-especial-V05
sh-vectores-guiones
sh-vectores-normal
sh-vectores-normal-sinley
sh-vectores-normal+
sh-vectorV02
sh-venta
sh-venta-cruzada
sh-venta-cruzada-reloaded
sh-venta-cruzada+
sh-venta-cruzada+20140113
sh-venta-cruzada+icimsd
sh-venta-cruzada1+
sh-venta-cuz-resumido
sh-ventacruzada
sh-ventacruzada-ant
sh-ventacruzada-avv
sh-ventacruzada-bancredito
sh-ventacruzada-borra
sh-ventacruzada-DAV-GRB
sh-ventacruzada-lg
sh-ventacruzada-mercadeo
sh-ventacruzada-mercadeo-lag
sh-ventacruzada-NIT
sh-ventacruzada-NOPESVNO
sh-ventacruzada-pru
sh-ventacruzada.old
sh-verantdaviviendaSinPre
sh-verantedaviviendaConPre
sh-vhf-adi
sh-vhf-ext
sh-victor
sh-villas-ICMCHK
sh-VIPS_XXXX
sh-VIPS-ESPECIAL
sh-VIPS-ESTRATEGICO
sh-VIPS-ESTRATEGICO.old
sh-VIPS-FINANCIERO
sh-VIPS-FINANCIERO-20090705
sh-VIPS-FINANCIEROv01
sh-visor-bancos
sh-visor-bancos-lag
sh-VISOR-BANK
sh-VISOR-BANK-lag
sh-visor-bases-nit
sh-visor-compartidos
sh-visor-compartidos-2013-09-17
sh-visor-compartidos-2013-10-20
sh-visor-compartidos-ant
sh-visor-compartidos-reloaded
sh-visor-compartidos-X
sh-visor-extrae
sh-visor-index-nit
sh-visor-NIT
sh-visor-tablas-inf
sh-visor-tablas-nit
sh-visor-telcos
sh-visor-telcos-bckup
sh-visor-telcos-menu
sh-visor-telcos-xxxx
sh-visor-telcosv01
sh-visor-telcosv01-1
sh-visor-trimestre
sh-visor-trimestre-20101222
sh-visor-trimestre-old
sh-vmprueba
sh-vtacruzada-matrizcupos
sh-vtacruzada-matrizcupos-cuposCAB
sh-vtacruzada-matrizcupos-monitor
sh-vtacruzada-matrizcuposCAB
sh-work-arch-procesos
sh-work-arch-procesos-OK1
sh-work-arch-procesos-OK2
sh-work-arch-procesos-OK3
sh-work-arch-procesos-OK4
sh-work-arch-procesos-OK5
sh-work-arch-procesos-OK6
sh-work-arch-procesos-OK7
sh-work-arch-procesos-V002
sh-work-arch-procesos-V01
sh-work-arch-procesos-V01-OK1
sh-work-arch-procesos-V02-BCK1
sh-work-arch-procesos-V02-BCK2
sh-work-arch-procesos-V02-BCK3
sh-work-arch-procesos-V02-OK1
sh-work-arch-procesos-V03
sh-work-arch-procesos-V04
sh-WWB
sh-wwb-2009
sh-xx1
sh-xxcitibank
sh-xxx
sh-yan
sh-yanbal
sh-zip
sh-zipsoftware
ShellReconocer
sort-acierta-visa
sort-scovtar
SQLLIB-BATCH
SQLLIB-LINEA
SQLLOG.ICGMDF.aaaammddhhmmss.FOR
SQLLOG.ICGMDF.aaaammddhhmmss.TMP
st
subsitio
T.TXT
tamanos2
tenantWorkspace.cfg
term
test.sh
tiempo-super
tmp.txt
tmp3
txctlscore1
txctlscore2
txctlscore3
txctlscore4
UBICA
uno
usr_cvs
USUARWAP-V22.aif
UTLADEXT.20140314.core
utlctot
UTLLIMDIR.CBL
UTLLOG02.SAL-138
UTLULONGITUDES.CBL
V01_PRU1-sh-citi-thin-thick
V01-sh-citi-thin-thick
V01-sh-citi-thin-thick-OK
valid.tmp
Validando
VALUTLCR.aif
VALUTLCT.aif
VALUTLCTB.20140318.core
vepar
verifica-long-CIT.awk
verifica-long-param.sh
verifica-long.awk
verifica-long.sh
vhf-cron
vhf-icjsus
vhf-scovisa
vhf-scovisa-db2
vhf-scovisa-nva
vhf-scovisa-pb
vhf-scovisa-pr
vhf-scovisa-prod
visor_BELLO2.prn
vm
william
work-arch-procesos.awk
work-arch-procesos.awk-OK1
work-arch-procesos.awk-OK2
x
x-2000
x-act
x-cjava
x-cobjava
x-cobjava-64
x-cobjava-bk-20110822
x-cobjava-DLM
x-cobjavaOLD
x-cobjavapru
x-des
x-exe
x-hoy
x-ley
x-pru
x.old
x2
x32
x64
XFHLOG
xsh-monitor
xx-estsit1
xx-prbessi
xxyy.log
zxcs
/d/iccol/desarrollo/macros>^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>lssh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:C
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:sh-PE-Ripleyzzz
El archivo   no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:sh-PE-Ripley
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
;;;;;;
sh-PE-Ripley[6]: ECHA_PROC:  not found
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyls          sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:/d/iccol/desarrollo/macros
El archivo   no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ ! -f $NOM_ARCHIVOnew ]
then
printf "\7"
echo "El archivo "$NOM_ARCHIVO " no se encuentra"
else
if [ -d $NOM_ARCHIVOnew ]then
printf "\7"
echo $NOM_ARCHIVO " es un nombre de directorio"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"#*******************************************************************************readNOM_ARCHIVO() {echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
37 lines deletedOPEN MODEreadNOM_ARCHIVO() {
OPEN MODE
#*******************************************************************************
OPEN MODE

# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
OPEN MODE


#*******************************************************************************
OPEN MODE    loopEnd="0"
OPEN MODE    while [ $loopEnd == "0" ]
OPEN MODE    do
OPEN MODE        echo " "
OPEN MODE#             ......................................................................
OPEN MODE        echo "                       NOMBRE DEL ARCHIVO BASE"
OPEN MODE        echo $raya
OPEN MODE        echo "      Ingrese el nombre del archivo base,"
OPEN MODE        echo "      enter para cancelar"
OPEN MODE        echo " "
OPEN MODE        echo "            ARCHIVO:\c"
OPEN MODE        read NOM_ARCHIVOnew
OPEN MODE        if [ -z $NOM_ARCHIVOnew ]
OPEN MODE        then
OPEN MODE            loopEnd="1"
OPEN MODE            exit
OPEN MODE        fi
OPEN MODE        if [ -d $NOM_ARCHIVOnew ]
OPEN MODE            printf "\7"
OPEN MODE            echo $NOM_ARCHIVOnew " es un nombre de directorio"
OPEN MODE        else
OPEN MODE            if [ ! -f $NOM_ARCHIVOnew ]
OPEN MODE                printf "\7"
OPEN MODE                echo "El archivo "$NOM_ARCHIVOnew " no se encuentra"
OPEN MODE            else
OPEN MODE                NOM_ARCHIVO=$NOM_ARCHIVOnew
OPEN MODE                loopEnd="1"
OPEN MODE            fi
OPEN MODE        fi
OPEN MODE    done
OPEN MODE}
OPEN MODEecho "C) Provista por el Cliente"FECHA_PROC=" "

OPEN MODE

:w"sh-PE-Ripley" 183 lines, 6169 characters 
[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
sh-PE-Ripley[39]: syntax error at line 64 : `else' unexpected
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
FECHA_PROC=" "


readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]printf "\7"
echo $NOM_ARCHIVOnew " es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]printf "\7"
echo "El archivo "$NOM_ARCHIVOnew " no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"

OPEN MODE        then
 


    
        then    then:w"sh-PE-Ripley" 185 lines, 6184 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:/d/iccol/desarrollo/macros
/d/iccol/desarrollo/macros  es un nombre de directorio
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:x
>>>> params:  
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
;;;;;;
sh-PE-Ripley[6]: ECHA_PROC:  not found
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
FECHA_PROC=" "


readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew " es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew " no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " " echo




:w"sh-PE-Ripley" 185 lines, 6182 characters     do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    readNOM_ARCHIVO
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit
OPEN MODE    readNOM_ARCHIVO() {
OPEN MODE#*******************************************************************************





OPEN MODE# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES




OPEN MODE#*******************************************************************************



OPEN MODE    loopEnd="0"


OPEN MODE    while [ $loopEnd == "0" ]

OPEN MODE    do

OPEN MODE        echo " "

OPEN MODE#             ......................................................................

OPEN MODE        echo "                       NOMBRE DEL ARCHIVO BASE"

OPEN MODE        echo $raya

OPEN MODE        echo "      Ingrese el nombre del archivo base,"

OPEN MODE        echo "      enter para cancelar"

OPEN MODE        echo " "

OPEN MODE        echo "            ARCHIVO:\c"

OPEN MODE        read NOM_ARCHIVOnew

OPEN MODE        if [ -z $NOM_ARCHIVOnew ]

OPEN MODE        then

OPEN MODE            loopEnd="1"

OPEN MODE            exit

OPEN MODE        fi

OPEN MODE        if [ -d $NOM_ARCHIVOnew ]

OPEN MODE        then

OPEN MODE            printf "\7"

OPEN MODE            echo $NOM_ARCHIVOnew" es un nombre de directorio"

OPEN MODE        else

OPEN MODE            if [ ! -f $NOM_ARCHIVOnew ]

OPEN MODE            then

OPEN MODE                printf "\7"

OPEN MODE                echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"

OPEN MODE            else

OPEN MODE                NOM_ARCHIVO=$NOM_ARCHIVOnew

OPEN MODE                loopEnd="1"

OPEN MODE            fi

OPEN MODE        fi

OPEN MODE    done

OPEN MODE}

OPEN MODE
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit





#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
38 fewer lines  
    readNOM_ARCHIVOreadNO$CHANGE MODETIPO
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "


readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
FECHA_PROC=" "


readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
APPEND MODE

APPEND MODE

readTIPO_ARCHIVO() {
APPEND MODE


#*******************************************************************************
APPEND MODE# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
APPEND MODE#*******************************************************************************
APPEND MODE    loopEnd="0"
APPEND MODE    while [ $loopEnd == "0" ]
APPEND MODE    do
APPEND MODE        echo " "
APPEND MODE#             ......................................................................
APPEND MODE        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
APPEND MODE        echo $raya
APPEND MODE        echo "      0) 1-11"
APPEND MODE        echo "      1) 1-11-45"
APPEND MODE        echo "      enter para cancelar"
APPEND MODE        echo " "
APPEND MODE        echo "               ESTRUCTURA:\c"
APPEND MODE        read TIPO_ARCHIVOnew
APPEND MODE        if [ -z $TIPO_ARCHIVOnew ]
APPEND MODE        then
APPEND MODE            loopEnd="1"
APPEND MODE            exit
APPEND MODE        fi
APPEND MODE        if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
APPEND MODE        then
APPEND MODE            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
APPEND MODE            loopEnd="1"
APPEND MODE        else
APPEND MODE            printf "\7"
APPEND MODE        fi
APPEND MODE    done
APPEND MODE}
APPEND MODEecho "ARCHIVO:\c":w"sh-PE-Ripley" 217 lines, 7170 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:x
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:w
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:1
>>>> params:  
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
;;;;;;
sh-PE-Ripley[6]: ECHA_PROC:  not found
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
thenif [ $BASEnew == "c" ]then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebasecho " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
 APPEND MODE   :w"sh-PE-Ripley" 217 lines, 7172 characters if [ $BASEnew == "c" ]then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas/MAIN#*******************************************************************************
echo "BASE="$BASE"<"
echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
echo "ID_EXTRACT="$ID_EXTRACT"<"
echo "TIPO_PROC="$TIPO_PROC"<"
echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    readNOM_ARCHIVO
    readTIPO_ARCHIVO
    paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    exit#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
22 lines deletedAPPEND MODE#*******************************************************************************
APPEND MODE
#*******************************************************************************
APPEND MODE

#                                    MAIN
APPEND MODE


#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE    clear
APPEND MODE    echo $raya
APPEND MODE    echo "$ASCIIBanner"
APPEND MODE#   banner "PE Ripley"
APPEND MODE    echo $raya
APPEND MODE
APPEND MODE    readBASE
APPEND MODE    if [ $BASE == "C" ]
APPEND MODE    then
APPEND MODE        readNOM_ARCHIVO
APPEND MODE        readTIPO_ARCHIVO
APPEND MODE    fi
APPEND MODE    paramsGet
APPEND MODE    paramsPrint
APPEND MODE    paramsPut
APPEND MODE    # DEBUG: termina acá
APPEND MODE    echo " "
APPEND MODE    echo "HASTA ACÁ LLEGAMOS"
APPEND MODE    exit
APPEND MODE
APPEND MODE:w"sh-PE-Ripley" 220 lines, 7261 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
>>>> params:  
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
;;;;;;
sh-PE-Ripley[6]: ECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~/\<ECHA_PAddress search hit BOTTOM without matching pattern?}    echo "FECHA_PROC="$FECHA_PROC"<"    echo "TIPO_PROC="$TIPO_PROC"<"    echo "ID_EXTRACT="$ID_EXTRACT"<"    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"    echo "BASE="$BASE"<"#*******************************************************************************# Muestra todos los parámetros, para pruebas#*******************************************************************************paramsPrint() {}ECHA_PROC >| $0.parm?Address search hit TOP without matching pattern    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
@
    
INSERT MODE

    Fu
 ECHA_PROC >| $0.parmecho $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$FECHA
_PROC >| $0.parm
    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm:w"sh-PE-Ripley" 219 lines, 7260 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
>>>> params:  
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:x
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:1
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
printf "\7"fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~    INSERT MODE. 

# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"INSERT MODEfunction :w"sh-PE-Ripley" 219 lines, 7271 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
sh-PE-Ripley[38]: syntax error at line 38 : `(' unexpected
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

function readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11":w"sh-PE-Ripley" 219 lines, 7262 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
sh-PE-Ripley[200]: readBASE:  not found
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $raya. readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~    . :w"sh-PE-Ripley" 219 lines, 7261 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
sh-PE-Ripley[200]: .readBASE:  not found
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:1
>>>> params:  ;;;;;;
BASE=<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg  ls 1
1
/d/iccol/desarrollo/macros>cat 1
#**********************************************************
#SHELL-ID:     sh-copiado-a-san                           *
#DATE-WRITTEN: 2010/02/11                                 *
#LAST UPDATE:                                             *
#AUTHOR:       DATACREDITO - SOLUCIONES PERSONALIZADAS.   *
#PROGRAM-ID: - UTLRCCT8.CBL                               *
#            - awk                                        *
#            - sed                                        *
#**********************************************************
archLog=`echo $DATOS/sh-copiado-a-san.log`
archWrk=`echo $DATOS/sh-copiado-a-san.wrk`
if [ -s $archWrk ] ; then
  rm -f $archWrk
fi

clear
echo "+-------------------------------------------------------------+"
echo "|                COPIADO DE LAS SAN A TRABAJO.                |"
echo "+-------------------------------------------------------------+"
echo
echo

longParam=`echo $1 | tr -d '[:alpha:]' | awk '{printf("%d\n", length($0))}'`
fech_hoy=`date '+%Y%m%d'`
hora_hoy=`date '+%H:%M'`

if [ `expr $longParam + 0` -eq 0 ] ; then
  AAAA=`echo $fech_hoy | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
  MM=`echo $fech_hoy | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
else
  if [ `expr $longParam + 0` -ne 6 ] ; then
    echo "\n\t*ERROR* Fecha Ingresada No Válida [$1]."
    exit
  else
    AAAA=`echo $1 | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
    MM=`echo $1 | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
  fi
fi


numday=0
case `expr $MM + 0 2> /dev/null` in
   1|3|5|7|8|10|12) numday=31;;
   4|6|9|11) numday=30;;
   2)
     if [ `expr $AAAA % 4` -eq 0 ] ; then
       numday=29
     else
       numday=28
     fi
     ;;
   *)
     echo "\n\t*ERROR* Mes Ingresado No Válida [$1]."
     exit
     ;;
esac

fec_pro=`echo $AAAA$MM`


if [ `expr $longParam + 0` -eq 0 ] ; then
  fec_pro="000000";
  sanataSan=`echo \$DATABASE `
else
  sanAta=`grep "^$fec_pro" $DATOS/ICSANATA.DAT | wc -l | awk '{ printf ("%d\n", $1)}'`
  if [ $sanAta -ne 1 ] ; then
    echo "\n\t*ERROR* En \$DATOS/ICSANATA.DAT $fec_pro esta mas de una vez.\c"
    exit
  else
    sanataReg=`grep "^$fec_pro" $DATOS/ICSANATA.DAT `
    sanataFecha=`echo $sanataReg | cut -c1-6 | awk '{ printf ("%6.6d\n", $0)}'`
    sanataSan=`echo $sanataReg | cut -c9-17 `
  fi

  if [ -s /$sanataSan/$fec_pro/sh-$fec_pro -ne 1 ] ; then
    . /$sanataSan/$fec_pro/sh-$fec_pro
  else
    echo "\n\t*ERROR* $/sanataSan/$fec_pro/sh-$fec_pro NO existe."
    exit
  fi

fi

echo "Base de Datos: $DATABASE"

echo "Inicio de Copiado $fech_hoy - $hora_hoy"

ambiente=`echo $SERV_CCI | cut -c 1-3`

if [ ! -s $3 ] ; then
  mkdir $3
fi

echo mv $DATABASE/ICMCHK $3/ICMCHK-$fec_pro
mv $DATABASE/ICMCHK $3/ICMCHK-$fec_pro
codErr=$?
if [ $codErr != 0 ] ; then
  echo "\n\t*ERROR* Copiado ICMCHK con Errores $codErr."
else
  compress $3/ICMCHK-$fec_pro
  echo mv $2/ICMCHK-$fec_pro $DATABASE/ICMCHK
  mv $2/ICMCHK-$fec_pro $DATABASE/ICMCHK
  codErr=$?
  if [ $codErr != 0 ] ; then
    echo "\n\t*ERROR* Copiado ICMCHK Tipo 8 con Errores $codErr."
  fi
fi

echo mv $DATABASE/ICMCHK.idx $3/ICMCHK-$fec_pro.idx
mv $DATABASE/ICMCHK.idx $3/ICMCHK-$fec_pro.idx
codErr=$?
if [ $codErr != 0 ] ; then
  echo "\n\t*ERROR* Copiado ICMCHK.idx con Errores $codErr."
else
  compress $3/ICMCHK-$fec_pro.idx &
fi

/d/iccol/desarrollo/macros>view 1
"1" [Read only] 117 lines, 3303 characters #**********************************************************
#SHELL-ID:     sh-copiado-a-san*
#DATE-WRITTEN: 2010/02/11*
#LAST UPDATE:*
#AUTHOR:DATACREDITO - SOLUCIONES PERSONALIZADAS.   *
#PROGRAM-ID: - UTLRCCT8.CBL*
#- awk*
#- sed*
#**********************************************************
archLog=`echo $DATOS/sh-copiado-a-san.log`
archWrk=`echo $DATOS/sh-copiado-a-san.wrk`
if [ -s $archWrk ] ; then
  rm -f $archWrk
fi

clear
echo "+-------------------------------------------------------------+"
echo "|COPIADO DE LAS SAN A TRABAJO.|"
echo "+-------------------------------------------------------------+"
echo
echo

longParam=`echo $1 | tr -d '[:alpha:]' | awk '{printf("%d\n", length($0))}'`
fech_hoy=`date '+%Y%m%d'`
hora_hoy=`date '+%H:%M'`

if [ `expr $longParam + 0` -eq 0 ] ; then
  AAAA=`echo $fech_hoy | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
  MM=`echo $fech_hoy | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
else
if [ `expr $longParam + 0` -ne 6 ] ; then
    echo "\n\t*ERROR* Fecha Ingresada No Válida [$1]."
    exit
  else
AAAA=`echo $1 | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
    MM=`echo $1 | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
  fi
fi


numday=0
case `expr $MM + 0 2> /dev/null` in
   1|3|5|7|8|10|12) numday=31;;
   4|6|9|11) numday=30;;
   2)
if [ `expr $AAAA % 4` -eq 0 ] ; then
numday=29else
numday=28"1" [Read only] 117 lines, 3303 characters:q/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $raya.readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"/readBASEread NOM_ARCHIVOnewif [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fireadBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"echo "1) 1-11-45":w"sh-PE-Ripley" 218 lines, 7259 characters /read NOM_ARCHIVOnewif [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"/\<BASE\>///



/then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi//done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancelareadBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"/////#   separa los parámetros según su posición
BASE=`echo "$params" | cut -d ";" -f1`        BASE=`echo "$params" | cut -d ";" -f1`NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
ECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayareadBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsGet
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~~


    

    paramsGet:w"sh-PE-Ripley" 218 lines, 7259 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgview 1
"1" [Read only] 117 lines, 3303 characters #**********************************************************
#SHELL-ID:     sh-copiado-a-san*
#DATE-WRITTEN: 2010/02/11*
#LAST UPDATE:*
#AUTHOR:DATACREDITO - SOLUCIONES PERSONALIZADAS.   *
#PROGRAM-ID: - UTLRCCT8.CBL*
#- awk*
#- sed*
#**********************************************************
archLog=`echo $DATOS/sh-copiado-a-san.log`
archWrk=`echo $DATOS/sh-copiado-a-san.wrk`
if [ -s $archWrk ] ; then
  rm -f $archWrk
fi

clear
echo "+-------------------------------------------------------------+"
echo "|COPIADO DE LAS SAN A TRABAJO.|"
echo "+-------------------------------------------------------------+"
echo
echo

longParam=`echo $1 | tr -d '[:alpha:]' | awk '{printf("%d\n", length($0))}'`
fech_hoy=`date '+%Y%m%d'`
hora_hoy=`date '+%H:%M'`

if [ `expr $longParam + 0` -eq 0 ] ; then
  AAAA=`echo $fech_hoy | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
  MM=`echo $fech_hoy | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
else
if [ `expr $longParam + 0` -ne 6 ] ; then
    echo "\n\t*ERROR* Fecha Ingresada No Válida [$1]."
    exit
  else
AAAA=`echo $1 | cut -c 1-4 | awk '{ printf ("%04.04d\n", $0)}'`
    MM=`echo $1 | cut -c 5-6 | awk '{ printf ("%02.02d\n", $0)}'`
  fi
fi


numday=0
case `expr $MM + 0 2> /dev/null` in
   1|3|5|7|8|10|12) numday=31;;
   4|6|9|11) numday=30;;
   2)
if [ `expr $AAAA % 4` -eq 0 ] ; then
numday=29else
numday=28"1" [Read only] 117 lines, 3303 characters:q/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>view 1fg    view 1cat 1 ls 1 sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  ;;;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i
BASE=I<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;;;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:x
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:1
BASE=C<
NOM_ARCHIVO=x<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>^[[A  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;x;1;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:i c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
               ESTRUCTURA:1
BASE=C<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>tput cup 1 5
/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>



/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>

/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>


/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>

/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>

/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>



/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>


/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>



/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>/d/iccol/desarrollo/macros>tput sc ; tput cup 23 45 ; echo .Input from tput/echo at 23/45. ; tput rc
.Input from tput/echo at 23/45.
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>http://www.cs.utah.edu/dept/old/texinfo/tput/tput.html^L^R
http://www.cs.utah.edu/dept/old/texinfo/tput/tput.html^L                                                        
/d/iccol/desarrollo/macros>tput cub1
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>tput cub1tput cub1  ; tput cub11; tput cub11; tput cub1/d/iccol/desarrollo/macros>cub1; tput cub1; tput cub1                        <1; tput cub11; tput cub1/d/iccol/desarrollo/macros>cub1; tput cub1; tput cub1                      
/d/iccol/desarrollo/macros>tput cols
80
/d/iccol/desarrollo/macros>tput cup 11
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayaparamsGet
    readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    fi
paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit



#*******************************************************************************
#*******************************************************************************
#*******************************************************************************

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]thenBASE=$BASEnewloopEnd="1"elseprintf "\7"fidone}paramsGet() {#*******************************************************************************

    




    



    



    


    
OPEN MODE            tput cup 11:w"sh-PE-Ripley" 219 lines, 7274 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;1;1;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cup 11
fi
    done
}

paramsGet() {REPLACE 1 CHAR0:w"sh-PE-Ripley" 219 lines, 7274 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;1;1;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cup 10
fi
    done
}

paramsGet() {REPLACE 1 CHAR2:w"sh-PE-Ripley" 219 lines, 7274 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;1;1;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripleyfg          sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;1;1;;;;
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:w
 
                         ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) interna
      C) Provista por el Cliente
      enter para cancelar
 
                 BASE:
/d/iccol/desarrollo/macros>echo "The following ${r}WORD${N} should be in red."
The following WORD should be in red.
/d/iccol/desarrollo/macros>r=`tput setaf 1`
/d/iccol/desarrollo/macros>N=`tput sgr0`
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>N=`tput sgr0`r=`tput setaf 1`echo "The following ${r}WORD${N} should be in red.>/d/iccol/desarrollo/macros>sh-PE-Ripley                                       /d/iccol/desarrollo/macros>echo "The following ${r}WORD${N} should be in red.>/d/iccol/desarrollo/macros>
The following WORD should be in red.
/d/iccol/desarrollo/macros>echo $r

/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

paramsGet() {# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
219 lines deletedNo lines in bufferAPPEND MODE:set ai?noautoindent APPEND MODE    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F

    FECHA_PROC >| $0.parm


}




paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#                                    MAIN
#*******************************************************************************
#*******************************************************************************
    clear
    echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $raya

    paramsGet
    readBASE
    if [ $BASE == "C" ]
    then
        readNOM_ARCHIVO
        readTIPO_ARCHIVO
    else
        readTIPO_EXTRACT
    fi
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit







APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE#*******************************************************************************

APPEND MODE
}    FECHA_PROC >| $0.parm    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F

"sh-PE-Ripley" [Modified] line 2 of 53 --3%-- 
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
53 lines deletedNo lines in buffer
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~APPEND MODE# /d/iccol/desarrollo/macros/sh-PE-Ripley

#sh-PE-Ripley.V.1.0001


#*******************************************************************************



#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#       si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="1"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha de proceso
        FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                         TIPO DE EXTRACCIÓN"
        echo $raya
        echo "      N) Por NIT"
        echo "      C) Por codigo de suscriptor"
        echo "      enter para cancelar"
        echo " "
        echo "            TIPO de EXTRACCCIÓN:\c"
        read TIPO_EXTRACTnew
        if [ -z $TIPO_EXTRACTnew ]
        then
            loopEnd="1"
APPEND MODE            exit
APPEND MODE        fi
APPEND MODE        if [ $TIPO_EXTRACTnew == "c" ]
APPEND MODE        then
APPEND MODE            TIPO_EXTRACTnew="C"
APPEND MODE        fi
APPEND MODE        if [ $TIPO_EXTRACTnew == "n" ]
APPEND MODE        then
APPEND MODE            TIPO_EXTRACTnew="N"
APPEND MODE        fi
APPEND MODE        if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
APPEND MODE        then
APPEND MODE            TIPO_EXTRACT=$TIPO_EXTRACTnew
APPEND MODE            loopEnd="1"
APPEND MODE        else
APPEND MODE            printf "\7"
APPEND MODE            tput cuf 12
APPEND MODE        fi
APPEND MODE    done
APPEND MODE}
APPEND MODE
APPEND MODEreadTIPO_ARCHIVO() {
APPEND MODE#*******************************************************************************
APPEND MODE# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
APPEND MODE#*******************************************************************************
APPEND MODE    loopEnd="0"
APPEND MODE    while [ $loopEnd == "0" ]
APPEND MODE    do
APPEND MODE        echo " "
APPEND MODE#             ......................................................................
APPEND MODE        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
APPEND MODE        echo $raya
APPEND MODE        echo "      0) 1-11"
APPEND MODE        echo "      1) 1-11-45"
APPEND MODE        echo "      enter para cancelar"
APPEND MODE        echo " "
APPEND MODE        echo "            ESTRUCTURA:\c"
APPEND MODE        read TIPO_ARCHIVOnew
APPEND MODE        if [ -z $TIPO_ARCHIVOnew ]
APPEND MODE        then
APPEND MODE            loopEnd="1"
APPEND MODE            exit
APPEND MODE        fi
APPEND MODE        if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
APPEND MODE        then
APPEND MODE            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
APPEND MODE            loopEnd="1"
APPEND MODE        else
APPEND MODE            printf "\7"
APPEND MODE            tput cuf 12
APPEND MODE        fi
APPEND MODE    done
APPEND MODE}
APPEND MODE
APPEND MODEreadNOM_ARCHIVO() {
APPEND MODE#*******************************************************************************
APPEND MODE# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
APPEND MODE#*******************************************************************************
APPEND MODE    loopEnd="0"
APPEND MODE    while [ $loopEnd == "0" ]
APPEND MODE    do
APPEND MODE        echo " "
APPEND MODE#             ......................................................................
APPEND MODE        echo "                       NOMBRE DEL ARCHIVO BASE"
APPEND MODE        echo $raya
APPEND MODE        echo "      Ingrese el nombre del archivo base,"
APPEND MODE        echo "      enter para cancelar"
APPEND MODE        echo " "
APPEND MODE        echo "            ARCHIVO:\c"
APPEND MODE        read NOM_ARCHIVOnew
APPEND MODE        if [ -z $NOM_ARCHIVOnew ]
APPEND MODE        then
APPEND MODE            loopEnd="1"
APPEND MODE            exit
APPEND MODE        fi
APPEND MODE        if [ -d $NOM_ARCHIVOnew ]
APPEND MODE        then
APPEND MODE            printf "\7"
APPEND MODE            echo $NOM_ARCHIVOnew" es un nombre de directorio"
APPEND MODE            tput cuf 13
APPEND MODE        else
APPEND MODE            if [ ! -f $NOM_ARCHIVOnew ]
APPEND MODE            then
APPEND MODE                printf "\7"
APPEND MODE                echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"
APPEND MODE                tput cuf 13
APPEND MODE            else
APPEND MODE                NOM_ARCHIVO=$NOM_ARCHIVOnew
APPEND MODE                loopEnd="1"
APPEND MODE            fi
APPEND MODE        fi
APPEND MODE    done
APPEND MODE}
APPEND MODE
APPEND MODEreadBASE() {
APPEND MODE#*******************************************************************************
APPEND MODE# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
APPEND MODE#*******************************************************************************
APPEND MODE    loopEnd="0"
APPEND MODE    while [ $loopEnd == "0" ]
APPEND MODE    do
APPEND MODE        echo " "
APPEND MODE#             ......................................................................
APPEND MODE        echo "                       ORIGEN DE LA BASE"
APPEND MODE        echo $raya
APPEND MODE        echo "      I) Interna"
APPEND MODE        echo "      C) Provista por el Cliente"
APPEND MODE        echo "      enter para cancelar"
APPEND MODE        echo " "
APPEND MODE        echo "            BASE:\c"
APPEND MODE        read BASEnew
APPEND MODE        if [ -z $BASEnew ]
APPEND MODE        then
APPEND MODE            loopEnd="1"
APPEND MODE            exit
APPEND MODE        fi
APPEND MODE        if [ $BASEnew == "c" ]
APPEND MODE        then
APPEND MODE            BASEnew="C"
APPEND MODE        fi
APPEND MODE        if [ $BASEnew == "i" ]
APPEND MODE        then
APPEND MODE            BASEnew="I"
APPEND MODE        fi
APPEND MODE        if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
APPEND MODE        then
APPEND MODE            BASE=$BASEnew
APPEND MODE            loopEnd="1"
APPEND MODE        else
APPEND MODE            printf "\7"
APPEND MODE            tput cuf 12
APPEND MODE        fi
APPEND MODE    done
APPEND MODE}
APPEND MODE
APPEND MODEparamsGet() {
APPEND MODE#*******************************************************************************
APPEND MODE# Lee los parámetros de la corrida anterior
APPEND MODE#*******************************************************************************
APPEND MODE#   asegura que exista el arch de parámetros general
APPEND MODE    [ ! -f $0.parm ] && touch $0.parm
APPEND MODE#   lee los parámetros
APPEND MODE    params=`cat $0.parm`
APPEND MODE    echo '>>>> params: ' "$params"
APPEND MODE#   separa los parámetros según su posición
APPEND MODE    BASE=`echo "$params" | cut -d ";" -f1`
APPEND MODE    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
APPEND MODE    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
APPEND MODE    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
APPEND MODE    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
APPEND MODE    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
APPEND MODE    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
APPEND MODE}
APPEND MODE
APPEND MODEparamsPut() {
APPEND MODE#*******************************************************************************
APPEND MODE# Guarda los parámetros de la corrida en el archivo .parm
APPEND MODE#*******************************************************************************
APPEND MODE@
APPEND MODE    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
APPEND MODE    FECHA_PROC >| $0.parm
APPEND MODE}
APPEND MODE
APPEND MODEparamsPrint() {
APPEND MODE#*******************************************************************************
APPEND MODE# Muestra todos los parámetros, para pruebas
APPEND MODE#*******************************************************************************
APPEND MODE    echo "BASE="$BASE"<"
APPEND MODE    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
APPEND MODE    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
APPEND MODE    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
APPEND MODE    echo "ID_EXTRACT="$ID_EXTRACT"<"
APPEND MODE    echo "TIPO_PROC="$TIPO_PROC"<"
APPEND MODE    echo "FECHA_PROC="$FECHA_PROC"<"
APPEND MODE}
APPEND MODE
APPEND MODE
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE#                                    MAIN
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE    clear
APPEND MODE    echo $raya
APPEND MODE    echo "$ASCIIBanner"
APPEND MODE#   banner "PE Ripley"
APPEND MODE    echo $raya
APPEND MODE
APPEND MODE    paramsGet
APPEND MODE    readBASE
APPEND MODE    if [ $BASE == "C" ]
APPEND MODE    then
APPEND MODE        readNOM_ARCHIVO
APPEND MODE        readTIPO_ARCHIVO
APPEND MODE    else
APPEND MODE        readTIPO_EXTRACT
APPEND MODE    fi
APPEND MODE    paramsPrint
APPEND MODE    paramsPut
APPEND MODE    # DEBUG: termina acá
APPEND MODE    echo " "
APPEND MODE    echo "HASTA ACÁ LLEGAMOS"
APPEND MODE    exit
APPEND MODE
APPEND MODE
APPEND MODE
APPEND MODE
APPEND MODE
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE# de aquí para abajo, falta integrar (parte inexplorada)
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE#*******************************************************************************
APPEND MODE
APPEND MODE
APPEND MODE
APPEND MODEmostrar_parametros() {
APPEND MODE    #*******************************************************************************
APPEND MODE    #mostrar_parametros.
APPEND MODE    #   Lee y muestra los parametros de ventacruzada para un suscriptor
APPEND MODE    #*******************************************************************************
APPEND MODE    perams=`cat $cadena01.parm`
APPEND MODE    base=`echo $perams  | cut -d ";" -f1`
APPEND MODE    entfmt=`echo $perams  | cut -d ";" -f2`
APPEND MODE    fecha=`echo $perams  | cut -d ";" -f3`
APPEND MODE    echo "+-----------------------------------------------------------+"
APPEND MODE    echo "| *** PARAMETROS PROCESO PE FALABELLA SEMESTRAL ***         |"
APPEND MODE    echo '|       Base (I=interna, E=externa)     :  ' $base
APPEND MODE    echo '|       Formato(1=1-11,2=1-11-45)       :  ' $entfmt
APPEND MODE    echo "|       Fecha de Proceso                :  " $fecha
APPEND MODE    echo "+-----------------------------------------------------------+"
APPEND MODE    echo "Si desea modificar algun parametro digite S ---> \c"
APPEND MODE    read modpard
APPEND MODE    if test -z "$modpard"
APPEND MODE    then
APPEND MODE        modpar="N"
APPEND MODE    else
APPEND MODE        if [ $modpard == "s" ] || [ $modpard == "S" ]; then
APPEND MODE            modpar="S"
APPEND MODE        else
APPEND MODE            modpar="N"
APPEND MODE        fi
APPEND MODE    fi
APPEND MODE    if [ $modpar == "S" ] || [ $modpar == "s" ]; then
APPEND MODE        modificar_parametros
APPEND MODE    fi
APPEND MODE}
APPEND MODE
APPEND MODE#***********************************************************************
APPEND MODE#pedir_parametros
APPEND MODE#   Pide parametros y arma el archivo PEfalsemestral
APPEND MODE#***********************************************************************
APPEND MODEpedir_parametros() {
APPEND MODE    regp=""
APPEND MODE    echo "+--------------------------------------------------+"
APPEND MODE    echo "| La base de entrada puede ser:                    |"
APPEND MODE    echo '|         Interna Datacredito (I)                  |'
APPEND MODE    echo '|         o Externa           (E)                  |'
APPEND MODE    echo 'Digite tipo de base (I o E)   ---> \c'
APPEND MODE    read base
APPEND MODE    if test -z "$base"
APPEND MODE    then
APPEND MODE        base="I"
APPEND MODE    else
APPEND MODE        if [ $base == "E" ] || [ $base == "e" ]; then
APPEND MODE            base="E"
APPEND MODE        else
APPEND MODE            base="I"
APPEND MODE        fi
APPEND MODE    fi
APPEND MODE    reg=$regp$base";"
APPEND MODE    regp=$reg
APPEND MODE    #
APPEND MODE    echo "+--------------------------------------------------+"
APPEND MODE    if [ $base == "E" ]; then
APPEND MODE        echo "+--------------------------------------------------+"
APPEND MODE        echo "|El archivo de entrada puede tener formato:        |"
APPEND MODE        echo '|   1 - 11          (Digitar : 1)                  |'
APPEND MODE        echo '|   1 - 11 - 45     (Digitar : 2)                  |'
APPEND MODE        echo "Digite formato del archivo  ---> \c"
APPEND MODE        read entfmt
APPEND MODE        if test -z "$entfmt"
APPEND MODE        then
APPEND MODE            entfmt=1
APPEND MODE        else
APPEND MODE            if [ $entfmt -gt 2 ]; then
APPEND MODE                entfmt=2
APPEND MODE            else
APPEND MODE                if [ $entfmt -lt 1 ]; then
APPEND MODE                    entfmt=1
APPEND MODE                fi
APPEND MODE            fi
APPEND MODE        fi
APPEND MODE    else
APPEND MODE        entfmt=1
APPEND MODE    fi
APPEND MODE    reg=$regp$entfmt";"
APPEND MODE    regp=$reg
APPEND MODE    echo "+--------------------------------------------------+"
APPEND MODE    echo 'Si fecha de proceso no es la actual, digite fecha (AAAAMMDD) ---> \c'
APPEND MODE    read fechad
APPEND MODE    if test -z "$fechad"
APPEND MODE    then fecha=$fechah
APPEND MODE    else
APPEND MODE        if [ $fechah -gt $fechad ] || [ $fechah -eq $fechad ]; then
APPEND MODE            fecha=$fechad
APPEND MODE        else
APPEND MODE            echo "fecha digitada es invalida ... se asume fecha de hoy "
APPEND MODE            fecha=$fechah
APPEND MODE        fi
APPEND MODE    fi
APPEND MODE    reg=$regp$fecha";"
APPEND MODE    regp=$reg
APPEND MODE
APPEND MODE    fecha6=`echo $fecha  | cut -c1-6`
APPEND MODE    echo $reg >| $cadena01.parm
APPEND MODE    echo "Se grabo el registro de parametros"
APPEND MODE    echo $fecha
APPEND MODE    mostrar_parametros
APPEND MODE    #
APPEND MODE}
APPEND MODE
APPEND MODE#***********************************************************************
APPEND MODE#modificar_parametros
APPEND MODE#   Pide los parametros a modificar y graba el archivo ventacr$codsus  *
APPEND MODE#***********************************************************************
APPEND MODEmodificar_parametros() {
APPEND MODE    echo "Modificar parametros"
APPEND MODE    regp=""
APPEND MODE    echo "+--------------------------------------------------+"
APPEND MODE    echo "| La base de entrada puede ser:                    |"
APPEND MODE    echo '|         Interna Datacredito (I)                  |'
APPEND MODE    echo '|         o Externa           (E)                  |'
APPEND MODE    echo 'Digite tipo de base (I o E)   ---> \c'
APPEND MODE    read based
APPEND MODE    if test -z "$based"
APPEND MODE    then
APPEND MODE        reg=$regp$base";"
APPEND MODE        regp=$reg
APPEND MODE    else
APPEND MODE        if [ $based = "E" ] || [ $based = "e" ]; then
APPEND MODE            based="E"
APPEND MODE        else
APPEND MODE            based="I"
APPEND MODE        fi
APPEND MODE        reg=$regp$based";"
APPEND MODE#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
    FECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayaparamsGet
    readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO

    
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayaparamsGet
    readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    else
readTIPO_EXTRACT
    fi
paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************



mostrar_parametros() {
    #*******************************************************************************
    #mostrar_parametros.
    #   Lee y muestra los parametros de ventacruzada para un suscriptor
    #*******************************************************************************
    perams=`cat $cadena01.parm`
~
~
~
~
~
~
~
~
~
134 lines deleted:w"sh-PE-Ripley" 271 lines, 8937 characters exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
    FECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"        do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cuf 13
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cuf 13else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fiif [ $TIPO_EXTRACTnew == "n" ]then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "# Definición de constantesNITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"    NITSuscriptor=900047981raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgecho $recho "The following ${r}WORD${N} should be in red.>/d/iccol/desarrollo/macros>N=`tput sgr0`                                      /d/iccol/desarrollo/macros>r=`tput setaf 1`echo "The following ${r}WORD${N} should be in red.>/d/iccol/desarrollo/macros>sh-PE-Ripley                                       /d/iccol/desarrollo/macros>sh-PE-Ripleysh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  C;1;1;;;;
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:w
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:w
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:1
BASE=C<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
C;1;1;;;;
sh-PE-Ripley[6]: FECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
    NITSuscriptor=900047981raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fiexit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7""sh-PE-Ripley" line 57 of 271 --21%--     NITSuscriptor=900047981raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi# Definición de constantes#*******************************************************************************#AUTHOR:Globant - JL#LAST-UPDATE:  2014/05/23#DATE-WRITTEN: 2014/05/23#SHELL-ID:     sh-PE-Ripley#*******************************************************************************#sh-PE-Ripley.V.1.0001# /d/iccol/desarrollo/macros/sh-PE-Ripley

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"/\<cuf\>echo "enter para cancelar"echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit REPLACE MODEcup/fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnew
loopEnd="1"
else
printf "\7"
tput cuf 12cup
/# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cuf 13
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cuf 13else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayacup/cup/echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuf 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************cup/Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 271 lines, 8937 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:sdfadsfasdfs
El archivo sdfadsfasdfs no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"/archivo:TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cup 13
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cup 13else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}/13/:w"sh-PE-Ripley" 271 lines, 8935 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:asdfasdfsdf
El archivo asdfasdfsdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cup 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cup 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}"sh-PE-Ripley" line 142 of 271 --52%-- # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"/\cup\>echo "enter para cancelar"echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit REPLACE MODEcuu/fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnew
loopEnd="1"
else
printf "\7"
tput cup 12cuu
/# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cup 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cup 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $rayacuu/cuu/echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cup 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************cuu/Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 271 lines, 8935 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo "enter para cancelar"echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuu 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"/cuuecho "enter para cancelar"echo " "
echo "TIPO de EXTRACCCIÓN:\c"
read TIPO_EXTRACTnew
if [ -z $TIPO_EXTRACTnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_EXTRACTnew == "c" ]
then
TIPO_EXTRACTnew="C"
fi
if [ $TIPO_EXTRACTnew == "n" ]
then
TIPO_EXTRACTnew="N"
fi
if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"
else
printf "\7"
tput cuu 12
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit #*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter para cancelar"
echo " "
/readbasethen
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fireadBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuu 12
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`/121$CHANGE MODE8/Address search hit BOTTOM without matching pattern?    while [ $loopEnd == "0" ]do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 12
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi1$8?    loopEnd="0"#*******************************************************************************# Lee el tipo de archivo "0"=1-11  "1"=1-11-45#*******************************************************************************readTIPO_ARCHIVO() {}    donefitput cuu 121$8?Address search hit TOP without matching pattern:w"sh-PE-Ripley" 271 lines, 8932 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:w
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:lsdkfjsdlkfj
El archivo lsdkfjsdlkfj no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:w
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:0
BASE=C<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=0<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
C;1;0;;;;
sh-PE-Ripley[6]: FECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
tput cuu 8fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "0) 1-11"
echo "1) 1-11-45"
echo "enter para cancelar"
echo " "
echo "ESTRUCTURA:\c"
read TIPO_ARCHIVOnew
if [ -z $TIPO_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
printf "\7"
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "/Address search hit BOTTOM without matching pattern/cuu#   ......................................................................
printf "\7"    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
printf "\7"
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "



    

    #......................................................................
printf "\7":w"sh-PE-Ripley" 271 lines, 8932 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:dfgdfgdfg
El archivo dfgdfgdfg no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:fdfdfdf
El archivo fdfdfdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:w
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:1
BASE=C<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
C;1;1;;;;
sh-PE-Ripley[6]: FECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCCIÓN:w
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCCIÓN:q
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter para cancelar
 
            TIPO de EXTRACCCIÓN:n
BASE=I<
NOM_ARCHIVO=<
TIPO_ARCHIVO=<
TIPO_EXTRACT=N<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
I;;;N;;;
sh-PE-Ripley[6]: FECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "[if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

    REPLACE 1 CHAR#:w"sh-PE-Ripley" 271 lines, 8932 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:adfsdf
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 3
else
if [ ! -f $NOM_ARCHIVOnew ]then
#echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 3else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

TTtREPLACE 1 CHAR77

    

REPLACE 1 CHAR :w"sh-PE-Ripley" 271 lines, 8932 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:asdfsdf
El archivo asdfsdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 7
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 7else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}/7/REPLACE 1 CHAR8//8:w"sh-PE-Ripley" 271 lines, 8932 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:asdfasdf
El archivo asdfasdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:sdfsdf
El archivo sdfsdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:0
BASE=C<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=0<
TIPO_EXTRACT=<
ID_EXTRACT=<
TIPO_PROC=<
FECHA_PROC=<
sh-PE-Ripley[4]: @:  not found
C;1;0;;;;
sh-PE-Ripley[6]: FECHA_PROC:  not found
 
HASTA ACÁ LLEGAMOS
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]
then
BASEnew="C"
fi
if [ $BASEnew == "i" ]
then
BASEnew="I"
fi
if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
then
BASE=$BASEnew
loopEnd="1"
else
printf "\7"
tput cuu 8
fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
   echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";
"$F
 FECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    clear
echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $rayaparamsGet
    readBASE
    if [ $BASE == "C" ]
    then
readNOM_ARCHIVO
readTIPO_ARCHIVO
    else
readTIPO_EXTRACT
    fi
paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS"
    exit#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~

INSERT MODE POR AHORA
    echo "HASTA ACÁ LLEGAMOS POR AHORA"echo "$CHANGE MODE(pero estamos yendo más rápido)"yend$CHANGE MODEavanzandoecho "ARCHIVO:\c"read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "
echo "BASE:\c"
read BASEnew
if [ -z $BASEnew ]
then
loopEnd="1"
exit
fi
if [ $BASEnew == "c" ]echo " "echo "enter para cancelar"echo "Ingrese el nombre del archivo base,"echo $rayaecho "NOMBRE DEL ARCHIVO BASE"#......................................................................echo " "






OPEN MODE        tput el:w"sh-PE-Ripley" 273 lines, 8999 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:sdfasdfsdfsdf
El archivo sdfasdfsdfsdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
tput el
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"
echo " "


tput el:w"sh-PE-Ripley" 274 lines, 9009 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      C) Provista por el Cliente
      enter para cancelar
 
            BASE:c
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:asdfasdfasdfsdf
El archivo asdfasdfasdfsdf no se encuentra
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter para cancelar
 
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      0) 1-11
      1) 1-11-45
      enter para cancelar
 
            ESTRUCTURA:
/d/iccol/desarrollo/macros>fg
vi sh-PE-Ripley
echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter para cancelar"
echo " "
tput el
echo "ARCHIVO:\c"
read NOM_ARCHIVOnew
tput el
if [ -z $NOM_ARCHIVOnew ]
then
loopEnd="1"
exit
fi
if [ -d $NOM_ARCHIVOnew ]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"printf "\7"
tput cuu 8
else
if [ ! -f $NOM_ARCHIVOnew ]then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"printf "\7"
tput cuu 8else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"fi
fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "C) Provista por el Cliente"
echo "enter para cancelar"# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="1"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha de proceso
FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fgsh-PE-Ripleycsh-PE-Ripleyash-PE-Ripleytsh-PE-Ripley sh-PE-Ripley
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
    NITSuscriptor=900047981
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Valores iniciales de los parámetros
#   "I": la lista de IDs es interna  "C": provista x cliente
    BASE="C"
#       si BASE="C": archivo y estructura ("0": 1-11 o "1": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="1"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha de proceso
        FECHA_PROC=" "

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                         TIPO DE EXTRACCIÓN"
        echo $raya
        echo "      N) Por NIT"
        echo "      C) Por codigo de suscriptor"
        echo "      enter para cancelar"
        echo " "
        echo "            TIPO de EXTRACCCIÓN:\c"
        read TIPO_EXTRACTnew
        if [ -z $TIPO_EXTRACTnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ $TIPO_EXTRACTnew == "c" ]
        then
            TIPO_EXTRACTnew="C"
        fi
        if [ $TIPO_EXTRACTnew == "n" ]
        then
            TIPO_EXTRACTnew="N"
        fi
        if [ $TIPO_EXTRACTnew == "N" ] || [ $TIPO_EXTRACTnew == "C" ]
        then
            TIPO_EXTRACT=$TIPO_EXTRACTnew
            loopEnd="1"
        else
            printf "\7"
            tput cuu 8
        fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "0"=1-11  "1"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
        echo $raya
        echo "      0) 1-11"
        echo "      1) 1-11-45"
        echo "      enter para cancelar"
        echo " "
        echo "            ESTRUCTURA:\c"
        read TIPO_ARCHIVOnew
        if [ -z $TIPO_ARCHIVOnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ $TIPO_ARCHIVOnew == "0" ] || [ $TIPO_ARCHIVOnew == "1" ]
        then
            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
            loopEnd="1"
        else
            printf "\7"
            tput cuu 8
        fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                       NOMBRE DEL ARCHIVO BASE"
        echo $raya
        echo "      Ingrese el nombre del archivo base,"
        echo "      enter para cancelar"
        echo " "
                tput el
        echo "            ARCHIVO:\c"
        read NOM_ARCHIVOnew
                tput el
        if [ -z $NOM_ARCHIVOnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ -d $NOM_ARCHIVOnew ]
        then
            echo $NOM_ARCHIVOnew" es un nombre de directorio"
            printf "\7"
            tput cuu 8
        else
            if [ ! -f $NOM_ARCHIVOnew ]
            then
                echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"
                printf "\7"
                tput cuu 8
            else
                NOM_ARCHIVO=$NOM_ARCHIVOnew
                loopEnd="1"
            fi
        fi
    done
}

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [ $loopEnd == "0" ]
    do
        echo " "
#             ......................................................................
        echo "                       ORIGEN DE LA BASE"
        echo $raya
        echo "      I) Interna"
        echo "      C) Provista por el Cliente"
        echo "      enter para cancelar"
        echo " "
        echo "            BASE:\c"
        read BASEnew
        if [ -z $BASEnew ]
        then
            loopEnd="1"
            exit
        fi
        if [ $BASEnew == "c" ]
        then
            BASEnew="C"
        fi
        if [ $BASEnew == "i" ]
        then
            BASEnew="I"
        fi
        if [ $BASEnew == "C" ] || [ $BASEnew == "I" ]
        then
            BASE=$BASEnew
            loopEnd="1"
        else
            printf "\7"
            tput cuu 8
        fi
    done
}

paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [ ! -f $0.parm ] && touch $0.parm
#   lee los parámetros
    params=`cat $0.parm`
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=`echo "$params" | cut -d ";" -f1`
    NOM_ARCHIVO=`echo "$params" | cut -d ";" -f2`
    TIPO_ARCHIVO=`echo "$params" | cut -d ";" -f3`
    TIPO_EXTRACT=`echo "$params" | cut -d ";" -f4`
    ID_EXTRACT=`echo "$params" | cut -d ";" -f5`
    TIPO_PROC=`echo "$params" | cut -d ";" -f6`
    FECHA_PROC=`echo "$params" | cut -d ";" -f7`
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
@
    echo $BASE";"$NOM_ARCHIVO";"$TIPO_ARCHIVO";"$TIPO_EXTRACT";"$ID_EXTRACT";"$TIPO_PROC";"$F
    FECHA_PROC >| $0.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_PROC="$FECHA_PROC"<"
}


#*******************************************************************************
#*******************************************************************************
#                                    MAIN
#*******************************************************************************
#*******************************************************************************
    clear
    echo $raya
    echo "$ASCIIBanner"
#   banner "PE Ripley"
    echo $raya

    paramsGet
    readBASE
    if [ $BASE == "C" ]
    then
        readNOM_ARCHIVO
        readTIPO_ARCHIVO
    else
        readTIPO_EXTRACT
    fi
    paramsPrint
    paramsPut
    # DEBUG: termina acá
    echo " "
    echo "HASTA ACÁ LLEGAMOS POR AHORA"
    echo "(pero estamos avanzando más rápido)"
    exit





#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
# de aquí para abajo, falta integrar (parte inexplorada)
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
/d/iccol/desarrollo/macros>tput bel
/d/iccol/desarrollo/macros>^D
