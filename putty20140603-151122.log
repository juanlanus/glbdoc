=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2014.06.03 15:11:22 =~=~=~=~=~=~=~=~=~=~=~=
login as: icjlud
Using keyboard-interactive authentication.
Password: 
Last login: Tue Jun  3 07:52:30 2014 from 172.16.10.118
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
You have new mail.
COBJVM=sun_142
JAVA_HOME=/usr/j2se
LD_LIBRARY_PATH=/usr/j2se/jre/lib/sparc:/usr/j2se/jre/lib/sparc/client:/usr/j2se/jre/lib/sparc/native_threads:/usr/j2se/jre/lib/sparc:/opt/mfocus/des/cobol/lib:/opt/IBM/db2/V9.7/lib:/export/home/db2inst1/sqllib/lib64:/export/home/db2inst1/sqllib/lib32
PATH=/usr/j2se/jre/sh:/usr/j2se/sh:/usr/j2se/bin:/usr/j2se/jre/bin:/opt/mfocus/des/cobol/lib:/opt/mfocus/des/cobol/bin:/usr/bin:/bin:/usr/bin:/d/iccol/desarrollo/macros:/d/iccol/desarrollo/utiles:/opt/bin:/usr/sbin:/usr/lib:/usr/ccs/bin:/opt/SUNWspro/bin:/usr/jdk/latest/bin:/usr/local/bin:/usr/j2se/bin:/usr/openwin/bin:.:/export/home/db2inst1/sqllib/bin:/export/home/db2inst1/sqllib/adm:/export/home/db2inst1/sqllib/misc
CLASSPATH=/opt/mfocus/des/cobol/lib/mfcobol.jar:.:/usr/j2se/jre/lib/rt.jar:/opt/mfocus/des/cobol/lib/mfimtk.jar:/opt/mfocus/des/cobol/lib/xerces.jar:/opt/mfocus/des/cobol/lib/castor-0_9_4_1-xml.jar:/opt/mfocus/des/cobol/lib/mfcobol.jar:/usr/j2se/jre/lib/dt.jar:/usr/j2se/jre/lib/rt.jar:/d/iccol/desarrollo/java/server:/export/home/db2inst1/sqllib/java/db2java.zip:/export/home/db2inst1/sqllib/java/db2jcc.jar:/export/home/db2inst1/sqllib/java/sqlj.zip:/export/home/db2inst1/sqllib/function:/export/home/db2inst1/sqllib/java/db2jcc_license_cu.jar:.
COBCPY=/opt/mfocus/des/cobol/cpylib:/opt/mfocus/des/cobol/cpylib:/d/iccol/desarrollo/copys/pais:/d/iccol/desarrollo/copys
Java version = 1.4.2_19
Java vendor = Sun Microsystems Inc.
Java OS name = SunOS
Java OS arch = sparc
Java OS version = 5.10

  ####    ####   #####   ######   ####
 #    #  #    #  #    #  #       #
 #       #    #  #    #  #####    ####
 #       #    #  #    #  #            #
 #    #  #    #  #    #  #       #    #
  ####    ####   #####   ######   ####

 #####
#     #   ####   #        ####   #    #  #####      #      ##
#        #    #  #       #    #  ##  ##  #    #     #     #  #
#        #    #  #       #    #  # ## #  #####      #    #    #
#        #    #  #       #    #  #    #  #    #     #    ######
#     #  #    #  #       #    #  #    #  #    #     #    #    #
 #####    ####   ######   ####   #    #  #####      #    #    #

 #####
#     #   ####   #    #  #####      #    #         ##     ####      #     ####
#        #    #  ##  ##  #    #     #    #        #  #   #    #     #    #    #
#        #    #  # ## #  #    #     #    #       #    #  #          #    #    #
#        #    #  #    #  #####      #    #       ######  #          #    #    #
#     #  #    #  #    #  #          #    #       #    #  #    #     #    #    #
 #####    ####   #    #  #          #    ######  #    #   ####      #     ####

 #####                                           #####  #         ###
#     #  #    #  #    #          #    #         #     # #    #   #   #
#        #    #  ##   #          #    #               # #    #  #     #
 #####   #    #  # #  #          #    #          #####  #    #  #     #
      #  #    #  #  # #          #    #   ###   #       ####### #     #
#     #  #    #  #   ##           #  #    ###   #            #   #   #
 #####    ####   #    # #######    ##     ###   #######      #    ###

icjlud@codes /d/iccol/desarrollo
$ . viset
viset running
/d/iccol/desarrollo>banner hola

 #    #   ####   #         ##
 #    #  #    #  #        #  #
 ######  #    #  #       #    #
 #    #  #    #  #       ######
 #    #  #    #  #       #    #
 #    #   ####   ######  #    #

/d/iccol/desarrollo>^[  /d/iccol/desarrollo>banner holabanner hola juan

 #    #   ####   #         ##
 #    #  #    #  #        #  #
 ######  #    #  #       #    #
 #    #  #    #  #       ######
 #    #  #    #  #       #    #
 #    #   ####   ######  #    #


      #  #    #    ##    #    #
      #  #    #   #  #   ##   #
      #  #    #  #    #  # #  #
      #  #    #  ######  #  # #
 #    #  #    #  #    #  #   ##
  ####    ####   #    #  #    #

/d/iccol/desarrollo>banner Hola
#     #
#     #   ####   #         ##
#     #  #    #  #        #  #
#######  #    #  #       #    #
#     #  #    #  #       ######
#     #  #    #  #       #    #
#     #   ####   ######  #    #

/d/iccol/desarrollo>clear
/d/iccol/desarrollo>ma
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>maclearbanner Holabanner hola juanbanner hola     . viset    fg     sh-PE-Ripley2
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
DEBUG
>>>> params:  I;1;1;C;123456;H;20120101
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:e
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=1
 
            ARCHIVO:1
            ARCHIVO:1
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      1) 1-11
      2) 1-11-45
      enter=1
 
            ESTRUCTURA:1
            ESTRUCTURA:1
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=H
 
            TIPO de PROCESO:H
            TIPO de PROCESO:h
 
                  FECHA INICIAL DE PROCESO HISTÓRICO
----------------------------------------------------------------------
      Ingrese fecha inicial de proceso,
      enter=20120101
 
            FECHA INICIO de PROCESO AAAAMMDD:20120101
            FECHA INICIO de PROCESO AAAAMMDD:
BASE=E<
NOM_ARCHIVO=1<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=C<
ID_EXTRACT=123456<
TIPO_PROC=H<
FECHA_INICIO=20120101<
E;1;1;C;123456;H;20120101
file: sh-PE-Ripley2.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140603
    Archivo: 1
    Base: E  provista por el cliente
    Estructura: 1  1-11
    Tipo de proceso: H  histórico, desde: 20120101
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:1
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=E
 
            BASE:E
            BASE:i
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=C
 
            TIPO de EXTRACCIÓN:C
            TIPO de EXTRACCIÓN:^C
/d/iccol/desarrollo/macros>fg
ksh: fg: no such job
/d/iccol/desarrollo/macros>^[k  /d/iccol/desarrollo/macros>fgsh-PE-Ripley2vsh-PE-Ripley2ish-PE-Ripley2 sh-PE-Ripley2
"sh-PE-Ripley2" 752 lines, 26722 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
# MODIFICCADO línea 601 genera un nombre de archivo ZZZ<fecha> para no colisionar
#con las pruebas
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=1# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]"sh-PE-Ripley2" 752 lines, 26722 characters/id_archivoAddress search hit BOTTOM without matching pattern/nom_archivo/tput cuu 1 # vuelve a la línea anteriorecho "$rotulo\c"
read BASEnew
if [[ -z $BASEnew ]]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew = "e" ] && BASEnew="E"[ $BASEnew = "i" ] && BASEnew="I"if [[ $BASEnew = "E" ]] || [[ $BASEnew = "I" ]]then
BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]]//


    


    



if [[ $BASEnew = "E" ]] || [[ $BASEnew = "I" ]]then
BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnew




tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}






    

elif [[ -d INSERT MODE$TEMPORALES/

    




    f


f $TEMPORALES/"sh-PE-Ripley2" [Modified] line 114 of 752 --15%-- :w"sh-PE-Ripley2" 752 lines, 26746 characters [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>vi sh-PE-Ripley2vi sh-PE-Ripley 
"sh-PE-Ripley" 749 lines, 26596 characters # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP="nohup"# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " ""sh-PE-Ripley" 749 lines, 26596 charactersecho "NOMBRE DEL ARCHIVO BASE"echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"f [[ ! -f INSERT MODE$TEMPORALES/$TEMPORALES/# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP="nohup"# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "/N\/AparamsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:N/$CHANGE MODE /N/$ /N/$ /N/$ /N/$ /Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley" 749 lines, 26610 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-" "}";"${TIPO_ARCHIVO:-" "}";"
allParms=$allParms${TIPO_EXTRACT:-" "}";"${ID_EXTRACT:-" "}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-" "}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %1
vi sh-PE-Ripley2
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
# MODIFICCADO línea 601 genera un nombre de archivo ZZZ<fecha> para no colisionar
#con las pruebas
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=1# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]/N\/AparamsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-"N/A"}";"${TIPO_ARCHIVO:-"N/A"}";"
allParms=$allParms${TIPO_EXTRACT:-"N/A"}";"${ID_EXTRACT:-"N/A"}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-"N/A"}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:N/$CHANGE MODE /N/$ /N/$ /N/$ /N/$ /Address search hit BOTTOM without matching pattern:w"sh-PE-Ripley2" 752 lines, 26736 characters loopEnd="1"fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew = "1" ]] || [[ $TIPO_ARCHIVOnew = "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "
rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew = "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew = "n" ] && TIPO_EXTRACTnew="N"if [[ $TIPO_EXTRACTnew = "N" ]] || [[ $TIPO_EXTRACTnew = "C" ]]then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [[ $TIPO_EXTRACT = "N" ]]
    then
criterioExtraccion="NIT"
inputLen=9
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
echo "enter="$ID_EXTRACT
echo " "
tput el # borra caracteres sobrantes
rotulo="$criterioExtraccion:"
echo "$rotulo"$ID_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read ID_EXTRACTnew
tput el # borra mensaje de error
if [[ -z $ID_EXTRACTnew ]] # acepta el valor actual
then
loopEnd="1"
elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números
then
echo "el dato ingresado debe ser numérico"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (9 o 6)
then
echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'tput bel
[ $doCuu = "1" ] &&  tput cuu 8
else # todo OK
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter="$TIPO_PROCecho " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "
rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew = "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew = "n" ] && TIPO_EXTRACTnew="N"if [[ $TIPO_EXTRACTnew = "N" ]] || [[ $TIPO_EXTRACTnew = "C" ]]then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [[ $TIPO_EXTRACT = "N" ]]
    then
criterioExtraccion="NIT"
inputLen=9
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................loopEnd="1"fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew = "1" ]] || [[ $TIPO_ARCHIVOnew = "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>who
icjjmd     pts/16       May 27 15:47    (10.98.2.175)
db2inst1   pts/38       Jun  3 09:58    (10.98.4.30)
icehad     pts/37       Jun  3 11:00    (10.98.2.124)
icjcld     pts/35       May 22 16:41    (10.98.2.188)
icjdld     pts/15       May 27 08:55    (10.98.2.123)
icimsd     pts/40       Jun  3 11:42    (10.98.2.122)
icgasd     pts/41       Jun  3 10:39    (10.98.2.127)
icjdld     pts/1        May 23 15:52    (10.98.2.123)
icjjmd     pts/2        May 27 11:22    (10.98.2.175)
icgasd     pts/47       Jun  3 10:31    (10.98.2.127)
icjdld     pts/50       May 26 12:15    (10.98.2.123)
icrmbd     pts/53       May 29 07:41    (10.98.2.10)
icfacd     pts/45       May 22 19:08    (10.98.2.108)
icrmbd     pts/44       Jun  3 07:55    (10.98.2.10)
icimsd     pts/55       Jun  3 10:35    (10.98.2.122)
icnagd     pts/61       Jun  3 13:26    (172.16.10.13)
icdgd      pts/62       Jun  3 11:45    (172.16.10.122)
iclagd     pts/18       Jun  3 10:51    (172.16.10.115)
icimsd     pts/19       Jun  3 11:42    (10.98.2.122)
iclagd     pts/20       Jun  3 09:14    (172.16.10.115)
icfard     pts/60       Jun  3 11:15    (10.98.2.121)
icrmbd     pts/33       May 30 15:48    (10.98.2.10)
iclagd     pts/22       Jun  3 06:17    (172.16.10.115)
ichdd      pts/24       Jun  3 09:43    (172.16.10.125)
icgjcd     pts/59       May 30 17:12    (10.98.2.235)
icjjmd     pts/25       Jun  3 11:11    (10.98.2.175)
icjjmd     pts/28       May 29 09:17    (10.98.2.175)
icrmbd     pts/29       Jun  3 12:17    (10.98.2.10)
icjlud     pts/32       Jun  3 13:11    (172.16.10.12)
icrmbd     pts/65       Jun  3 08:57    (10.98.2.10)
icjjmd     pts/43       Jun  3 08:05    (10.98.2.175)
/d/iccol/desarrollo/macros>jobs
[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley2
[2] - Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>fg %1
vi sh-PE-Ripley2
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************/>>.*log    fi
        done
    }

    readTIPO_ARCHIVO() {
    #****
    # Lee el tipo de archivo "1"=1-11  "2"=1-11-45
    #****
526 lines >>edfi
    done
}

readTIPO_ARCHIVO() {
#****
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#****/>>.*logif [[ -z "$sanata" ]]then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi
# cancela si no extrajo nada
    if [[ cantRegsExtraidos -le 0 ]]
    then
echo "Extracción produjo cero registros - cancelando"
exit
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
# MODIFICCADO línea 601 genera un nombre de archivo ZZZ<fecha> para no colisionar
#con las pruebas
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=1# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]/if [[ -z "$sanata" ]]then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi
# cancela si no extrajo nada
    if [[ cantRegsExtraidos -le 0 ]]
    then
echo "Extracción produjo cero registros - cancelando"
exit
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then        
/        
/echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
echo $raya
echo "SCOTBATCH: cálculo de scores"
echo " "
sleep 1
# echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log    
# parámetros para el programa:        # parámetros para el programa:formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
    echo " "
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
    sleep 1
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo.log 2>>$archivo.log
    tail -20 $archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls -l *$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio  "finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:"sh-PE-Ripley2" [Modified] line 686 of 752 --91%-- [1] + Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>jobs
[1] + Stopped (SIGTSTP)        vi sh-PE-Ripley2
[2] - Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>1G  fg %2
vi sh-PE-Ripley
paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-" "}";"${TIPO_ARCHIVO:-" "}";"
allParms=$allParms${TIPO_EXTRACT:-" "}";"${ID_EXTRACT:-" "}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-" "}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP="nohup"# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "/cantregsextraidosecho "Máquina de desarrollo:" $P_MAQUINAICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
    if [[ TIPO_EXTRAC = "N" ]]
    then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)"sh-PE-Ripley" line 459 of 749 --61%-- read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi
# cancela si no extrajo nada
    if [[ cantRegsExtraidos -le 0 ]]
    then
echo "Extracción produjo cero registros - cancelando"
exit
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fiiff [[ cantRegsExtraidos -le 0 ]]  [[ cantRegsExtraidos -le 0 ]][[ cantRegsExtraidos -le 0 ]] [[ cantRegsExtraidos -le 0 ]][[ cantRegsExtraidos -le 0 ]] [[ cantRegsExtraidos -le 0 ]]]APPEND MODE ||    if [[ /cINSERT MODE-n s :w"sh-PE-Ripley" 749 lines, 26640 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>view $TEMPORALES/pripley1.prn
"/d/iccol/desarrollo/temporales/pripley1.prn" [Read only] 124730 lines, 1746220 characters 100000000480^M
100000000584^M
100000001415^M
100000003849^M
100000006212^M
100000008689^M
100000009441^M
100000009750^M
100000010237^M
100000011033^M
100000011586^M
100000013546^M
100000014484^M
100000014551^M
100000014921^M
100000015661^M
100000016555^M
100000017790^M
100000022201^M
100000022998^M
100000025714^M
100000028584^M
100000028854^M
100000030832^M
100000030869^M
100000032384^M
100000033144^M
100000033824^M
100000033993^M
100000034227^M
100000036102^M
100000036138^M
100000039411^M
100000039972^M
100000042409^M
100000045413^M
100000045551^M
100000048123^M
100000048263^M
100000051899^M
100000052162^M
100000052452^M
100000053080^M
100000055197^M
100000055346^M
100000055914^M
100000058754^M
100000059035^M
100000060120^M"/d/iccol/desarrollo/temporales/pripley1.prn" [Read only] 124730 lines, 1746220 characters:q/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
    fi
# cancela si no extrajo nada
    if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
    then
echo "Extracción produjo cero registros - cancelando"
exit
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi#*******************************************************************************


    

    fi       # cancela si no extrajo nada
        if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
        then
    echo "Extracción produjo cero registros - cancelando"
    exit
        fi6 lines >>ed:w"sh-PE-Ripley" 749 lines, 26643 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2jobs view $TEMPORALES/pripley1.prn/d/iccol/desarrollo/macros>jobs                         /d/iccol/desarrollo/macros>fg %2     sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;C;123456;H;20120101
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:
 
                         TIPO DE EXTRACCIÓN
----------------------------------------------------------------------
      N) Por NIT
      C) Por codigo de suscriptor
      enter=C
 
            TIPO de EXTRACCIÓN:C
            TIPO de EXTRACCIÓN:^C
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;C;123456;H;20120101
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:e
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=1
 
            ARCHIVO:1
            ARCHIVO:^C
/d/iccol/desarrollo/macros>ls $TEMPORALES/pripley*
/d/iccol/desarrollo/temporales/pripley1.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>ls $TEMPORALES/pripley*sh-PE-Ripley           
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  I;1;1;C;123456;H;20120101
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=I
 
            BASE:I
            BASE:e
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=1
 
            ARCHIVO:1
            ARCHIVO:pripley1.prn
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      1) 1-11
      2) 1-11-45
      enter=1
 
            ESTRUCTURA:1
            ESTRUCTURA:1
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=H
 
            TIPO de PROCESO:H
            TIPO de PROCESO:a
BASE=E<
NOM_ARCHIVO=pripley1.prn<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=C<
ID_EXTRACT=123456<
TIPO_PROC=A<
FECHA_INICIO=20140603<
E;pripley1.prn;1;C;123456;A;20140603
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140603
    Archivo: pripley1.prn
    Base: E  provista por el cliente
    Estructura: 1  1-11
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: pripley1.prn.prn
cat: cannot open pripley1.prn.prn
pripley1.prn.prn: No such file or directory
PESVNO pripley1.prn.prn pripley1.prn.val pripley1.prn.inc 10 2
nohup: cannot open/create nohup.out: Permission denied
sh-PE-Ripley[20]: pripley1.prn.val: cannot open
sh-PE-Ripley[21]: pripley1.prn.inc: cannot open
PESVNO - registros válidos:  inconsistentes:  total: 1
expr: syntax error
expr: syntax error
 
----------------------------------------------------------------------
Las cantidades de registros no cuadran: proceso cancelado
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>co p / $TEMPORALES/pripley1.prn .
/d/iccol/desarrollo/macros>ls prip*
pripley1.prn
/d/iccol/desarrollo/macros>vi pro ip*
"pripley1.prn" 124730 lines, 1746220 characters 100000000480^M
100000000584^M
100000001415^M
100000003849^M
100000006212^M
100000008689^M
100000009441^M
100000009750^M
100000010237^M
100000011033^M
100000011586^M
100000013546^M
100000014484^M
100000014551^M
100000014921^M
100000015661^M
100000016555^M
100000017790^M
100000022201^M
100000022998^M
100000025714^M
100000028584^M
100000028854^M
100000030832^M
100000030869^M
100000032384^M
100000033144^M
100000033824^M
100000033993^M
100000034227^M
100000036102^M
100000036138^M
100000039411^M
100000039972^M
100000042409^M
100000045413^M
100000045551^M
100000048123^M
100000048263^M
100000051899^M
100000052162^M
100000052452^M
100000053080^M
100000055197^M
100000055346^M
100000055914^M
100000058754^M
100000059035^M
100000060120^M"pripley1.prn" 124730 lines, 1746220 characters:q/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP="nohup"# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "/input pesvno    if [[ TIPO_EXTRAC = "N" ]]then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:
" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya/input pesvnoAddress search hit BOTTOM without matching pattern?Address search hit TOP without matching pattern
    



    PESVNO_INPUT=${archivo}"VALI.prn"cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total
:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
  readBASE# I interna, C cliente
if [[ $BASE = "E" ]]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [[ $TIPO_PROC = "H" ]]
then
readFECHA_INICIO# fecha desde
elsePESVNO_INPUT=${archivo}"VALI.prn"cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $cantDeRegi
strosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
  readBASE# I interna, C cliente
if [[ $BASE = "E" ]]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [[ $TIPO_PROC = "H" ]]
then
readFECHA_INICIO# fecha desde
else
ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA = $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
    if [[ TIPO_EXTRAC = "N" ]]
    then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUTejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $cantDeRegi
strosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
  readBASE# I interna, C cliente
if [[ $BASE = "E" ]]
then
readNOM_ARCHIVO# nombre del archivo base
/ejecutar_validacionecho $rayaecho "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log# un nombre armado con "PERipley" y la fecha del día# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name, o la hora
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log/?    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
    if [[ TIPO_EXTRAC = "N" ]]
    then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $
cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $
cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
  readBASE# I interna, C cliente
if [[ $BASE = "E" ]]
then
readNOM_ARCHIVO# nombre del archivo base}    TIPO_ARCHIVO="1"  # es un archivo 1-11    echo "Registros extraídos: "$cantRegsExtraidos    cantRegsExtraidos=$(wc -l < $archivo_prn)    # cuenta los registros extraídos    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prnprint -n "${i}Estructura: "$TIPO_ARCHIVO[[ $TIPO_ARCHIVO = "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO = "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT = "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT = "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC = "H" ]]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA = $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
    if [[ TIPO_EXTRAC = "N" ]]
    then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos    
cantRegsExtraidos=$(wc -l < $archivo_prn)
echo "Registros extraídos: "$cantRegsExtraidos
TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
echo "Input PESVNO: "$archivo_prn//echo $rayaecho "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion    OPEN MODEelse
OPEN MODE    cp $archivo $archivo_prn:w
OPEN MODE[[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    else
cp $archivo $archivo_prn:w

    
[[ -s $archivo_val ]] && rm $archivo_val:w"sh-PE-Ripley" 751 lines, 26676 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2jobs vi prip*ls prip*cp $TEMPORALES/pripley1.prn ./d/iccol/desarrollo/macros>sh-PE-Ripley                 /d/iccol/desarrollo/macros>
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  E;pripley1.prn;1;C;123456;A;20140603
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=E
 
            BASE:E
            BASE:
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=pripley1.prn
 
            ARCHIVO:pripley1.prn
            ARCHIVO:
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      1) 1-11
      2) 1-11-45
      enter=1
 
            ESTRUCTURA:1
            ESTRUCTURA:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=E<
NOM_ARCHIVO=pripley1.prn<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=C<
ID_EXTRACT=123456<
TIPO_PROC=A<
FECHA_INICIO=20140603<
E;pripley1.prn;1;C;123456;A;20140603
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140603
    Archivo: pripley1.prn
    Base: E  provista por el cliente
    Estructura: 1  1-11
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: pripley1.prn.prn
PESVNO pripley1.prn.prn pripley1.prn.val pripley1.prn.inc 10 2
nohup: cannot open/create nohup.out: Permission denied
sh-PE-Ripley[20]: pripley1.prn.val: cannot open
sh-PE-Ripley[21]: pripley1.prn.inc: cannot open
PESVNO - registros válidos:  inconsistentes:  total: 124731
expr: syntax error
expr: syntax error
 
----------------------------------------------------------------------
Las cantidades de registros no cuadran: proceso cancelado
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    else
cp $archivo $archivo_prn
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val"sh-PE-Ripley" line 654 of 751 --87%-- # /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP="nohup"# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " ":w"sh-PE-Ripley" 751 lines, 26671 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2sh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  E;pripley1.prn;1;C;123456;A;20140603
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=E
 
            BASE:E
            BASE:
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=pripley1.prn
 
            ARCHIVO:pripley1.prn
            ARCHIVO:
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      1) 1-11
      2) 1-11-45
      enter=1
 
            ESTRUCTURA:1
            ESTRUCTURA:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=E<
NOM_ARCHIVO=pripley1.prn<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=C<
ID_EXTRACT=123456<
TIPO_PROC=A<
FECHA_INICIO=20140603<
E;pripley1.prn;1;C;123456;A;20140603
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140603
    Archivo: pripley1.prn
    Base: E  provista por el cliente
    Estructura: 1  1-11
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: pripley1.prn.prn
PESVNO pripley1.prn.prn pripley1.prn.val pripley1.prn.inc 10 2

real    0m11.68s
user    0m4.01s
sys     0m1.78s
PESVNO - registros válidos: 3057  inconsistentes: 121673  total: 124731
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
124731
ARCHIVO: pripley1.prn.prn              
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 003057
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 121673
Registros Tipo 5 repetidos ==> 000000
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
 
SCOTBATCH 201406 067 VAL pripley1.prn.val
  W-TIPO-ARCHIVO: VAL
         Archivo: pripley1.prn.val                                                                
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140603
FECHA RECOGIDA BD(YYYYMM) : 201406
Tipo score: ACIERTA+   
                                             
Score formato validado   
                                             
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (VACIO)         
===== CONTADORES FINALES    ====
Clientes con ACIERTA+  mayor a ceros: 0000026
================================
SE LEYERON EN TOTAL: 0003057

real    0m12.53s
user    0m8.27s
sys     0m0.95s

Inicio de Programa:  2014/06/03 13:59:24
Fin de Programa:     2014/06/03 13:59:36

----------------------------------------------------------------------
ICEPRERIP01: datos para Ripley
 
                
+---------------------------------------------------+
|      *** RESULTADOS DEL INFORME       ***         |
+----------------------------------+----------------+
|     DETALLE CALIFICACION         | CALF |  # REG. |
+----------------------------------+------+---------+
| - Registros con informacion      | O.K  |       54
| - Registros sin informacion      | SIN  |    3,003
| - Registros inconsistencias      | INC  |  121,673
+----------------------------------+------+---------+
| - Total Registro procesados             |    3,057
+----------------------------------+------+---------+

real    0m4.14s
user    0m2.10s
sys     0m1.62s

Inicio de Programa:  2014/06/03 13:59:37
Fin de Programa:     2014/06/03 13:59:41

----------------------------------------------------------------------
ARCHIVOS:
 
-rw-rw-r--   1 icdgd    icdatacr 1746220 Jun  3 13:17 pripley1.prn
-rw-rw-r--   1 icjlud   icdatacr 18737642 Jun  3 13:59 pripley1.prn.inc
-rw-rw-r--   1 icjlud   icdatacr 3255638 Jun  3 13:59 pripley1.prn.log
-rw-rw-r--   1 icjlud   icdatacr 1746244 Jun  3 13:59 pripley1.prn.prn
-rw-rw-r--   1 icjlud   icdatacr  202828 Jun  3 13:59 pripley1.prn.val
 
 
----------------------------------------------------------------------
fin del proceso sh-PE-Ripley
Iniciado: 13:59:00 finalizado: 13:59:41
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:Globant - JL
#*******************************************************************************
# Definición de constantes
    debug=0# cero para producción, 1 para test
    doCuu="1"# reposicionar el cursor luego de un error
    NOHUP=""# contiene "nohup" en producción, null para test
    cancelado="0"# las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"# hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
######  #######    ######
#     # ##     # # #####  ####### #   #
#     # ##     # # #    # ### #
######  ###########  # #    # ######    #
###   #   # #####  ###
###    #  # ####
########    #     # # ####### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
NOM_ARCHIVO=" "
TIPO_ARCHIVO="2"
#si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
TIPO_EXTRACT="N"
#si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACTID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#Si TIPO_PROC="H": la fecha inicio de proceso histórico
FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "    do
  echo " "
#......................................................................
echo "ORIGEN DE LA BASE"
echo $raya
echo "I) Interna"
echo "E) Externa, provista por el Cliente"
echo "enter="$BASE
echo " "
rotulo="BASE:"
echo "$rotulo"$BASE
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read BASEnew
if [[ -z $BASEnew ]]
then
# aceptó el valor actualloopEnd="1"
else
# convierte a mayúsculas[ $BASEnew = "e" ] && BASEnew="E"[ $BASEnew = "i" ] && BASEnew="I"if [[ $BASEnew = "E" ]] || [[ $BASEnew = "I" ]]then
BASE=$BASEnew
loopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "NOMBRE DEL ARCHIVO BASE"
echo $raya
echo "Ingrese el nombre del archivo base,"
echo "enter="$NOM_ARCHIVO
echo " "
tput elecho " "
tput el
rotulo="ARCHIVO:"
echo "$rotulo"$NOM_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read NOM_ARCHIVOnew
tput el
if [[ -z $NOM_ARCHIVOnew ]]
then
# aceptó el valor ofecidoloopEnd="1"
elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo $NOM_ARCHIVOnew" es un nombre de directorio"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
then
echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
else
NOM_ARCHIVO=$NOM_ARCHIVOnewloopEnd="1"
fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "ESTRUCTURA DEL ARCHIVO BASE"
echo $raya
echo "1) 1-11"
echo "2) 1-11-45"
echo "enter="$TIPO_ARCHIVO
echo " "
rotulo="ESTRUCTURA:"
echo "$rotulo"$TIPO_ARCHIVO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_ARCHIVOnewecho "$rotulo\c"read TIPO_ARCHIVOnew
if [[ -z $TIPO_ARCHIVOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ $TIPO_ARCHIVOnew = "1" ]] || [[ $TIPO_ARCHIVOnew = "2" ]]
then
TIPO_ARCHIVO=$TIPO_ARCHIVOnewloopEnd="1"
else
tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "TIPO DE EXTRACCIÓN"
echo $raya
echo "N) Por NIT"
echo "C) Por codigo de suscriptor"
echo "enter="$TIPO_EXTRACT
echo " "
rotulo="TIPO de EXTRACCIÓN:"
echo "$rotulo"$TIPO_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_EXTRACTnew
if [[ -z $TIPO_EXTRACTnew ]]
then
loopEnd="1"
else
[ $TIPO_EXTRACTnew = "c" ] && TIPO_EXTRACTnew="C"[ $TIPO_EXTRACTnew = "n" ] && TIPO_EXTRACTnew="N"if [[ $TIPO_EXTRACTnew = "N" ]] || [[ $TIPO_EXTRACTnew = "C" ]]then
TIPO_EXTRACT=$TIPO_EXTRACTnewloopEnd="1"else
tput belelse
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fi
    done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [[ $TIPO_EXTRACT = "N" ]]
    then
criterioExtraccion="NIT"
inputLen=9
    else
criterioExtraccion="COD SUSCRIPTOR"
inputLen=6
    fi
loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "$criterioExtraccion PARA LA EXTRACCIÓN"
echo $rayaecho "Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
echo "enter="$ID_EXTRACT
echo " "
tput el # borra caracteres sobrantes
rotulo="$criterioExtraccion:"
echo "$rotulo"$ID_EXTRACT
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read ID_EXTRACTnew
tput el # borra mensaje de error
if [[ -z $ID_EXTRACTnew ]] # acepta el valor actual
then
loopEnd="1"
elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números
then
echo "el dato ingresado debe ser numérico"tput bel
[[ $doCuu = "1" ]] &&  tput cuu 8
elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (9 o 6)
thenelif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (9 o 6)then
echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'tput bel
[ $doCuu = "1" ] &&  tput cuu 8
else # todo OK
ID_EXTRACT=$ID_EXTRACTnewloopEnd="1"
fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "TIPO DE PROCESO"
echo $raya
echo "A) Proceso actual"
echo "H) Proceso histórico"
echo "enter="$TIPO_PROC
echo " "
rotulo="TIPO de PROCESO:"
echo "$rotulo"$TIPO_PROC
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read TIPO_PROCnew
if [[ -z $TIPO_PROCnew ]]
then
# aceptó el valor por defectoloopEnd="1"
else
# traduce minúsculas[ $TIPO_PROCnew = "a" ] && TIPO_PROCnew="A"[ $TIPO_PROCnew = "h" ] && TIPO_PROCnew="H"if [[ $TIPO_PROCnew = "H" ]] || [[ $TIPO_PROCnew = "A" ]]then
TIPO_PROC=$TIPO_PROCnewloopEnd="1"else
tput bel
[ $doCuu = "1" ] &&  tput cuu 8fi
fifi
fi
    done
}

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
  echo " "
#......................................................................
echo "FECHA INICIAL DE PROCESO HISTÓRICO"
echo $raya
echo "Ingrese fecha inicial de proceso,"
echo "enter="$FECHA_INICIO
echo " "
rotulo="FECHA INICIO de PROCESO AAAAMMDD:"
echo "$rotulo"$FECHA_INICIO
tput cuu 1 # vuelve a la línea anterior
echo "$rotulo\c"
read FECHA_INICIOnew
if [[ -z $FECHA_INICIOnew ]]
then
# aceptó el valor actualloopEnd="1"
elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números
then
echo "la fecha solamente puede contener dígitos"tput bel
[[ $doCuu = "1" ]] && tput cuu 8
elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
# rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
# [[ "20141229" = +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
then
echo "la fecha es inválida, anterior a 2000 o posterior a 2029"tput bel
[ $doCuu = "1" ] &&  tput cuu 8
else
# debe ser anterior al mes actualFECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]then
echo "la fecha desde debe ser anterior a la actual"tput bel
[ $doCuu = "1" ] &&  tput cuu 8tput bel
[ $doCuu = "1" ] &&  tput cuu 8else
# todo bien
FECHA_INICIO=$FECHA_INICIOnewFECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMMloopEnd="1"fi
fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
allParms=$BASE";"${NOM_ARCHIVO:-" "}";"${TIPO_ARCHIVO:-" "}";"
allParms=$allParms${TIPO_EXTRACT:-" "}";"${ID_EXTRACT:-" "}";"
allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-" "}
echo $allParms
echo "file:" $0.parm " in:" $(pwd)
echo $allParms >| $0.parm# para pruebas
echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [[ $BASE = "E" ]]
    then
echo "${s}provista por el cliente"
print -n "${i}Estructura: "$TIPO_ARCHIVO
[[ $TIPO_ARCHIVO = "1" ]] && echo "${s}1-11"
[[ $TIPO_ARCHIVO = "2" ]] && echo "${s}1-11-45"
    else
echo "${s}extraída de datos internos"
print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
[[ $TIPO_EXTRACT = "N" ]] && echo "${s}por NIT "$ID_EXTRACT
[[ $TIPO_EXTRACT = "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC = "H" ]]
    then
echo "${s}histórico, desde: "$FECHA_INICIO
    else
echo "${s}actual"
    fiecho "${s}actual"fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA = $P_SERVER_DEV ]]
    then
echo "Máquina de desarrollo:" $P_MAQUINA
ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
# echo "Máquina de producción:" $P_MAQUINA
ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
# extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
    if [[ TIPO_EXTRAC = "N" ]]
    then # extracción por NIT
grepRegex="^.........*"$ID_EXTRACT"..$"
# grepRegex="^A......[14].*"$ID_EXTRACT".P$"
    else # extracción por cod suscriptor
grepRegex="^."$ID_EXTRACT"..*..$"
# grepRegex="^A"$ID_EXTRACT"[14].*.P$"
    fi
# $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
    registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]    registroExtra=0if [[ $TIPO_ARCHIVO = "1" ]]
    then
PESVNO_INPUT=${archivo}"VALI.prn"
cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
rm $archivo_prn
mv  $PESVNO_INPUT $archivo_prn
registroExtra=1
    fi

echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $
cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
echo " "
echo $raya
echo "Las cantidades de registros no cuadran: proceso cancelado"
echo $raya
cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
  readBASE# I interna, C cliente
if [[ $BASE = "E" ]]
then
readNOM_ARCHIVO# nombre del archivo basereadTIPO_ARCHIVO# 0 1-11, 1 1-11-45
else
readTIPO_EXTRACT# N NIT, C cod subsreadID_EXTRACT# NIT o cos subs
fi
readTIPO_PROC# A actual, H histórico
if [[ $TIPO_PROC = "H" ]]readTIPO_PROC# A actual, H históricoif [[ $TIPO_PROC = "H" ]]
then
readFECHA_INICIO# fecha desde
else
FECHA_INICIO=$FECHA_PROC
fi

paramsPrint # $$$$ DEBUG
sleep 2
# guarda en archivo .parm
paramsPut
clear
echo $raya
# banner "PE Ripley"
echo "$ASCIIBanner"
echo $raya
paramsDisplay
echo $raya
# pregunta al ope si está satisfecho
continuar="_"
while [[ $continuar = "_" ]]
do
  echo " "
echo " "
echo " "
echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"read continuarif [[ -z $continuar ]]then
parmsOK="1"
continuar="listo"else
if [[ $continuar = "1" ]]then
:
fi
fi
done
    done
}




#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
# el nombre del archivo de la base externa
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name, o la hora
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    else
cp $archivo $archivo_prn
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
# el nombre del archivo de la base externa
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name, o la hora
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg#    EXTFH=/san_ata_3/200601/extfh.cfg#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    else
cp $archivo $archivo_prn
    fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
    echo " "
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2sh-PE-Ripleyfg %2       sh-PE-Ripleyfg %2       jobs vi prip*ls prip*cp $TEMPORALES/pripley1.prn ./d/iccol/desarrollo/macros>ls prip*                     /d/iccol/desarrollo/macros>cp $TEMPORALES/pripley1.prn ./d/iccol/desarrollo/macros>ls prip*                     /d/iccol/desarrollo/macros>
pripley1.prn
/d/iccol/desarrollo/macros>kkk^[  /d/iccol/desarrollo/macros>kkkls prip*fg %2   sh-PE-Ripleyfg %2       sh-PE-Ripleyfg %2       jobs vi prip*ls prip*cp $TEMPORALES/pripley1.prn ./d/iccol/desarrollo/macros> $TEMPORALES/pripley1.prn .  /d/iccol/desarrollo/macros>l $TEMPORALES/pripley1.prn .s $TEMPORALES/pripley1.prn .  $TEMPORALES/pripley1.prn .- $TEMPORALES/pripley1.prn .l $TEMPORALES/pripley1.prn .l $TEMPORALES/pripley1.prn        *
-rw-rw-r--   1 icjlud   icdatacr 2280522 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.DATINF
-rw-rw-r--   1 icjlud   icdatacr    2065 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.ESTADI
-rw-rw-r--   1 icjlud   icdatacr  412695 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.PREDHD
-rw-rw-r--   1 icdgd    icdatacr 1746220 Jun  3 13:17 /d/iccol/desarrollo/temporales/pripley1.prn
-rw-rw-r--   1 icjlud   icdatacr 18737642 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.prn.inc
-rw-rw-r--   1 icjlud   icdatacr 3255638 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.prn.log
-rw-rw-r--   1 icjlud   icdatacr 1746244 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.prn.prn
-rw-rw-r--   1 icjlud   icdatacr  202828 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.prn.val
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  3 13:59 /d/iccol/desarrollo/temporales/pripley1.vre
/d/iccol/desarrollo/macros>man basename
Reformatting page.  Please Wait... done

User Commands                                         basename(1)

NAME
     basename, dirname - deliver portions of path names

SYNOPSIS
     /usr/bin/basename string [suffix]

     /usr/xpg4/bin/basename string [suffix]

     dirname string

DESCRIPTION
     The basename utility deletes any prefix ending in / and  the
     suffix  (if  present  in string) from string, and prints the
     result on the standard output. It is  normally  used  inside
     substitution marks (``) within shell procedures.

  /usr/bin
     The suffix is a pattern defined on the expr(1) manual page.

  /usr/xpg4/bin
     The suffix is a string with no special significance attached
     to  any of the characters it contains.

     The dirname utility delivers all but the last level  of  the
     path name in string.

EXAMPLES
     Example 1: Setting environment variables

     The   following   example,   invoked   with   the   argument
     /home/sms/personal/mail  sets  the environment variable NAME
     to the file named mail and the environment variable  MYMAIL-
     PATH to the string  /home/sms/personal:

     example% NAME=`basename $HOME/personal/mail`
     example% MYMAILPATH=`dirname $HOME/personal/mail`

     Example 2: Compiling a file and moving the output

     This   shell   procedure,   invoked   with   the    argument
     /usr/src/bin/cat.c,  compiles  the  named file and moves the
     output to cat in the current directory:

     example% cc $1
     example% mv a.out `basename $1 .c`
--More--(50%)/d/iccol/desarrollo/macros>echo $(basename pripley1.prn)
pripley1.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $(basename pripley1.prn)/d/iccol/desarrollo/macros>echo $(file
ksh: filename:  not found

/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $(filename pripley1.prn)/d/iccol/desarrollo/macros>echo $(basename pripley1.prn)/d/iccol/desarrollo/macros>man basename                 /d/iccol/desarrollo/macros>
Reformatting page.  Please Wait... done

User Commands                                         basename(1)

NAME
     basename, dirname - deliver portions of path names

SYNOPSIS
     /usr/bin/basename string [suffix]

     /usr/xpg4/bin/basename string [suffix]

     dirname string

DESCRIPTION
     The basename utility deletes any prefix ending in / and  the
     suffix  (if  present  in string) from string, and prints the
     result on the standard output. It is  normally  used  inside
     substitution marks (``) within shell procedures.

  /usr/bin
     The suffix is a pattern defined on the expr(1) manual page.

  /usr/xpg4/bin
     The suffix is a string with no special significance attached
     to  any of the characters it contains.

     The dirname utility delivers all but the last level  of  the
     path name in string.

EXAMPLES
     Example 1: Setting environment variables

     The   following   example,   invoked   with   the   argument
     /home/sms/personal/mail  sets  the environment variable NAME
     to the file named mail and the environment variable  MYMAIL-
     PATH to the string  /home/sms/personal:

     example% NAME=`basename $HOME/personal/mail`
     example% MYMAILPATH=`dirname $HOME/personal/mail`

     Example 2: Compiling a file and moving the output

     This   shell   procedure,   invoked   with   the    argument
     /usr/src/bin/cat.c,  compiles  the  named file and moves the
     output to cat in the current directory:

     example% cc $1
     example% mv a.out `basename $1 .c`
--More--(50%)/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>man basenameecho $(filename pripley1.prn)/d/iccol/desarrollo/macros>echo $(filename pripley1.prn  .prn)
ksh: filename:  not found

/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $(filename pripley1.prn .prn)/d/iccol/desarrollo/macros>echo $(base
pripley1
/d/iccol/desarrollo/macros>man ksh
Reformatting page.  Please Wait... done

User Commands                                              ksh(1)

NAME
     ksh, rksh - KornShell,  a  standard/restricted  command  and
     programming language

SYNOPSIS
     /usr/bin/ksh [+ abCefhikmnoprstuvx] [+ o option]...
         [arg]...

     /usr/bin/ksh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

     /usr/xpg4/bin/sh [+ abCefhikmnoprstuvx]
         [+ o option]... [arg]...

     /usr/xpg4/bin/sh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

     /usr/bin/rksh [+ abCefhikmnoprstuvx] [+ o option]...
         [arg]...

     /usr/bin/rksh -c [+ abCefhikmnoprstuvx]
         [+ o option]... command_string
         [command_name [arg...]]

DESCRIPTION
     The /usr/xpg4/bin/sh utility is a standards compliant shell.
     This utility provides all the functionality of /usr/bin/ksh,
     except in cases where differences  in  behavior  exist.  See
     Arithmetic Expansions section for details.

     /usr/bin/ksh is a command and programming language that exe-
     cutes  commands  read  from  a terminal or a file. rksh is a
     restricted version of the command  interpreter  ksh;  it  is
     used  to set up login names and execution environments whose
     capabilities are more controlled than those of the  standard
     shell.  See  the Invocation section for the meaning of argu-
     ments to the shell.

  Definitions
     A metacharacter is one of the following characters:

SunOS 5.10          Last change: 29 Jun 2005                    1

--More--(1%)/pattern matching
...skipping
                                 |
     The following four varieties|of parameter expansion  provide
     for  substring  processing. |In  each case, pattern matching
     notation (see patmat), rathe|r than regular expression  nota-
     tion, is used to evaluate th|e patterns. If parameter is * or
     @, then all the positional p|arameters, starting with $1, are
     substituted  (separated  by |a  field  separator character).
     Enclosing the full parameter| expansion  string  in  double-
     quotes  does  not cause the |following four varieties of pat-
     tern characters to be  quote|d,  whereas  quoting  characters
     within the braces has this e|ffect.
                                 |
     ${parameter%word}     Remove|Smallest  Suffix  Pattern.  The
                           word i|s expanded to produce a pattern.
                           The pa|rameter expansion  then  results
                           in  pa|rameter,  with the smallest por-
                           tion o|f the suffix matched by the pat-
                           tern d|eleted.
                                 |
                                 |
     ${parameter%%word}    Remove  Largest  Suffix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in parameter, with the largest portion
                           of the suffix matched by  the  pattern
                           deleted.

     ${parameter#word}     Remove Smallest  Prefix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in  parameter,  with the smallest por-
                           tion of the prefix matched by the pat-
                           tern deleted.

SunOS 5.10          Last change: 29 Jun 2005                   18

User Commands                                              ksh(1)

     ${parameter##word}    Remove  Largest  Prefix  Pattern.  The
                           word is expanded to produce a pattern.
                           The parameter expansion  then  results
                           in parameter, with the largest portion
                           of the prefix matched by  the  pattern
                           deleted.

     Examples:

--More--(24%)/d/iccol/desarrollo/macros>a="qqq.prn"
/d/iccol/desarrollo/macros>echo $( ${a $a%.%} )
ksh: ${$a%.%}: bad substitution

/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $( ${$a%.%} )echo $( ${$a%.*
ksh: ${$a%.*}: bad substitution

/d/iccol/desarrollo/macros>k^[  /d/iccol/desarrollo/macros>kecho $( ${$a%.*} )echo ( ${$a%.*} )  ${$a%.*} )  ${$a%.*}  
ksh: ${$a%.*}: bad substitution
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo  ${$a%.*}echo          $( ${$a%.*} )echo  ${$a%.*}                  echo  ${$a%.*}echo $( ${$a%.*} )echo $( '${$a%.*} )'${$a%.*}' )
ksh: ${$a%.*}:  not found

/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $( '${$a%.*}' )echo  ${$a%.*}      echo          $( ${$a%.*} )echo  ${$a%.*}    echo $( '${$a%.*}' )echo  ${$a%.*}      echo  '${$a%.*}'${$a%.*$( '${$a%.*}' )
ksh: ${$a%.*}:  not found

/d/iccol/desarrollo/macros>echo '${a}'
${a}
/d/iccol/desarrollo/macros>echo ${a}
qqq.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo ${a}echo ${a%}\}.}\}*}
qqq.prn
/d/iccol/desarrollo/macros>echo $( sed        $a | sed "s/\\..   ..*//"
qqq
/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %2
vi sh-PE-Ripley
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
    sleep 1
    # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
    echo " "
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
if [[ -z "$sanata" ]]
then
echo " "
echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"read sanata
echo " "
export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"echo $EXTFH
export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"echo $DATABASE
fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
echo $raya
echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
# echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
ejecutar_extraccion
echo "Finalizada la extracción"
# cancela si no extrajo nada
if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
then
echo "Extracción produjo cero registros - cancelando"exit
fi
    else
cp $archivo $archivo_prn
    fi

#*******************************************************************************
# PESVNO: validación de IDs#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
# el nombre del archivo de la base externa
archivo=$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name, o la hora
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
    



    # ee deoAPPEND MODE, sin extensión, 

archivo=$NOM_ARCHIVOarchivo=INSERT MODE
$NOM_ARCHIVOINSERT MODE  =APPEND MODE*[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2jobs echo $a | sed "s/\..*//"ejobs                    fg %2     fg %2
vi sh-PE-Ripley
#*******************************************************************************
#*******************************************************************************
#MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)clear
echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
    leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
# el nombre del archivo, sin extensión,  de la base externa
archivo=$NOM_ARCHIVO
archivo=*
$NOM_ARCHIVO
    else
# un nombre armado con "PERipley" y la fecha del día
# $$$$ no será posible ejecutar dos procesos en el mismo día
# $$$$ se puede agregar un $$ al file name, o la hora
# $$$$ se puede controlar si ya existe un archivo de hoy ...
archivo="PERipley"$FECHA_PROC
NOM_ARCHIVO=$archivo
    fi
# arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO=APPEND MODEecho $a | sed "s/\..*//""APPEND MODE )=APPEND MODE$( $NOM_ARCHIVO
NOM_ARCHIVOO
#    Ejemplos de variables exportadas::w"sh-PE-Ripley" 752 lines, 26744 characters [2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>fg %2fg %2jobs echo $a | sed "s/\..*//"echo ${a%\.\*}          echo ${a}     echo '${a}'echo $( '${$a%.*}' )echo $( '${$a%.*}' )                    /^shsh-PE-Ripley
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
>>>> params:  E;pripley1.prn;1;C;123456;A;20140603
 
                       ORIGEN DE LA BASE
----------------------------------------------------------------------
      I) Interna
      E) Externa, provista por el Cliente
      enter=E
 
            BASE:E
            BASE:
 
                       NOMBRE DEL ARCHIVO BASE
----------------------------------------------------------------------
      Ingrese el nombre del archivo base,
      enter=pripley1.prn
 
            ARCHIVO:pripley1.prn
            ARCHIVO:
 
                    ESTRUCTURA DEL ARCHIVO BASE
----------------------------------------------------------------------
      1) 1-11
      2) 1-11-45
      enter=1
 
            ESTRUCTURA:1
            ESTRUCTURA:
 
                          TIPO DE PROCESO
----------------------------------------------------------------------
      A) Proceso actual
      H) Proceso histórico
      enter=A
 
            TIPO de PROCESO:A
            TIPO de PROCESO:
BASE=E<
NOM_ARCHIVO=pripley1.prn<
TIPO_ARCHIVO=1<
TIPO_EXTRACT=C<
ID_EXTRACT=123456<
TIPO_PROC=A<
FECHA_INICIO=20140603<
E;pripley1.prn;1;C;123456;A;20140603
file: sh-PE-Ripley.parm  in: /d/iccol/desarrollo/macros
----------------------------------------------------------------------

        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #

----------------------------------------------------------------------
PARÁMETROS del PROCESO
    Fecha=20140603
    Archivo: pripley1.prn
    Base: E  provista por el cliente
    Estructura: 1  1-11
    Tipo de proceso: A  actual
----------------------------------------------------------------------
 
 
 
Ingrese 1 para cambiar los parámetros, enter para continuar:
cp: cannot access pripley1
----------------------------------------------------------------------
PESVNO: validación de IDs
Input PESVNO: pripley1.prn
PESVNO pripley1.prn pripley1.val pripley1.inc 10 2

real    0m8.29s
user    0m4.01s
sys     0m1.67s
PESVNO - registros válidos: 3057  inconsistentes: 121673  total: 124731
!!........EL ORDEN DE LOS PARAMETROS ES ........!!
!!..ENTRADA CORRECTOS INCORRECTOS TARIFA BLOQUES.!!
REGISTROS RECIBIDOS ORIGINALMENTE:
124731
ARCHIVO: pripley1.prn                  
Registro  control==> 000001 (VALIDAR=NO)
Registros Tipo 5           ==> 003057
Registros Tipo 6           ==> 000000
Registros Tipo 7           ==> 121673
Registros Tipo 5 repetidos ==> 000000
----------------------------------------------------------------------
SCOTBATCH: cálculo de scores
 
SCOTBATCH 201406 067 VAL pripley1.val
         Archivo: pripley1.val                                                                    
  W-ARCHIVO-MANT:                     
        Reinicio: SI
                                             
FECHA SISTEMA : 20140603
FECHA RECOGIDA BD(YYYYMM) : 201406
Tipo score: ACIERTA+   
                                             
Score formato validado   
                                             
YA HABIA TERMINADO OK EL PROGRAMA
NO HAY DONDE REINICIAR,SE COMIENZA 
DESDE EL PRINCIPIO (CEROS)         
===== CONTADORES FINALES    ====
Clientes con ACIERTA+  mayor a ceros: 0000026
================================
SE LEYERON EN TOTAL: 0003057

real    0m9.75s
user    0m8.51s
sys     0m0.78s

Inicio de Programa:  2014/06/03 14:34:04
Fin de Programa:     2014/06/03 14:34:14

----------------------------------------------------------------------
ICEPRERIP01: datos para Ripley
 
                
+---------------------------------------------------+
|      *** RESULTADOS DEL INFORME       ***         |
+----------------------------------+----------------+
|     DETALLE CALIFICACION         | CALF |  # REG. |
+----------------------------------+------+---------+
| - Registros con informacion      | O.K  |       54
| - Registros sin informacion      | SIN  |    3,003
| - Registros inconsistencias      | INC  |  121,673
+----------------------------------+------+---------+
| - Total Registro procesados             |    3,057
+----------------------------------+------+---------+

real    0m3.72s
user    0m2.10s
sys     0m1.59s

Inicio de Programa:  2014/06/03 14:34:15
Fin de Programa:     2014/06/03 14:34:18

----------------------------------------------------------------------
ARCHIVOS:
 
-rw-rw-r--   1 icjlud   icdatacr 2280522 Jun  3 14:34 pripley1.DATINF
-rw-rw-r--   1 icjlud   icdatacr    2065 Jun  3 14:34 pripley1.ESTADI
-rw-rw-r--   1 icjlud   icdatacr 18737642 Jun  3 14:34 pripley1.inc
-rw-rw-r--   1 icjlud   icdatacr 3255671 Jun  3 14:34 pripley1.log
-rw-rw-r--   1 icjlud   icdatacr  412695 Jun  3 14:34 pripley1.PREDHD
-rw-rw-r--   1 icjlud   icdatacr 1746244 Jun  3 14:33 pripley1.prn
-rw-rw-r--   1 icjlud   icdatacr 18737642 Jun  3 13:59 pripley1.prn.inc
-rw-rw-r--   1 icjlud   icdatacr 3255638 Jun  3 13:59 pripley1.prn.log
-rw-rw-r--   1 icjlud   icdatacr 1746244 Jun  3 13:59 pripley1.prn.prn
-rw-rw-r--   1 icjlud   icdatacr  202828 Jun  3 13:59 pripley1.prn.val
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  3 14:34 pripley1.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr  202828 Jun  3 14:34 pripley1.val
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  3 14:33 pripley1.vre
 
 
----------------------------------------------------------------------
fin del proceso sh-PE-Ripley
Iniciado: 14:33:36 finalizado: 14:34:18
----------------------------------------------------------------------
/d/iccol/desarrollo/macros>rm  pripley1.prn.*
pripley1.prn.*: No such file or directory
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>rm  pripley1.prn.*rm  $pripley1.prn.*Tpripley1.prn.*Epripley1.prn.*Mpripley1.prn.*Ppripley1.prn.*Opripley1.prn.*Rpripley1.prn.*Apripley1.prn.*Lpripley1.prn.*Epripley1.prn.*Spripley1.prn.*/pripley1.prn.*
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>rm  $TEMPORALES/pripley1.prn.*/d/iccol/desarrollo/macros>rm  pripley1.prn.*            /d/iccol/desarrollo/macros>rm  $TEMPORALES/pripley1.prn.*/d/iccol/desarrollo/macros>rm  pripley1.prn.*            /d/iccol/desarrollo/macros>sh-PE-Ripley      fg %2            la -l &TEMPORALES/pripl*$
ksh: la:  not found
/d/iccol/desarrollo/macros>ls -l $TEMPORALES/priple*
-rw-rw-r--   1 icjlud   icdatacr 2280522 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.DATINF
-rw-rw-r--   1 icjlud   icdatacr    2065 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.ESTADI
-rw-rw-r--   1 icjlud   icdatacr 18737642 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.inc
-rw-rw-r--   1 icjlud   icdatacr 3255671 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.log
-rw-rw-r--   1 icjlud   icdatacr  412695 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.PREDHD
-rw-rw-r--   1 icjlud   icdatacr 1746244 Jun  3 14:33 /d/iccol/desarrollo/temporales/pripley1.prn
-rw-rw-r--   1 icjlud   icdatacr     125 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.ULTIMO
-rw-rw-r--   1 icjlud   icdatacr  202828 Jun  3 14:34 /d/iccol/desarrollo/temporales/pripley1.val
-rw-rw-r--   1 icjlud   icdatacr       0 Jun  3 14:33 /d/iccol/desarrollo/temporales/pripley1.vre
/d/iccol/desarrollo/macros>b="   exho     cho $a
qqq.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo $aecho $ {a}
qqq.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo ${a}echo ${a%}.}p}r}n}
qqq
/d/iccol/desarrollo/macros>^[k  /d/iccol/desarrollo/macros>echo ${a%.prn}echo ${a%.}   *}
qqq
/d/iccol/desarrollo/macros>a=qqq.prn.zzz
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>a=qqq.prn.zzzecho ${a%.*} echo ${a%.prn}echo ${a}     
qqq.prn.zzz
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo ${a}a=qqq.prn.zzzecho ${a%.*} 
qqq.prn
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>echo ${a%.*}echo ${a%%.*}
qqq
/d/iccol/desarrollo/macros>view /d/iccol/desarrollo/temporales/pripley1.DATINF
"/d/iccol/desarrollo/temporales/pripley1.DATINF" [Read only] 3057 lines, 2280522 characters 1;00009726041;VASQUEZ BUENO CARLOS ANDRES;     ; ;  QUINDIO;19980;0000;0003;0000;0000
00000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0001;000000000300000;000000000240000; .80000;00000049000;00000000000;000;001;000;000;000;000
;000;201308;0001;000000000313000;000000000313000;00000104000;00000000000;0001;00000254000;00000000000;0000;00
0000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;003;000;00
0;000;000;000;000;000;000;000;000;000;000;003;000;000;000;000;A; ;000;000;000;000;000;007;1
1;00013507276;MARTINEZ MURCIA DANY LEONARDO;     ; ;  N.DE S/DER   ;19890;0000;0009;0001;0000
00009500000;000000003891000;00000252000;00000000000;0001;000000063245000;000000052131000;00000895000;00000000
000;0001;000000007500000;000000000626000;00000215000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0006;000000040400000;000000003010000; .07450;00000557000;00000000000;000;002;000;000;000;004
;000;200304;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;00
0000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;009;000;00
0;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;A;A;000;001;000;000;000;000;1
1;00017650436;ACEVEDO ARIAS LUIS ENRIQUE;     ; ;  CAQUETA;19910;0000;0004;0000;0000
00000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000
;000;;0002;000000003238000;000000002249000;00000298000;00000000000;0001;00000000000;00000000000;0001;00
0000001322000;000000000970000;00000168000;00000000000;0000;000000000000000;00000000000;00000000000;004;000;00
0;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;A;A;000;000;000;000;000;010;1
1;00021103679;SAMUDIO CARDENAS MARIA CLAUDIA;     ; ;  CUNDINAMAR   ;19920;0000;0008;0002;0000
00013200000;000000003460000;00000257000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0001;000000032571000;000000031318000;00001191000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0003;000000011180000;000000005084000; .45470;00001255000;00000000000;000;000;001;000;002;000
;000;200611;0000;000000000000000;000000000000000;00000000000;00000000000;0001;00000000000;00000000000;0000;00
0000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;008;000;00
0;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;A;A;001;000;000;000;001;004;1
1;00028152625;ROA RODRIGUEZ CRISTINA ISABEL;     ; ;  SANTANDER    ;19980;0000;0003;0001;0000
00011330000;000000010220000;00000498000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0002;000000004720000;000000002106000; .44610;00000547000;00000299000;000;000;001;001;000;000
;000;200806;0000;000000000000000;000000000000000;00000000000;00000000000;0000;00000000000;00000000000;0000;00
0000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;00000000000;00000000000;002;001;00
0;000;000;000;000;000;004;001;000;000;000;000;002;000;000;000;C;B;001;000;000;000;000;000;1
1;00035492816;GALINDO GARZON LUZ MARINA;     ; ;  CUNDINAMAR   ;19791;0000;0007;0002;0000
00038000000;000000026915000;00000530000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0003;000000021400000;000000016929000; .79100;00000259000;00000000000;000;000;000;000;001;002
;000;198510;0000;000000000000000;000000000000000;00000000000;00000000000;0001;00000000000;00000000000;0000;00
0000000000000;000000000000000;00000000000;00000000000;0001;000000010265000;00000346000;00000000000;007;000;00
0;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;A;A;000;000;000;000;000;000;1
1;00036934800;CERON LOPEZ LUCY MARILU;     ; ;  NARI/O;19970;0000;0005;0000;0000
00000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;00000000000;00000000
000;0000;000000000000000;000000000000000;00000000000;00000000000;0000;000000000000000;000000000000000;0000000
0000;00000000000;0000;000000000000000;000000000000000;;00000000000;00000000000;000;000;000;000;000;000
;000;;0001;000000003300000;000000003296000;00000975000;00000000000;0003;00000055000;00000000000;0001;00
0000003082000;000000002790000;00000199000;00000000000;0000;000000000000000;00000000000;00000000000;005;000;00
0;000;000;000;000;000;000;000;000;000;000;000;000;000;000;000;A;A;001;000;000;000;000;001;1"/d/iccol/desarrollo/temporales/pripley1.DATINF" [Read only] 3057 lines, 2280522 characters:q/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>jobs
[2] + Stopped (SIGTSTP)        vi sh-PE-Ripley
[1] - Stopped (SIGTSTP)        vi sh-PE-Ripley2
/d/iccol/desarrollo/macros>fg %1
vi sh-PE-Ripley2
    # parámetros para el programa:formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
    echo " "
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
    sleep 1
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo.log 2>>$archivo.log
    tail -20 $archivo.log

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
    # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls -l *$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio  "finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:"sh-PE-Ripley2" [Modified] line 686 of 752 --91%--     echo $rayaecho "PESVNO: validación de IDs"
    sleep 1
    echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado = "1" ]] && exit# control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
echo "No hay un archivo de registros validados - PROCESO CANCELADO"
exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
    echo " "
    sleep 1
    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
    # parámetros para el programa:
    formato="VAL"
    scoring="067"    # ACIERTA+echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
    tail -25 $archivo.log

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
    echo " "
# Los parámetros son:
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
    sleep 1
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo.log 2>>$archivo.log
    tail -20 $archivo.log

#*******************************************************************************echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log    # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log    echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log    "sh-PE-Ripley2" 752 lines, 26730 characters /d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>cat sh-PE-Ripley2
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
# MODIFICCADO línea 601 genera un nombre de archivo ZZZ<fecha> para no colisionar
#                                               con las pruebas
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
        debug=1                                                 # cero para producción, 1 para test
    doCuu="1"                       # reposicionar el cursor luego de un error
    NOHUP=""                   # contiene "nohup" en producción, null para test
    cancelado="0"                   # las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"            # hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#       si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="2"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha inicio de proceso histórico
        FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                       ORIGEN DE LA BASE"
        echo $raya
        echo "      I) Interna"
        echo "      E) Externa, provista por el Cliente"
        echo "      enter="$BASE
        echo " "
        rotulo="            BASE:"
        echo "$rotulo"$BASE
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read BASEnew
        if [[ -z $BASEnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        else
                        # convierte a mayúsculas
                        [ $BASEnew = "e" ] && BASEnew="E"
                        [ $BASEnew = "i" ] && BASEnew="I"
                        if [[ $BASEnew = "E" ]] || [[ $BASEnew = "I" ]]
                        then
                                BASE=$BASEnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                       NOMBRE DEL ARCHIVO BASE"
        echo $raya
        echo "      Ingrese el nombre del archivo base,"
        echo "      enter="$NOM_ARCHIVO
        echo " "
                tput el
        rotulo="            ARCHIVO:"
        echo "$rotulo"$NOM_ARCHIVO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read NOM_ARCHIVOnew
        tput el
        if [[ -z $NOM_ARCHIVOnew ]]
        then
                        # aceptó el valor ofecido
            loopEnd="1"
        elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
        then
            echo $NOM_ARCHIVOnew" es un nombre de directorio"
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
        elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
                then
                        echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"
                        tput bel
                        [[ $doCuu = "1" ]] &&  tput cuu 8
                else
                        NOM_ARCHIVO=$NOM_ARCHIVOnew
                        loopEnd="1"
                fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
        echo $raya
        echo "      1) 1-11"
        echo "      2) 1-11-45"
        echo "      enter="$TIPO_ARCHIVO
        echo " "
        rotulo="            ESTRUCTURA:"
        echo "$rotulo"$TIPO_ARCHIVO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_ARCHIVOnew
        if [[ -z $TIPO_ARCHIVOnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        elif [[ $TIPO_ARCHIVOnew = "1" ]] || [[ $TIPO_ARCHIVOnew = "2" ]]
        then
            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
            loopEnd="1"
        else
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
        fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                         TIPO DE EXTRACCIÓN"
        echo $raya
        echo "      N) Por NIT"
        echo "      C) Por codigo de suscriptor"
        echo "      enter="$TIPO_EXTRACT
        echo " "
        rotulo="            TIPO de EXTRACCIÓN:"
        echo "$rotulo"$TIPO_EXTRACT
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_EXTRACTnew
        if [[ -z $TIPO_EXTRACTnew ]]
        then
            loopEnd="1"
        else
                        [ $TIPO_EXTRACTnew = "c" ] && TIPO_EXTRACTnew="C"
                        [ $TIPO_EXTRACTnew = "n" ] && TIPO_EXTRACTnew="N"
                        if [[ $TIPO_EXTRACTnew = "N" ]] || [[ $TIPO_EXTRACTnew = "C" ]]
                        then
                                TIPO_EXTRACT=$TIPO_EXTRACTnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [[ $TIPO_EXTRACT = "N" ]]
    then
        criterioExtraccion="        NIT"
        inputLen=9
    else
        criterioExtraccion="COD SUSCRIPTOR"
        inputLen=6
    fi
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                $criterioExtraccion PARA LA EXTRACCIÓN"
        echo $raya

        echo "      Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
        echo "      enter="$ID_EXTRACT
        echo " "
        tput el # borra caracteres sobrantes
        rotulo="            $criterioExtraccion:"
        echo "$rotulo"$ID_EXTRACT
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read ID_EXTRACTnew
        tput el # borra mensaje de error
        if [[ -z $ID_EXTRACTnew ]] # acepta el valor actual
        then
            loopEnd="1"
        elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números
        then
            echo "el dato ingresado debe ser numérico"
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
                elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (9 o 6)
                then
                        echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'
                        tput bel
                        [ $doCuu = "1" ] &&  tput cuu 8
                else # todo OK
                        ID_EXTRACT=$ID_EXTRACTnew
                        loopEnd="1"
                fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                          TIPO DE PROCESO"
        echo $raya
        echo "      A) Proceso actual"
        echo "      H) Proceso histórico"
        echo "      enter="$TIPO_PROC
        echo " "
        rotulo="            TIPO de PROCESO:"
        echo "$rotulo"$TIPO_PROC
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_PROCnew
        if [[ -z $TIPO_PROCnew ]]
        then
                        # aceptó el valor por defecto
            loopEnd="1"
        else
                        # traduce minúsculas
                        [ $TIPO_PROCnew = "a" ] && TIPO_PROCnew="A"
                        [ $TIPO_PROCnew = "h" ] && TIPO_PROCnew="H"
                        if [[ $TIPO_PROCnew = "H" ]] || [[ $TIPO_PROCnew = "A" ]]
                        then
                                TIPO_PROC=$TIPO_PROCnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
        }

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                  FECHA INICIAL DE PROCESO HISTÓRICO"
        echo $raya
        echo "      Ingrese fecha inicial de proceso,"
        echo "      enter="$FECHA_INICIO
        echo " "
        rotulo="            FECHA INICIO de PROCESO AAAAMMDD:"
        echo "$rotulo"$FECHA_INICIO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read FECHA_INICIOnew
        if [[ -z $FECHA_INICIOnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números
        then
            echo "la fecha solamente puede contener dígitos"
            tput bel
            [[ $doCuu = "1" ]] && tput cuu 8
                elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
                # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
                # [[ "20141229" = +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
                then
                        echo "la fecha es inválida, anterior a 2000 o posterior a 2029"
                        tput bel
                        [ $doCuu = "1" ] &&  tput cuu 8
                else
                        # debe ser anterior al mes actual
                        FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)
                        FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)
                        if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]
                        then
                                echo "la fecha desde debe ser anterior a la actual"
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        else
                                # todo bien
                                FECHA_INICIO=$FECHA_INICIOnew
                                FECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMM
                                loopEnd="1"
                        fi
        fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
        allParms=$BASE";"${NOM_ARCHIVO:-" "}";"${TIPO_ARCHIVO:-" "}";"
        allParms=$allParms${TIPO_EXTRACT:-" "}";"${ID_EXTRACT:-" "}";"
        allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-" "}
        echo $allParms
        echo "file:" $0.parm " in:" $(pwd)
        echo $allParms >| $0.parm                       # para pruebas
        echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529                                  FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [[ $BASE = "E" ]]
    then
        echo "${s}provista por el cliente"
        print -n "${i}Estructura: "$TIPO_ARCHIVO
        [[ $TIPO_ARCHIVO = "1" ]] && echo "${s}1-11"
        [[ $TIPO_ARCHIVO = "2" ]] && echo "${s}1-11-45"
    else
        echo "${s}extraída de datos internos"
        print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
        [[ $TIPO_EXTRACT = "N" ]] && echo "${s}por NIT "$ID_EXTRACT
        [[ $TIPO_EXTRACT = "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
    print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC = "H" ]]
    then
        echo "${s}histórico, desde: "$FECHA_INICIO
    else
        echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA = $P_SERVER_DEV ]]
    then
        echo "Máquina de desarrollo:" $P_MAQUINA
        ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
        # echo "Máquina de producción:" $P_MAQUINA
        ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
    # extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
        if [[ TIPO_EXTRAC = "N" ]] 
        then # extracción por NIT
                grepRegex="^.........*"$ID_EXTRACT"..$"
      # grepRegex="^A......[14].*"$ID_EXTRACT".P$"
        else # extracción por cod suscriptor
                grepRegex="^."$ID_EXTRACT"..*..$"
      # grepRegex="^A"$ID_EXTRACT"[14].*.P$"
        fi
        # $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
        registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
        PESVNO_INPUT=${archivo}"VALI.prn"
        cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
                rm $archivo_prn
                mv  $PESVNO_INPUT $archivo_prn
                registroExtra=1
    fi

    echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
        registroExtra=999
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
        echo " "
        echo $raya
        echo "Las cantidades de registros no cuadran: proceso cancelado"
        echo $raya
        cancelado="1"
                return 1
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
        readBASE                     # I interna, C cliente
        if [[ $BASE = "E" ]]
        then
            readNOM_ARCHIVO          # nombre del archivo base
            readTIPO_ARCHIVO         # 0 1-11, 1 1-11-45
        else
            readTIPO_EXTRACT         # N NIT, C cod subs
            readID_EXTRACT           # NIT o cos subs
        fi
        readTIPO_PROC                # A actual, H histórico
        if [[ $TIPO_PROC = "H" ]]
        then
            readFECHA_INICIO           # fecha desde
        else
            FECHA_INICIO=$FECHA_PROC
        fi

        paramsPrint # $$$$ DEBUG
        sleep 2
        # guarda en archivo .parm
        paramsPut
        clear
        echo $raya
        # banner "PE Ripley"
        echo "$ASCIIBanner"
        echo $raya
        paramsDisplay
        echo $raya
        # pregunta al ope si está satisfecho
        continuar="_"
        while [[ $continuar = "_" ]]
        do
            echo " "
            echo " "
            echo " "
            echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
            read continuar
            if [[ -z $continuar ]]
            then
                parmsOK="1"
                continuar="listo"
            else
                if [[ $continuar = "1" ]]
                then
                    :
                fi
            fi
        done
    done
}




#*******************************************************************************
#*******************************************************************************
#                                     MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)

    clear
    echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
        leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
        # el nombre del archivo de la base externa
        archivo=$NOM_ARCHIVO
    else
        # un nombre armado con "PERipley" y la fecha del día
        # $$$$ no será posible ejecutar dos procesos en el mismo día
        # $$$$ se puede agregar un $$ al file name, o la hora
        # $$$$ se puede controlar si ya existe un archivo de hoy ...
        archivo="PERipley"$FECHA_PROC
                [[ $debug -eq 1 ]] && archivo="ZZZ$FECHA_PROC"
    fi
    # arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
        FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
        sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
        echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
        if [[ -z "$sanata" ]]
        then
            echo " "
            echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
            echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
            read sanata
            echo " "
            export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
            echo $EXTFH
            export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
            echo $DATABASE
        fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
        echo $raya
        echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
                echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
        ejecutar_extraccion
        echo "Finalizada la extracción"
    fi
        # cancela si no extrajo nada
        if [[ cantRegsExtraidos -le 0 ]]
        then
                echo "Extracción produjo cero registros - cancelando"
                exit
        fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
        sleep 1
        echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    [[ $cancelado = "1" ]] && exit

    # control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
        echo "No hay un archivo de registros validados - PROCESO CANCELADO"
        exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
        echo " "
        sleep 1
        echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
        # parámetros para el programa: 
    formato="VAL"
    scoring="067"    # ACIERTA+

    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
        tail -25 $archivo.log 

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
        echo " "
# Los parámetros son: 
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
        sleep 1
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo.log 2>>$archivo.log
        tail -20 $archivo.log 

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
        # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls -l *$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio  "finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
/d/iccol/desarrollo/macros>clear
/d/iccol/desarrollo/macros>^[  /d/iccol/desarrollo/macros>clearcat sh-PE-Ripley2cat sh-PE-Ripley 
# /d/iccol/desarrollo/macros/sh-PE-Ripley
#sh-PE-Ripley.V.1.0001
#*******************************************************************************
#SHELL-ID:     sh-PE-Ripley
#DATE-WRITTEN: 2014/05/23
#LAST-UPDATE:  2014/05/23
#AUTHOR:       Globant - JL
#*******************************************************************************
# Definición de constantes
        debug=0                                                 # cero para producción, 1 para test
    doCuu="1"                       # reposicionar el cursor luego de un error
    NOHUP=""                   # contiene "nohup" en producción, null para test
    cancelado="0"                   # las funciones ponen "1" para cancelar todo
    P_SERVER_DEV="codes"            # hostname de la máquina de develop
    raya="----------------------------------------------------------------------"
    ASCIIBanner="
        ######  #######    ######
        #     # #          #     # # #####  #      ###### #   #
        #     # #          #     # # #    # #      #       # #
        ######  #####      ######  # #    # #      #####    #
        #       #          #   #   # #####  #      #        #
        #       #          #    #  # #      #      #        #
        #       #######    #     # # #      ###### ######   #
"

# Parámetros y sus valores iniciales
    FECHA_PROC=$(date '+%Y%m%d')
#   "I": la lista de IDs es interna  "E": provista x cliente
    BASE="E"
#       si BASE="E": archivo y estructura ("1": 1-11 o "2": 1-11-45)
        NOM_ARCHIVO=" "
        TIPO_ARCHIVO="2"
#       si BASE="I": "N": extracción x NIT  "C": por cod suscriptor
        TIPO_EXTRACT="N"
#           si TIPO_EXTRACT="C": NIT (9) o Cod Suscriptor (6), según TIPO_EXTRACT
            ID_EXTRACT=" "
#   Tipo de proceso "A": actual  "H": histórico
    TIPO_PROC="A"
#       Si TIPO_PROC="H": la fecha inicio de proceso histórico
        FECHA_INICIO=" "

readBASE() {
#*******************************************************************************
# Lee el valor de BASE hasta que es OK {I|C} o el ope cancela
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                       ORIGEN DE LA BASE"
        echo $raya
        echo "      I) Interna"
        echo "      E) Externa, provista por el Cliente"
        echo "      enter="$BASE
        echo " "
        rotulo="            BASE:"
        echo "$rotulo"$BASE
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read BASEnew
        if [[ -z $BASEnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        else
                        # convierte a mayúsculas
                        [ $BASEnew = "e" ] && BASEnew="E"
                        [ $BASEnew = "i" ] && BASEnew="I"
                        if [[ $BASEnew = "E" ]] || [[ $BASEnew = "I" ]]
                        then
                                BASE=$BASEnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
}

readNOM_ARCHIVO() {
#*******************************************************************************
# Lee el nombre del archivo de entrada y verifica que exista en $TEMPORALES
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                       NOMBRE DEL ARCHIVO BASE"
        echo $raya
        echo "      Ingrese el nombre del archivo base,"
        echo "      enter="$NOM_ARCHIVO
        echo " "
                tput el
        rotulo="            ARCHIVO:"
        echo "$rotulo"$NOM_ARCHIVO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read NOM_ARCHIVOnew
        tput el
        if [[ -z $NOM_ARCHIVOnew ]]
        then
                        # aceptó el valor ofecido
            loopEnd="1"
        elif [[ -d $TEMPORALES/$NOM_ARCHIVOnew ]]
        then
            echo $NOM_ARCHIVOnew" es un nombre de directorio"
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
        elif [[ ! -f $TEMPORALES/$NOM_ARCHIVOnew ]]
                then
                        echo "El archivo "$NOM_ARCHIVOnew" no se encuentra"
                        tput bel
                        [[ $doCuu = "1" ]] &&  tput cuu 8
                else
                        NOM_ARCHIVO=$NOM_ARCHIVOnew
                        loopEnd="1"
                fi
    done
}

readTIPO_ARCHIVO() {
#*******************************************************************************
# Lee el tipo de archivo "1"=1-11  "2"=1-11-45
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                    ESTRUCTURA DEL ARCHIVO BASE"
        echo $raya
        echo "      1) 1-11"
        echo "      2) 1-11-45"
        echo "      enter="$TIPO_ARCHIVO
        echo " "
        rotulo="            ESTRUCTURA:"
        echo "$rotulo"$TIPO_ARCHIVO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_ARCHIVOnew
        if [[ -z $TIPO_ARCHIVOnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        elif [[ $TIPO_ARCHIVOnew = "1" ]] || [[ $TIPO_ARCHIVOnew = "2" ]]
        then
            TIPO_ARCHIVO=$TIPO_ARCHIVOnew
            loopEnd="1"
        else
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
        fi
    done
}

readTIPO_EXTRACT() {
#*******************************************************************************
# Tipo de extracción, cuando BASE="I": "N" por NIT  "C" por cod suscriptor
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                         TIPO DE EXTRACCIÓN"
        echo $raya
        echo "      N) Por NIT"
        echo "      C) Por codigo de suscriptor"
        echo "      enter="$TIPO_EXTRACT
        echo " "
        rotulo="            TIPO de EXTRACCIÓN:"
        echo "$rotulo"$TIPO_EXTRACT
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_EXTRACTnew
        if [[ -z $TIPO_EXTRACTnew ]]
        then
            loopEnd="1"
        else
                        [ $TIPO_EXTRACTnew = "c" ] && TIPO_EXTRACTnew="C"
                        [ $TIPO_EXTRACTnew = "n" ] && TIPO_EXTRACTnew="N"
                        if [[ $TIPO_EXTRACTnew = "N" ]] || [[ $TIPO_EXTRACTnew = "C" ]]
                        then
                                TIPO_EXTRACT=$TIPO_EXTRACTnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
}

readID_EXTRACT() {
#*******************************************************************************
# Lee el criterio para extracción base interna: un NIT o un cod de suscriptor
#*******************************************************************************
#   según TIPO_EXTRAC se lee un NIT o un COD SUSCRIPTOR
    if [[ $TIPO_EXTRACT = "N" ]]
    then
        criterioExtraccion="        NIT"
        inputLen=9
    else
        criterioExtraccion="COD SUSCRIPTOR"
        inputLen=6
    fi
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                $criterioExtraccion PARA LA EXTRACCIÓN"
        echo $raya

        echo "      Ingrese el"$criterioExtraccion" para extracción ($inputLen dígitos),"
        echo "      enter="$ID_EXTRACT
        echo " "
        tput el # borra caracteres sobrantes
        rotulo="            $criterioExtraccion:"
        echo "$rotulo"$ID_EXTRACT
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read ID_EXTRACTnew
        tput el # borra mensaje de error
        if [[ -z $ID_EXTRACTnew ]] # acepta el valor actual
        then
            loopEnd="1"
        elif [[ "$ID_EXTRACTnew" !=  +([0-9]) ]] # debe ser solo números
        then
            echo "el dato ingresado debe ser numérico"
            tput bel
            [[ $doCuu = "1" ]] &&  tput cuu 8
                elif [[ ${#ID_EXTRACTnew} -ne inputLen ]] # control de longitud (9 o 6)
                then
                        echo 'longitud incorrecta (debe ser '$inputlen' dígitos)'
                        tput bel
                        [ $doCuu = "1" ] &&  tput cuu 8
                else # todo OK
                        ID_EXTRACT=$ID_EXTRACTnew
                        loopEnd="1"
                fi
    done
}

readTIPO_PROC() {
#*******************************************************************************
# Tipo de proceso, "A" por Actual, "H" por Histórico
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                          TIPO DE PROCESO"
        echo $raya
        echo "      A) Proceso actual"
        echo "      H) Proceso histórico"
        echo "      enter="$TIPO_PROC
        echo " "
        rotulo="            TIPO de PROCESO:"
        echo "$rotulo"$TIPO_PROC
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read TIPO_PROCnew
        if [[ -z $TIPO_PROCnew ]]
        then
                        # aceptó el valor por defecto
            loopEnd="1"
        else
                        # traduce minúsculas
                        [ $TIPO_PROCnew = "a" ] && TIPO_PROCnew="A"
                        [ $TIPO_PROCnew = "h" ] && TIPO_PROCnew="H"
                        if [[ $TIPO_PROCnew = "H" ]] || [[ $TIPO_PROCnew = "A" ]]
                        then
                                TIPO_PROC=$TIPO_PROCnew
                                loopEnd="1"
                        else
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        fi
                fi
        done
        }

readFECHA_INICIO() {
#*******************************************************************************
# Fecha de proceso, cuando tipo de extracción es "H"
#*******************************************************************************
    loopEnd="0"
    while [[ $loopEnd = "0" ]]
    do
        echo " "
#             ......................................................................
        echo "                  FECHA INICIAL DE PROCESO HISTÓRICO"
        echo $raya
        echo "      Ingrese fecha inicial de proceso,"
        echo "      enter="$FECHA_INICIO
        echo " "
        rotulo="            FECHA INICIO de PROCESO AAAAMMDD:"
        echo "$rotulo"$FECHA_INICIO
                tput cuu 1 # vuelve a la línea anterior
        echo "$rotulo\c"
        read FECHA_INICIOnew
        if [[ -z $FECHA_INICIOnew ]]
        then
                        # aceptó el valor actual
            loopEnd="1"
        elif [[ "$FECHA_INICIOnew" != +([0-9]) ]] # debe ser solo números
        then
            echo "la fecha solamente puede contener dígitos"
            tput bel
            [[ $doCuu = "1" ]] && tput cuu 8
                elif [[ "$FECHA_INICIOnew" != +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]]
                # rango de año de 2000 hasta 2029, mes 01 a 12 y día 00 a 31
                # [[ "20141229" = +(20[012][0-9](0[0-9]|1[12])([012][0-9]|3[01])) ]] && echo "ok"
                then
                        echo "la fecha es inválida, anterior a 2000 o posterior a 2029"
                        tput bel
                        [ $doCuu = "1" ] &&  tput cuu 8
                else
                        # debe ser anterior al mes actual
                        FECHA_INICIOnewYYYYMM=$(echo $FECHA_INICIOnew  | cut -c1-6)
                        FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)
                        if [[ $FECHA_INICIOnewYYYYMM -ge $FECHA_PROC_YYYYMM ]]
                        then
                                echo "la fecha desde debe ser anterior a la actual"
                                tput bel
                                [ $doCuu = "1" ] &&  tput cuu 8
                        else
                                # todo bien
                                FECHA_INICIO=$FECHA_INICIOnew
                                FECHA_INICIO_YYYYMM=$FECHA_INICIOnewYYYYMM
                                loopEnd="1"
                        fi
        fi
    done
}




paramsGet() {
#*******************************************************************************
# Lee los parámetros de la corrida anterior
#*******************************************************************************
#   asegura que exista el arch de parámetros general
    [[ ! -f $0.parm ]] && touch $0.parm
#   lee los parámetros
    params=$(cat $0.parm)
    echo '>>>> params: ' "$params"
#   separa los parámetros según su posición
    BASE=$(echo "$params" | cut -d ";" -f1)
    NOM_ARCHIVO=$(echo "$params" | cut -d ";" -f2)
    TIPO_ARCHIVO=$(echo "$params" | cut -d ";" -f3)
    TIPO_EXTRACT=$(echo "$params" | cut -d ";" -f4)
    ID_EXTRACT=$(echo "$params" | cut -d ";" -f5)
    TIPO_PROC=$(echo "$params" | cut -d ";" -f6)
    FECHA_INICIO=$(echo "$params" | cut -d ";" -f7)
}

paramsPut() {
#*******************************************************************************
# Guarda los parámetros de la corrida en el archivo .parm
#*******************************************************************************
        allParms=$BASE";"${NOM_ARCHIVO:-" "}";"${TIPO_ARCHIVO:-" "}";"
        allParms=$allParms${TIPO_EXTRACT:-" "}";"${ID_EXTRACT:-" "}";"
        allParms=$allParms$TIPO_PROC";"${FECHA_INICIO:-" "}
        echo $allParms
        echo "file:" $0.parm " in:" $(pwd)
        echo $allParms >| $0.parm                       # para pruebas
        echo $allParms >| $archivo.parm
}

paramsPrint() {
#*******************************************************************************
# Muestra todos los parámetros, para pruebas
#*******************************************************************************
    echo "BASE="$BASE"<"
    echo "NOM_ARCHIVO="$NOM_ARCHIVO"<"
    echo "TIPO_ARCHIVO="$TIPO_ARCHIVO"<"
    echo "TIPO_EXTRACT="$TIPO_EXTRACT"<"
    echo "ID_EXTRACT="$ID_EXTRACT"<"
    echo "TIPO_PROC="$TIPO_PROC"<"
    echo "FECHA_INICIO="$FECHA_INICIO"<"
}

paramsDisplay() {
#*******************************************************************************
# Hace un listado de los parámetros calidad presentación
# Ejemplo:
# PARÁMETROS del PROCESO
#     Fecha: 20140529                                  FECHA_PROC
#     Base: C  provista por el cliente
#     Archivo: 1
#     Estructura: 1  1-11-45
#     Tipo de proceso: H  histórico, desde: 20140101   FECHA_DESDE
#*******************************************************************************
    i='    ' # indent
    s='  '   # separación
    echo "PARÁMETROS del PROCESO"
    echo "${i}Fecha="$FECHA_PROC
    echo "${i}Archivo: "$NOM_ARCHIVO
    print -n "${i}Base: "$BASE
    if [[ $BASE = "E" ]]
    then
        echo "${s}provista por el cliente"
        print -n "${i}Estructura: "$TIPO_ARCHIVO
        [[ $TIPO_ARCHIVO = "1" ]] && echo "${s}1-11"
        [[ $TIPO_ARCHIVO = "2" ]] && echo "${s}1-11-45"
    else
        echo "${s}extraída de datos internos"
        print -n "${i}Criterio de extracción: "$TIPO_EXTRACT
        [[ $TIPO_EXTRACT = "N" ]] && echo "${s}por NIT "$ID_EXTRACT
        [[ $TIPO_EXTRACT = "C" ]] && echo "${s}por cod suscriptor "$ID_EXTRACT
    fi
    print -n "${i}Tipo de proceso: "$TIPO_PROC
    if [[ $TIPO_PROC = "H" ]]
    then
        echo "${s}histórico, desde: "$FECHA_INICIO
    else
        echo "${s}actual"
    fi
}

ejecutar_extraccion() {
#***********************************************************************
# Extrae registros por suscriptor del archivo ICMCRECOPY.DAT en el prn
#***********************************************************************
    # el directorio del archivo cambia según el ambiente
    P_MAQUINA=$(hostname)
    if [[ $P_MAQUINA = $P_SERVER_DEV ]]
    then
        echo "Máquina de desarrollo:" $P_MAQUINA
        ICMCRECOPY='/despeciales/ICMCRECOPY.DAT'
    else
        # echo "Máquina de producción:" $P_MAQUINA
        ICMCRECOPY='$ESPECIALES/ctlc/ICMCRECOPY.DAT'
    fi
    # extrae tipo y número de id por NIT del suscriptor, elimina repeticiones
    [[ -s $archivo_prn ]] && rm $archivo_prn
    echo "El archivo de salida es $archivo_prn"
    echo "El archivo de input es "$ICMCRECOPY
        if [[ TIPO_EXTRAC = "N" ]] 
        then # extracción por NIT
                grepRegex="^.........*"$ID_EXTRACT"..$"
      # grepRegex="^A......[14].*"$ID_EXTRACT".P$"
        else # extracción por cod suscriptor
                grepRegex="^."$ID_EXTRACT"..*..$"
      # grepRegex="^A"$ID_EXTRACT"[14].*.P$"
        fi
        # $$$$ DEBUG: regex que extrae TODOS los registros
    [[ $debug = 1 ]] && grepRegex='.*'
    echo grep "$grepRegex" $ICMCRECOPY \| cut -c8-19 \| sort -u
    grep "$grepRegex" $ICMCRECOPY | cut -c8-19 | sort -u >| $archivo_prn
    # cuenta los registros extraídos
    cantRegsExtraidos=$(wc -l < $archivo_prn)
    echo "Registros extraídos: "$cantRegsExtraidos
    TIPO_ARCHIVO="1"  # es un archivo 1-11
}

ejecutar_validacion() {
#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registtros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo "Input PESVNO: "$archivo_prn
    # si el input tiene estructura 1-11 le antepone el REGPESVNO.VALI
        registroExtra=0
    if [[ $TIPO_ARCHIVO = "1" ]]
    then
        PESVNO_INPUT=${archivo}"VALI.prn"
        cat $DATOS/REGPESVNO.VALI $archivo_prn >| $PESVNO_INPUT
                rm $archivo_prn
                mv  $PESVNO_INPUT $archivo_prn
                registroExtra=1
    fi

    echo PESVNO $archivo_prn $archivo_val $archivo_inc 10 2
    $NOHUP x PESVNO $archivo_prn $archivo_val $archivo_inc 10 2 >| $archivo.log
    cantDeRegistrosTotal=$(wc -l < $archivo_prn)
    cantDeRegistrosVal=$(wc -l < $archivo_val)
    cantDeRegistrosInc=$(wc -l < $archivo_inc)
    echo "PESVNO - registros válidos:" $cantDeRegistrosVal " inconsistentes:" $cantDeRegistrosInc " total:" $cantDeRegistrosTotal
    head -10 $archivo.log
    if [[ $cantDeRegistrosTotal -ne $(expr $cantDeRegistrosVal + $cantDeRegistrosInc + $registroExtra) ]]
    then
        echo " "
        echo $raya
        echo "Las cantidades de registros no cuadran: proceso cancelado"
        echo $raya
        cancelado="1"
    fi
}

leerParametros() {
#*******************************************************************************
# Interacción con el operador para cargar/editar el set de parámetros
#*******************************************************************************
#   carga los valores del archivo .parm
    paramsGet
    # lee el set de parámetros hasta la satisfacción del ope
    parmsOK="0"
    while [[ $parmsOK = "0" ]]
    do
        readBASE                     # I interna, C cliente
        if [[ $BASE = "E" ]]
        then
            readNOM_ARCHIVO          # nombre del archivo base
            readTIPO_ARCHIVO         # 0 1-11, 1 1-11-45
        else
            readTIPO_EXTRACT         # N NIT, C cod subs
            readID_EXTRACT           # NIT o cos subs
        fi
        readTIPO_PROC                # A actual, H histórico
        if [[ $TIPO_PROC = "H" ]]
        then
            readFECHA_INICIO           # fecha desde
        else
            FECHA_INICIO=$FECHA_PROC
        fi

        paramsPrint # $$$$ DEBUG
        sleep 2
        # guarda en archivo .parm
        paramsPut
        clear
        echo $raya
        # banner "PE Ripley"
        echo "$ASCIIBanner"
        echo $raya
        paramsDisplay
        echo $raya
        # pregunta al ope si está satisfecho
        continuar="_"
        while [[ $continuar = "_" ]]
        do
            echo " "
            echo " "
            echo " "
            echo "Ingrese 1 para cambiar los parámetros, enter para continuar:\c"
            read continuar
            if [[ -z $continuar ]]
            then
                parmsOK="1"
                continuar="listo"
            else
                if [[ $continuar = "1" ]]
                then
                    :
                fi
            fi
        done
    done
}




#*******************************************************************************
#*******************************************************************************
#                                     MAIN
#*******************************************************************************
#*******************************************************************************
    #Fecha y hora de ejecución
    horaInicio=$(date '+%H:%M:%S')
    FECHA_PROC=$(date '+%Y%m%d')
    FECHA_PROC_YYYYMM=$(echo $FECHA_PROC  | cut -c1-6)

    clear
    echo $raya
#   banner "PE Ripley"
    echo "$ASCIIBanner"
    echo $raya
    [[ $debug -eq 1 ]] && echo "DEBUG"

#*******************************************************************************
# Lectura de parámetros en la terminal
#*******************************************************************************
        leerParametros

#*******************************************************************************
# Nombres de los archivos, SANATA
#*******************************************************************************
    # la variable archivo es el nombre de la base, interna o del cliente,
    # y se usa para armar todos los demás nombres de archivos del proceso
    if [[ $BASE = "E" ]]
    then
        # el nombre del archivo, sin extensión,  de la base externa
        archivo=$NOM_ARCHIVO
        archivo=$( echo $NOM_ARCHIVO | sed "s/\..*//" )
    else
        # un nombre armado con "PERipley" y la fecha del día
        # $$$$ no será posible ejecutar dos procesos en el mismo día
        # $$$$ se puede agregar un $$ al file name, o la hora
        # $$$$ se puede controlar si ya existe un archivo de hoy ...
        archivo="PERipley"$FECHA_PROC
        NOM_ARCHIVO=$archivo
    fi
    # arma los nombres de los archivos del proceso en base al anterior
    archivo_prn=$archivo.prn
    archivo_val=$archivo.val
    archivo_inc=$archivo.inc

#*******************************************************************************
# Proceso histórico: ubica la SANATA que corresponde a la fecha inicial
# de proceso FECHA_INICIO
#    Ejemplos de variables exportadas:
#    DATABASE=/san_ata_2/200412/icdb
#    DATABASE=/san_ata_3/200512/icdb
#    EXTFH=/san_ata_3/200603/extfh.cfg
#    EXTFH=/san_ata_3/200601/extfh.cfg
#*******************************************************************************
    if [[ $TIPO_PROC = "H" ]]
    then
        FECHA_INICIO_YYYYMM=$(echo $FECHA_INICIO | cut -c1-6 )
        sanata=$(grep $FECHA_INICIO_YYYYMM $DATOS/ICSANATA.DAT | cut -c17-17)
        echo "sanata para fecha" $FECHA_INICIO_YYYYMM "es" $sanata
        if [[ -z "$sanata" ]]
        then
            echo " "
            echo "No se encontró sanata para la fecha $FECHA_INICIO_YYYYMM"
            echo "Digite san_ata para fecha historica $FECHA_INICIO_YYYYMM ---> \c"
            read sanata
            echo " "
            export EXTFH="/san_ata_"$sanata"/"$fecha"/extfh.cfg"
            echo $EXTFH
            export DATABASE="/san_ata_"$sanata"/"$fecha"/icdb"
            echo $DATABASE
        fi
    fi

#*******************************************************************************
# Extracción
# Produce el archivo prn
#*******************************************************************************
    cd $TEMPORALES
    if [[ $BASE = "I" ]]
    then
        echo $raya
        echo "EXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT"
                # echo "\n$raya\nEXTRACCIÓN: $TIPO_EXTRACT $ID_EXTRACT\n\n" >> $archivo_log
        ejecutar_extraccion
        echo "Finalizada la extracción"
                # cancela si no extrajo nada
                if [[ -n cantRegsExtraidos ]] || [[ cantRegsExtraidos -le 0 ]]
                then
                        echo "Extracción produjo cero registros - cancelando"
                        exit
                fi
        else
                cp $archivo $archivo_prn
        fi

#*******************************************************************************
# PESVNO: validación de IDs
# Valida los registros del archivo .prn y graba archivos .val y .inc
#*******************************************************************************
    echo $raya
    echo "PESVNO: validación de IDs"
        sleep 1
        # echo "\n$raya\nPESVNO:\n\n" >> $archivo_log
    [[ -s $archivo_val ]] && rm $archivo_val
    [[ -s $archivo_inc ]] && rm $archivo_inc
    ejecutar_validacion
    [[ $cancelado = "1" ]] && exit

    # control: si no hay un archivo .val se cancela el proceso
    if [[ ! -s $archivo_val ]]
    then
        echo "No hay un archivo de registros validados - PROCESO CANCELADO"
        exit
    fi

#*******************************************************************************
# SCOTBATCH: cálculo de scores
# ...
#*******************************************************************************
    echo $raya
    echo "SCOTBATCH: cálculo de scores"
        echo " "
        sleep 1
        # echo "\n$raya\nSCOTBATCH:\n\n" >> $archivo_log
        # parámetros para el programa: 
    formato="VAL"
    scoring="067"    # ACIERTA+

    echo SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val
    $NOHUP x SCOTBATCH $FECHA_PROC_YYYYMM $scoring $formato $archivo_val >> $archivo.log 2>>$archivo.log
        tail -25 $archivo.log 

#*******************************************************************************
# Ejecución del programa iceprerip01
#*******************************************************************************
    echo $raya
    echo "ICEPRERIP01: datos para Ripley"
        echo " "
# Los parámetros son: 
#    archivo de entrada de validados
#    archivo de entrada de inconsistencias
#    estructura del archivo ????
#    tipo de proceso ????
#    fecha del periodo
        sleep 1
    $NOHUP x iceprerip01-test $archivo_val $archivo_inc 2 A $FECHA_PROC >> $archivo.log 2>>$archivo.log
        tail -20 $archivo.log 

#*******************************************************************************
# Nombres de los archivos
#*******************************************************************************
    # muestra los nombres de los archivos del proceso
    echo $raya
    echo "ARCHIVOS:"
    echo " "
        # echo "\n$raya\nICEPRERIP01:\n\n" >> $archivo_log
    ls -l *$archivo*
    echo " "

#*******************************************************************************
# Finalmente
#*******************************************************************************
    horaFin=$(date '+%H:%M:%S')
    echo " "
    echo $raya
    echo "fin del proceso "$0
    echo "Iniciado: "$horaInicio  "finalizado: "$horaFin
    echo $raya
    exit

#*******************************************************************************

# El proceso batch debe incluir como mensajes de salida:
#   + Estadísticas de Validación (PESVNO)
#   + Estadísticas de cálculo de Score (SCOTBATCH)
#   + Nombres de los archivos generados

# Archivo Log: Por cada procedimiento se debe registrar la siguiente información:
#   + Parámetros Procesamiento
#     Archivo de parámetros
#   + Hora de inicio de procesamiento
#   + Hora de fin de procesamiento
#   + Número de identificaciones de entrada
#   + Número de registros procesados
#   + Número de registros no procesados
#   + Errores (en el archivo .inc)
#   +     Id procesado
#   +     Descripción del error
#*******************************************************************************
#*******************************************************************************
#*******************************************************************************
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
/d/iccol/desarrollo/macros>
shell will timeout in 60 seconds due to inactivity
ksh[2]: timed out waiting for input
You have running jobs
